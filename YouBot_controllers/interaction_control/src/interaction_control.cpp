/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  src\interaction_control.cpp
 *  subm:  interaction_control
 *  model: ModelControl
 *  expmt: ModelControl
 *  date:  October 21, 2011
 *  time:  3:19:46 pm
 *  user:  Campuslicentie
 *  from:  Universiteit Twente
 *  build: 4.1.2.2
 **********************************************************/

/* Standard include files */
#include <stdio.h>
#include <math.h>

/* 20-sim include files */
#include "interaction_control.h"

/* Orocos include */
#include <boost/algorithm/string.hpp>
#include <ocl/Component.hpp>
#include <rtt/types/SequenceTypeInfo.hpp>
#include <rtt/types/carray.hpp>
#include <ros/package.h>

using namespace Orocos;
using namespace RTT;
using namespace std;

namespace ModelControl
{


	interaction_control::interaction_control(string name): TaskContext(name, PreOperational),TSim_config_xml("config/interaction_control_base_config.xml")
	{
		using namespace boost;

		RTT::types::Types()->addType(new
				RTT::types::CArrayTypeInfo<RTT::types::carray<double> >("double[]"));

		initializeComputation();

		std::string path = ros::package::getPath("interaction_control");
		TSim_config_xml=path+"/config/interaction_control_base_config.xml";

		this->addProperty("integration_step_size", step_size ).doc("Integration step size.");
		this->addProperty("configuration_file",TSim_config_xml).doc("Path to configuation xml, relative to run directory");
		// move to configureHook
		setPeriod(step_size);
		setupParametersAndStates();

	}

	interaction_control::~interaction_control(void)
	{
		cleanupPropertyBags(this->properties());

		/* free memory */
		delete[] C;
		delete[] P;
		delete[] I;
		delete[] V;
		delete[] s;
		delete[] R;
		delete[] M;
		delete[] U;
		delete[] workarray;
	}

	bool interaction_control::configureHook()
	{
		if(! TaskContext::configureHook())
		{
			return false;
		}

		return true;
	}

	/* the initialization function for submodel */
	bool interaction_control::startHook()
	{
		if(! TaskContext::startHook())
		{
			return false;
		}

		for (vector<Adapter20Sim<RTT::InputPort<flat_matrix_t> > >::iterator it = inputPorts.begin(); it != inputPorts.end(); ++it)
		{
			flat_matrix_t temp;
			if(! it->getPort()->connected() )
			{
				log(Warning) << "InputPort (" << it->getFullName() << ") not connected." << endlog();
				//				return false;
			}
		}

		/* calculate initial and static equations */
		CalculateInitial ();
		CalculateStatic ();
		CopyInputsToVariables ();
		CalculateInput ();
		CalculateDynamic();
		CalculateOutput ();
		CopyVariablesToOutputs ();
		return true;
	}

	/* the function that calculates the submodel */
	void interaction_control::updateHook ()
	{
		TaskContext::updateHook();

		/* another precessor submodel could determine the parameters of this submodel
		 and therefore the static parameter calculations need to be performed. */
		CalculateStatic ();

		/* main calculation of the model */
		CopyInputsToVariables (); //get input from port
		CalculateInput ();
		myintegmethod.Step();
		CalculateOutput ();
		CopyVariablesToOutputs (); //send output to port
	}

	/* the termination function for submodel */
	void interaction_control::stopHook()
	{
		TaskContext::stopHook();

		/* copy the inputs */
		CopyInputsToVariables (); //get inputs from port

		/* calculate the final model equations */
		CalculateFinal ();

		/* set the outputs */
		CopyVariablesToOutputs (); //send output to port
	}

	/* this PRIVATE function sets the input variables from the input vector */
	//@todo Improve for multiple component inputs to have a synchronized execution.
	void interaction_control::CopyInputsToVariables ()
	{
		/* OROCOS Entry to copy port to input array */
		for (vector<Adapter20Sim<RTT::InputPort<flat_matrix_t> > >::iterator it =
				inputPorts.begin(); it != inputPorts.end(); ++it)
		{
			flat_matrix_t temp;
			if(it->getPort()->read(temp)!=RTT::NoData)
			{
				log(Debug)<<"CopyInputsToVariables"<<endlog();
				it->setValue(temp);
			}
		}

	}

	/* this PRIVATE function uses the output variables to fill the output vector */
	void interaction_control::CopyVariablesToOutputs ()
	{

		/* OROCOS Entry to copy output to port */
		for (vector<Adapter20Sim<RTT::OutputPort<flat_matrix_t> > >::iterator it =
				outputPorts.begin(); it != outputPorts.end(); ++it)
		{
			//	log(Debug)<<"writing out ="<<it->getValue().address()[1]<<endlog();

			//temp=it->getValue();

			//log(Debug)<<temp.address()[0]<<temp.address()[1]<<temp.address()[2]<<endlog();
			//log(Debug)<<it->getPort().getName()<<endlog();
			flat_matrix_t temp;
			temp=it->getValue();
			it->getPort()->write(temp);
		}
	}

	/* This function calculates the initial equations of the model.
	 * These equations are calculated before anything else
	 */
	void interaction_control::CalculateInitial (void)
	{
				/* CalculateJ\initialq = [0; 0; 0; CalculateJ\InitialJointPos[1]; CalculateJ\InitialJointPos[2]; CalculateJ\InitialJointPos[3]; CalculateJ\InitialJointPos[4]; CalculateJ\InitialJointPos[5]]; */
		M[47].mat[0] = 0.0;
		M[47].mat[1] = 0.0;
		M[47].mat[2] = 0.0;
		M[47].mat[3] = M[2].mat[0];
		M[47].mat[4] = M[2].mat[1];
		M[47].mat[5] = M[2].mat[2];
		M[47].mat[6] = M[2].mat[3];
		M[47].mat[7] = M[2].mat[4];

		/* GravityCompensation1\Base\AdHik1\COMdim = GravityCompensation1\Base\COMdim; */
		XXMatrixMov (&M[74], &M[84]);

		/* GravityCompensation1\Base\Hij\dim = GravityCompensation1\Base\dim; */
		XXMatrixMov (&M[82], &M[85]);

		/* GravityCompensation1\Base\Gravity\m = GravityCompensation1\Base\m; */
		P[49] = P[53];

		/* GravityCompensation1\Joint12\Integrate\init = GravityCompensation1\Joint12\InitialPos; */
		P[60] = P[61];

		/* GravityCompensation1\Joint23\Integrate\init = GravityCompensation1\Joint23\InitialPos; */
		P[62] = P[63];

		/* GravityCompensation1\Joint34\Integrate\init = GravityCompensation1\Joint34\InitialPos; */
		P[64] = P[65];

		/* GravityCompensation1\Joint45\Integrate\init = GravityCompensation1\Joint45\InitialPos; */
		P[66] = P[67];

		/* GravityCompensation1\JointBase1\Integrate\init = GravityCompensation1\JointBase1\InitialPos; */
		P[68] = P[69];

		/* GravityCompensation1\Link1\AdHik1\COMdim = GravityCompensation1\Link1\COMdim; */
		XXMatrixMov (&M[134], &M[144]);

		/* GravityCompensation1\Link1\Hij\dim = GravityCompensation1\Link1\dim; */
		XXMatrixMov (&M[142], &M[145]);

		/* GravityCompensation1\Link1\Gravity\m = GravityCompensation1\Link1\m; */
		P[73] = P[77];

		/* GravityCompensation1\Link2\AdHik1\COMdim = GravityCompensation1\Link2\COMdim; */
		XXMatrixMov (&M[153], &M[163]);

		/* GravityCompensation1\Link2\Hij\dim = GravityCompensation1\Link2\dim; */
		XXMatrixMov (&M[161], &M[164]);

		/* GravityCompensation1\Link2\Gravity\m = GravityCompensation1\Link2\m; */
		P[87] = P[91];

		/* GravityCompensation1\Link3\AdHik1\COMdim = GravityCompensation1\Link3\COMdim; */
		XXMatrixMov (&M[172], &M[182]);

		/* GravityCompensation1\Link3\Hij\dim = GravityCompensation1\Link3\dim; */
		XXMatrixMov (&M[180], &M[183]);

		/* GravityCompensation1\Link3\Gravity\m = GravityCompensation1\Link3\m; */
		P[101] = P[105];

		/* GravityCompensation1\Link4\AdHik1\COMdim = GravityCompensation1\Link4\COMdim; */
		XXMatrixMov (&M[191], &M[201]);

		/* GravityCompensation1\Link4\Hij\dim = GravityCompensation1\Link4\dim; */
		XXMatrixMov (&M[199], &M[202]);

		/* GravityCompensation1\Link4\Gravity\m = GravityCompensation1\Link4\m; */
		P[115] = P[119];

		/* GravityCompensation1\Link5\AdHik1\COMdim = GravityCompensation1\Link5\COMdim; */
		XXMatrixMov (&M[210], &M[220]);

		/* GravityCompensation1\Link5\Hij\dim = GravityCompensation1\Link5\dim; */
		XXMatrixMov (&M[218], &M[221]);

		/* GravityCompensation1\Link5\Gravity\m = GravityCompensation1\Link5\m; */
		P[129] = P[133];

		/* GravityCompensation1\Base\m = GravityCompensation1\Linkm[1]; */
		P[53] = M[228].mat[0];

		/* GravityCompensation1\Base\COMdim = GravityCompensation1\LinkCOMdim[1:3,1]; */
		M[84].mat[0] = M[226].mat[0];
		M[84].mat[1] = M[226].mat[6];
		M[84].mat[2] = M[226].mat[12];

		/* GravityCompensation1\Base\dim = GravityCompensation1\Linkdim[1:3,1]; */
		M[85].mat[0] = M[227].mat[0];
		M[85].mat[1] = M[227].mat[6];
		M[85].mat[2] = M[227].mat[12];

		/* GravityCompensation1\Link1\m = GravityCompensation1\Linkm[2]; */
		P[77] = M[228].mat[1];

		/* GravityCompensation1\Link1\COMdim = GravityCompensation1\LinkCOMdim[1:3,2]; */
		M[144].mat[0] = M[226].mat[1];
		M[144].mat[1] = M[226].mat[7];
		M[144].mat[2] = M[226].mat[13];

		/* GravityCompensation1\Link1\dim = GravityCompensation1\Linkdim[1:3,2]; */
		M[145].mat[0] = M[227].mat[1];
		M[145].mat[1] = M[227].mat[7];
		M[145].mat[2] = M[227].mat[13];

		/* GravityCompensation1\Link2\m = GravityCompensation1\Linkm[3]; */
		P[91] = M[228].mat[2];

		/* GravityCompensation1\Link2\COMdim = GravityCompensation1\LinkCOMdim[1:3,3]; */
		M[163].mat[0] = M[226].mat[2];
		M[163].mat[1] = M[226].mat[8];
		M[163].mat[2] = M[226].mat[14];

		/* GravityCompensation1\Link2\dim = GravityCompensation1\Linkdim[1:3,3]; */
		M[164].mat[0] = M[227].mat[2];
		M[164].mat[1] = M[227].mat[8];
		M[164].mat[2] = M[227].mat[14];

		/* GravityCompensation1\Link3\m = GravityCompensation1\Linkm[4]; */
		P[105] = M[228].mat[3];

		/* GravityCompensation1\Link3\COMdim = GravityCompensation1\LinkCOMdim[1:3,4]; */
		M[182].mat[0] = M[226].mat[3];
		M[182].mat[1] = M[226].mat[9];
		M[182].mat[2] = M[226].mat[15];

		/* GravityCompensation1\Link3\dim = GravityCompensation1\Linkdim[1:3,4]; */
		M[183].mat[0] = M[227].mat[3];
		M[183].mat[1] = M[227].mat[9];
		M[183].mat[2] = M[227].mat[15];

		/* GravityCompensation1\Link4\m = GravityCompensation1\Linkm[5]; */
		P[119] = M[228].mat[4];

		/* GravityCompensation1\Link4\COMdim = GravityCompensation1\LinkCOMdim[1:3,5]; */
		M[201].mat[0] = M[226].mat[4];
		M[201].mat[1] = M[226].mat[10];
		M[201].mat[2] = M[226].mat[16];

		/* GravityCompensation1\Link4\dim = GravityCompensation1\Linkdim[1:3,5]; */
		M[202].mat[0] = M[227].mat[4];
		M[202].mat[1] = M[227].mat[10];
		M[202].mat[2] = M[227].mat[16];

		/* GravityCompensation1\Link5\m = GravityCompensation1\Linkm[6]; */
		P[133] = M[228].mat[5];

		/* GravityCompensation1\Link5\COMdim = GravityCompensation1\LinkCOMdim[1:3,6]; */
		M[220].mat[0] = M[226].mat[5];
		M[220].mat[1] = M[226].mat[11];
		M[220].mat[2] = M[226].mat[17];

		/* GravityCompensation1\Link5\dim = GravityCompensation1\Linkdim[1:3,6]; */
		M[221].mat[0] = M[227].mat[5];
		M[221].mat[1] = M[227].mat[11];
		M[221].mat[2] = M[227].mat[17];

		/* GravityCompensation1\JointBase1\InitialPos = GravityCompensation1\InitialJointPos[1]; */
		P[69] = M[225].mat[0];

		/* GravityCompensation1\Joint12\InitialPos = GravityCompensation1\InitialJointPos[2]; */
		P[61] = M[225].mat[1];

		/* GravityCompensation1\Joint23\InitialPos = GravityCompensation1\InitialJointPos[3]; */
		P[63] = M[225].mat[2];

		/* GravityCompensation1\Joint34\InitialPos = GravityCompensation1\InitialJointPos[4]; */
		P[65] = M[225].mat[3];

		/* GravityCompensation1\Joint45\InitialPos = GravityCompensation1\InitialJointPos[5]; */
		P[67] = M[225].mat[4];

	}

	/* This function calculates the static equations of the model.
	 * These equations are only dependent from parameters and constants
	 */
	void interaction_control::CalculateStatic (void)
	{
			/* CalculateJ\base_offset_H = homogeneous (eye (3), CalculateJ\baseoffset); */
	XXMatrixEye (&M[264]);
	XXMatrixHomogeneous (&M[46], &M[264], &M[5]);

	/* CalculateJ\p1ref = CalculateJ\Linkdim[1:3,1]; */
	M[28].mat[0] = M[3].mat[0];
	M[28].mat[1] = M[3].mat[6];
	M[28].mat[2] = M[3].mat[12];

	/* CalculateJ\p21 = CalculateJ\Linkdim[1:3,2]; */
	M[29].mat[0] = M[3].mat[1];
	M[29].mat[1] = M[3].mat[7];
	M[29].mat[2] = M[3].mat[13];

	/* CalculateJ\p32 = CalculateJ\Linkdim[1:3,3]; */
	M[30].mat[0] = M[3].mat[2];
	M[30].mat[1] = M[3].mat[8];
	M[30].mat[2] = M[3].mat[14];

	/* CalculateJ\p43 = CalculateJ\Linkdim[1:3,4]; */
	M[31].mat[0] = M[3].mat[3];
	M[31].mat[1] = M[3].mat[9];
	M[31].mat[2] = M[3].mat[15];

	/* CalculateJ\p54 = CalculateJ\Linkdim[1:3,5]; */
	M[32].mat[0] = M[3].mat[4];
	M[32].mat[1] = M[3].mat[10];
	M[32].mat[2] = M[3].mat[16];

	/* CalculateJ\Rtip5 = eye (3); */
	XXMatrixEye (&M[27]);

	/* CalculateJ\ptip5 = CalculateJ\Linkdim[1:3,6]; */
	M[33].mat[0] = M[3].mat[5];
	M[33].mat[1] = M[3].mat[11];
	M[33].mat[2] = M[3].mat[17];

	/* CalculateJ\Htip5 = homogeneous (CalculateJ\Rtip5, CalculateJ\ptip5); */
	XXMatrixHomogeneous (&M[40], &M[27], &M[33]);

	/* CalculateJ\uTrzrefref[1:3] = CalculateJ\omegaz; */
	M[14].mat[0] = M[8].mat[0];
	M[14].mat[1] = M[8].mat[1];
	M[14].mat[2] = M[8].mat[2];

	/* CalculateJ\uTrzrefref[4:6] = 0; */
	M[14].mat[3] = 0.0;
	M[14].mat[4] = 0.0;
	M[14].mat[5] = 0.0;

	/* CalculateJ\uTryrefref[1:3] = 0; */
	M[15].mat[0] = 0.0;
	M[15].mat[1] = 0.0;
	M[15].mat[2] = 0.0;

	/* CalculateJ\uTryrefref[4:6] = CalculateJ\vy; */
	M[15].mat[3] = M[7].mat[0];
	M[15].mat[4] = M[7].mat[1];
	M[15].mat[5] = M[7].mat[2];

	/* CalculateJ\uTrxrefref[1:3] = 0; */
	M[16].mat[0] = 0.0;
	M[16].mat[1] = 0.0;
	M[16].mat[2] = 0.0;

	/* CalculateJ\uTrxrefref[4:6] = CalculateJ\vx; */
	M[16].mat[3] = M[6].mat[0];
	M[16].mat[4] = M[6].mat[1];
	M[16].mat[5] = M[6].mat[2];

	/* CalculateJ\uTr1refref[1:3] = CalculateJ\omega1; */
	M[17].mat[0] = M[9].mat[0];
	M[17].mat[1] = M[9].mat[1];
	M[17].mat[2] = M[9].mat[2];

	/* CalculateJ\uTr1refref[4:6] = skew (CalculateJ\Linkdim[1:3,1]) * CalculateJ\omega1; */
	M[267].mat[0] = M[3].mat[0];
	M[267].mat[1] = M[3].mat[6];
	M[267].mat[2] = M[3].mat[12];
	XXMatrixSkew (&M[266], &M[267]);
	XXMatrixMul (&M[265], &M[266], &M[9]);
	M[17].mat[3] = M[265].mat[0];
	M[17].mat[4] = M[265].mat[1];
	M[17].mat[5] = M[265].mat[2];

	/* CalculateJ\uTr211[1:3] = CalculateJ\omega2; */
	M[18].mat[0] = M[10].mat[0];
	M[18].mat[1] = M[10].mat[1];
	M[18].mat[2] = M[10].mat[2];

	/* CalculateJ\uTr211[4:6] = skew (CalculateJ\Linkdim[1:3,2]) * CalculateJ\omega2; */
	M[270].mat[0] = M[3].mat[1];
	M[270].mat[1] = M[3].mat[7];
	M[270].mat[2] = M[3].mat[13];
	XXMatrixSkew (&M[269], &M[270]);
	XXMatrixMul (&M[268], &M[269], &M[10]);
	M[18].mat[3] = M[268].mat[0];
	M[18].mat[4] = M[268].mat[1];
	M[18].mat[5] = M[268].mat[2];

	/* CalculateJ\uTr322[1:3] = CalculateJ\omega3; */
	M[19].mat[0] = M[11].mat[0];
	M[19].mat[1] = M[11].mat[1];
	M[19].mat[2] = M[11].mat[2];

	/* CalculateJ\uTr322[4:6] = skew (CalculateJ\Linkdim[1:3,3]) * CalculateJ\omega3; */
	M[273].mat[0] = M[3].mat[2];
	M[273].mat[1] = M[3].mat[8];
	M[273].mat[2] = M[3].mat[14];
	XXMatrixSkew (&M[272], &M[273]);
	XXMatrixMul (&M[271], &M[272], &M[11]);
	M[19].mat[3] = M[271].mat[0];
	M[19].mat[4] = M[271].mat[1];
	M[19].mat[5] = M[271].mat[2];

	/* CalculateJ\uTr433[1:3] = CalculateJ\omega4; */
	M[20].mat[0] = M[12].mat[0];
	M[20].mat[1] = M[12].mat[1];
	M[20].mat[2] = M[12].mat[2];

	/* CalculateJ\uTr433[4:6] = skew (CalculateJ\Linkdim[1:3,4]) * CalculateJ\omega4; */
	M[276].mat[0] = M[3].mat[3];
	M[276].mat[1] = M[3].mat[9];
	M[276].mat[2] = M[3].mat[15];
	XXMatrixSkew (&M[275], &M[276]);
	XXMatrixMul (&M[274], &M[275], &M[12]);
	M[20].mat[3] = M[274].mat[0];
	M[20].mat[4] = M[274].mat[1];
	M[20].mat[5] = M[274].mat[2];

	/* CalculateJ\uTr544[1:3] = CalculateJ\omega5; */
	M[21].mat[0] = M[13].mat[0];
	M[21].mat[1] = M[13].mat[1];
	M[21].mat[2] = M[13].mat[2];

	/* CalculateJ\uTr544[4:6] = skew (CalculateJ\Linkdim[1:3,5]) * CalculateJ\omega5; */
	M[279].mat[0] = M[3].mat[4];
	M[279].mat[1] = M[3].mat[10];
	M[279].mat[2] = M[3].mat[16];
	XXMatrixSkew (&M[278], &M[279]);
	XXMatrixMul (&M[277], &M[278], &M[13]);
	M[21].mat[3] = M[277].mat[0];
	M[21].mat[4] = M[277].mat[1];
	M[21].mat[5] = M[277].mat[2];

	/* CartesianSpaceStiffness\Wt[1:3] = 0; */
	M[53].mat[0] = 0.0;
	M[53].mat[1] = 0.0;
	M[53].mat[2] = 0.0;

	/* CartesianSpaceStiffness\Wr[4:6] = 0; */
	M[52].mat[3] = 0.0;
	M[52].mat[4] = 0.0;
	M[52].mat[5] = 0.0;

	/* filter\BWrad = (filter\BW * 2) * 3.1415926536; */
	V[501] = (P[45] * 2.0) * 3.1415926536;

	/* GravityCompensation1\Base\AdHik1\d = GravityCompensation1\Base\AdHik1\COMdim; */
	XXMatrixMov (&M[75], &M[74]);

	/* GravityCompensation1\Base\AdHik1\R = eye (3); */
	XXMatrixEye (&M[76]);

	/* GravityCompensation1\Base\AdHik1\H = homogeneous (GravityCompensation1\Base\AdHik1\R, GravityCompensation1\Base\AdHik1\d); */
	XXMatrixHomogeneous (&M[77], &M[76], &M[75]);

	/* GravityCompensation1\Base\AdHik1\AdH = Adjoint (GravityCompensation1\Base\AdHik1\H); */
	XXMatrixAdjoint (&M[78], &M[77]);

	/* GravityCompensation1\Base\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Base\Gravity\m]; */
	M[79].mat[0] = 0.0;
	M[79].mat[1] = 0.0;
	M[79].mat[2] = 0.0;
	M[79].mat[3] = 0.0;
	M[79].mat[4] = 0.0;
	M[79].mat[5] = -9.8 * P[49];

	/* GravityCompensation1\Base\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Base\Hij\dim); */
	XXMatrixEye (&M[280]);
	XXMatrixHomogeneous (&M[81], &M[280], &M[82]);

	/* GravityCompensation1\Hfloor0\output = eye (4); */
	XXMatrixEye (&M[86]);

	/* GravityCompensation1\Joint12\Integrate\p = [0; 0; 0]; */
	M[91].mat[0] = 0.0;
	M[91].mat[1] = 0.0;
	M[91].mat[2] = 0.0;

	/* GravityCompensation1\Joint23\Integrate\p = [0; 0; 0]; */
	M[99].mat[0] = 0.0;
	M[99].mat[1] = 0.0;
	M[99].mat[2] = 0.0;

	/* GravityCompensation1\Joint34\Integrate\p = [0; 0; 0]; */
	M[107].mat[0] = 0.0;
	M[107].mat[1] = 0.0;
	M[107].mat[2] = 0.0;

	/* GravityCompensation1\Joint45\Integrate\p = [0; 0; 0]; */
	M[115].mat[0] = 0.0;
	M[115].mat[1] = 0.0;
	M[115].mat[2] = 0.0;

	/* GravityCompensation1\JointBase1\Integrate\p = [0; 0; 0]; */
	M[123].mat[0] = 0.0;
	M[123].mat[1] = 0.0;
	M[123].mat[2] = 0.0;

	/* GravityCompensation1\Link1\AdHik1\d = GravityCompensation1\Link1\AdHik1\COMdim; */
	XXMatrixMov (&M[135], &M[134]);

	/* GravityCompensation1\Link1\AdHik1\R = eye (3); */
	XXMatrixEye (&M[136]);

	/* GravityCompensation1\Link1\AdHik1\H = homogeneous (GravityCompensation1\Link1\AdHik1\R, GravityCompensation1\Link1\AdHik1\d); */
	XXMatrixHomogeneous (&M[137], &M[136], &M[135]);

	/* GravityCompensation1\Link1\AdHik1\AdH = Adjoint (GravityCompensation1\Link1\AdHik1\H); */
	XXMatrixAdjoint (&M[138], &M[137]);

	/* GravityCompensation1\Link1\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Link1\Gravity\m]; */
	M[139].mat[0] = 0.0;
	M[139].mat[1] = 0.0;
	M[139].mat[2] = 0.0;
	M[139].mat[3] = 0.0;
	M[139].mat[4] = 0.0;
	M[139].mat[5] = -9.8 * P[73];

	/* GravityCompensation1\Link1\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Link1\Hij\dim); */
	XXMatrixEye (&M[281]);
	XXMatrixHomogeneous (&M[141], &M[281], &M[142]);

	/* GravityCompensation1\Link2\AdHik1\d = GravityCompensation1\Link2\AdHik1\COMdim; */
	XXMatrixMov (&M[154], &M[153]);

	/* GravityCompensation1\Link2\AdHik1\R = eye (3); */
	XXMatrixEye (&M[155]);

	/* GravityCompensation1\Link2\AdHik1\H = homogeneous (GravityCompensation1\Link2\AdHik1\R, GravityCompensation1\Link2\AdHik1\d); */
	XXMatrixHomogeneous (&M[156], &M[155], &M[154]);

	/* GravityCompensation1\Link2\AdHik1\AdH = Adjoint (GravityCompensation1\Link2\AdHik1\H); */
	XXMatrixAdjoint (&M[157], &M[156]);

	/* GravityCompensation1\Link2\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Link2\Gravity\m]; */
	M[158].mat[0] = 0.0;
	M[158].mat[1] = 0.0;
	M[158].mat[2] = 0.0;
	M[158].mat[3] = 0.0;
	M[158].mat[4] = 0.0;
	M[158].mat[5] = -9.8 * P[87];

	/* GravityCompensation1\Link2\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Link2\Hij\dim); */
	XXMatrixEye (&M[282]);
	XXMatrixHomogeneous (&M[160], &M[282], &M[161]);

	/* GravityCompensation1\Link3\AdHik1\d = GravityCompensation1\Link3\AdHik1\COMdim; */
	XXMatrixMov (&M[173], &M[172]);

	/* GravityCompensation1\Link3\AdHik1\R = eye (3); */
	XXMatrixEye (&M[174]);

	/* GravityCompensation1\Link3\AdHik1\H = homogeneous (GravityCompensation1\Link3\AdHik1\R, GravityCompensation1\Link3\AdHik1\d); */
	XXMatrixHomogeneous (&M[175], &M[174], &M[173]);

	/* GravityCompensation1\Link3\AdHik1\AdH = Adjoint (GravityCompensation1\Link3\AdHik1\H); */
	XXMatrixAdjoint (&M[176], &M[175]);

	/* GravityCompensation1\Link3\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Link3\Gravity\m]; */
	M[177].mat[0] = 0.0;
	M[177].mat[1] = 0.0;
	M[177].mat[2] = 0.0;
	M[177].mat[3] = 0.0;
	M[177].mat[4] = 0.0;
	M[177].mat[5] = -9.8 * P[101];

	/* GravityCompensation1\Link3\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Link3\Hij\dim); */
	XXMatrixEye (&M[283]);
	XXMatrixHomogeneous (&M[179], &M[283], &M[180]);

	/* GravityCompensation1\Link4\AdHik1\d = GravityCompensation1\Link4\AdHik1\COMdim; */
	XXMatrixMov (&M[192], &M[191]);

	/* GravityCompensation1\Link4\AdHik1\R = eye (3); */
	XXMatrixEye (&M[193]);

	/* GravityCompensation1\Link4\AdHik1\H = homogeneous (GravityCompensation1\Link4\AdHik1\R, GravityCompensation1\Link4\AdHik1\d); */
	XXMatrixHomogeneous (&M[194], &M[193], &M[192]);

	/* GravityCompensation1\Link4\AdHik1\AdH = Adjoint (GravityCompensation1\Link4\AdHik1\H); */
	XXMatrixAdjoint (&M[195], &M[194]);

	/* GravityCompensation1\Link4\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Link4\Gravity\m]; */
	M[196].mat[0] = 0.0;
	M[196].mat[1] = 0.0;
	M[196].mat[2] = 0.0;
	M[196].mat[3] = 0.0;
	M[196].mat[4] = 0.0;
	M[196].mat[5] = -9.8 * P[115];

	/* GravityCompensation1\Link4\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Link4\Hij\dim); */
	XXMatrixEye (&M[284]);
	XXMatrixHomogeneous (&M[198], &M[284], &M[199]);

	/* GravityCompensation1\Link5\AdHik1\d = GravityCompensation1\Link5\AdHik1\COMdim; */
	XXMatrixMov (&M[211], &M[210]);

	/* GravityCompensation1\Link5\AdHik1\R = eye (3); */
	XXMatrixEye (&M[212]);

	/* GravityCompensation1\Link5\AdHik1\H = homogeneous (GravityCompensation1\Link5\AdHik1\R, GravityCompensation1\Link5\AdHik1\d); */
	XXMatrixHomogeneous (&M[213], &M[212], &M[211]);

	/* GravityCompensation1\Link5\AdHik1\AdH = Adjoint (GravityCompensation1\Link5\AdHik1\H); */
	XXMatrixAdjoint (&M[214], &M[213]);

	/* GravityCompensation1\Link5\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensation1\Link5\Gravity\m]; */
	M[215].mat[0] = 0.0;
	M[215].mat[1] = 0.0;
	M[215].mat[2] = 0.0;
	M[215].mat[3] = 0.0;
	M[215].mat[4] = 0.0;
	M[215].mat[5] = -9.8 * P[129];

	/* GravityCompensation1\Link5\Hij\Hab = homogeneous (eye (3), GravityCompensation1\Link5\Hij\dim); */
	XXMatrixEye (&M[285]);
	XXMatrixHomogeneous (&M[217], &M[285], &M[218]);

	/* GravityCompensation1\Mux\port.e[1] = 0; */
	M[222].mat[0] = 0.0;

	/* GravityCompensation1\Mux\port.e[2] = 0; */
	M[222].mat[1] = 0.0;

	/* GravityCompensation1\Mux\port.e[3] = 0; */
	M[222].mat[2] = 0.0;

	/* GravityCompensation1\Wtip0\p.e = GravityCompensation1\Wtip0\effort; */
	XXMatrixScalarMov (&M[223], P[141]);

	/* GravityCompensation1\ZeroJunction\p1.f = 0; */
	XXMatrixScalarMov (&M[224], 0.0);

	/* JointSpaceDamping\R = diag (JointSpaceDamping\r); */
	XXMatrixDiag (&M[240], &M[237]);

	/* GravityCompensation1\Link5\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Link5\Hij\Hab)) * GravityCompensation1\Wtip0\p.e; */
	XXMatrixAdjoint (&M[287], &M[217]);
	XXMatrixTranspose (&M[286], &M[287]);
	XXMatrixMul (&M[206], &M[286], &M[223]);

	/* GravityCompensation1\Base\AdHij\p2.f = Adjoint (GravityCompensation1\Base\Hij\Hab) * GravityCompensation1\ZeroJunction\p1.f; */
	XXMatrixAdjoint (&M[288], &M[81]);
	XXMatrixMul (&M[71], &M[288], &M[224]);

	/* GravityCompensation1\Base\AdHik1\p2.f = (1.0 / GravityCompensation1\Base\AdHik1\AdH) * GravityCompensation1\ZeroJunction\p1.f; */
	XXScalarMatrixDiv (&M[289], 1.0, &M[78], workarray);
	XXMatrixMul (&M[73], &M[289], &M[224]);

	/* GravityCompensation1\Base\Hij\output = GravityCompensation1\Hfloor0\output * GravityCompensation1\Base\Hij\Hab; */
	XXMatrixMul (&M[80], &M[86], &M[81]);

	}

	/* This function calculates the input equations of the model.
	 * These equations are dynamic equations that must not change
	 * in calls from the integration method (like random and delay).
	 */
	void interaction_control::CalculateInput (void)
	{
		
	}

	/* This function calculates the dynamic equations of the model.
	 * These equations are called from the integration method
	 * to calculate the new model rates (that are then integrated).
	 */
	void interaction_control::CalculateDynamic (void)
	{
			/* additional code for filter\s1y; */
	R[6] = s[0];
	R[7] = s[1];
	R[8] = s[2];
	R[9] = s[3];
	R[10] = s[4];
	R[11] = s[5];

	/* DemuxHW1\arm.f = bond_to_arm.omega; */
	XXMatrixMov (&M[61], &M[253]);

	/* DemuxHW1\base.f = bond_to_base.v; */
	XXMatrixMov (&M[58], &M[255]);

	/* MuxToControl1\arm = measured_angles_arm; */
	XXMatrixMov (&M[247], &M[256]);

	/* filter\u = xyzypr; */
	XXMatrixMov (&M[62], &M[257]);

	/* MuxToControl1\base = odometry_base; */
	XXMatrixMov (&M[248], &M[258]);

	/* DemuxHW1\control.f[1:3] = DemuxHW1\base.f; */
	M[59].mat[0] = M[58].mat[0];
	M[59].mat[1] = M[58].mat[1];
	M[59].mat[2] = M[58].mat[2];

	/* DemuxHW1\control.f[4:8] = DemuxHW1\arm.f; */
	M[59].mat[3] = M[61].mat[0];
	M[59].mat[4] = M[61].mat[1];
	M[59].mat[5] = M[61].mat[2];
	M[59].mat[6] = M[61].mat[3];
	M[59].mat[7] = M[61].mat[4];

	/* filter\s2y = filter\BWrad ^ 2 * (filter\u - filter\y) - (1.4142 * filter\BWrad) * filter\s1y; */
	XXMatrixSub (&M[291], &M[62], &M[262]);
	XXScalarMatrixMul (&M[290], (V[501] * V[501]), &M[291]);
	XXScalarMatrixMul (&M[292], 1.4142 * V[501], &M[261]);
	XXMatrixSub (&M[259], &M[290], &M[292]);

	/* Gain\Rz = [cos (filter\y[4]), -sin (filter\y[4]), 0; sin (filter\y[4]), cos (filter\y[4]), 0; 0, 0, 1]; */
	M[64].mat[0] = cos (M[262].mat[3]);
	M[64].mat[1] = -(sin (M[262].mat[3]));
	M[64].mat[2] = 0.0;
	M[64].mat[3] = sin (M[262].mat[3]);
	M[64].mat[4] = cos (M[262].mat[3]);
	M[64].mat[5] = 0.0;
	M[64].mat[6] = 0.0;
	M[64].mat[7] = 0.0;
	M[64].mat[8] = 1.0;

	/* Gain\Ry = [cos (filter\y[5]), 0, sin (filter\y[5]); 0, 1, 0; -sin (filter\y[5]), 0, cos (filter\y[5])]; */
	M[65].mat[0] = cos (M[262].mat[4]);
	M[65].mat[1] = 0.0;
	M[65].mat[2] = sin (M[262].mat[4]);
	M[65].mat[3] = 0.0;
	M[65].mat[4] = 1.0;
	M[65].mat[5] = 0.0;
	M[65].mat[6] = -(sin (M[262].mat[4]));
	M[65].mat[7] = 0.0;
	M[65].mat[8] = cos (M[262].mat[4]);

	/* Gain\Rx = [1, 0, 0; 0, cos (filter\y[6]), -sin (filter\y[6]); 0, sin (filter\y[6]), cos (filter\y[6])]; */
	M[66].mat[0] = 1.0;
	M[66].mat[1] = 0.0;
	M[66].mat[2] = 0.0;
	M[66].mat[3] = 0.0;
	M[66].mat[4] = cos (M[262].mat[5]);
	M[66].mat[5] = -(sin (M[262].mat[5]));
	M[66].mat[6] = 0.0;
	M[66].mat[7] = sin (M[262].mat[5]);
	M[66].mat[8] = cos (M[262].mat[5]);

	/* Gain\H = homogeneous ((Gain\Rz * Gain\Ry) * Gain\Rx, filter\y[1:3]); */
	XXMatrixMul (&M[294], &M[64], &M[65]);
	XXMatrixMul (&M[293], &M[294], &M[66]);
	M[295].mat[0] = M[262].mat[0];
	M[295].mat[1] = M[262].mat[1];
	M[295].mat[2] = M[262].mat[2];
	XXMatrixHomogeneous (&M[63], &M[293], &M[295]);

	/* MuxToControl1\control[4:8] = MuxToControl1\arm - (MuxToControl1\zero_angles * pi) / 180; */
	XXMatrixScalarMul (&M[298], &M[249], C[24]);
	XXMatrixScalarDiv (&M[297], &M[298], 180.0);
	XXMatrixSub (&M[296], &M[247], &M[297]);
	M[246].mat[3] = M[296].mat[0];
	M[246].mat[4] = M[296].mat[1];
	M[246].mat[5] = M[296].mat[2];
	M[246].mat[6] = M[296].mat[3];
	M[246].mat[7] = M[296].mat[4];

	/* MuxToControl1\control[1:3] = MuxToControl1\base; */
	M[246].mat[0] = M[248].mat[0];
	M[246].mat[1] = M[248].mat[1];
	M[246].mat[2] = M[248].mat[2];

	/* CalculateJ\Rz = [cos (MuxToControl1\control[1]), -sin (MuxToControl1\control[1]), 0; sin (MuxToControl1\control[1]), cos (MuxToControl1\control[1]), 0; 0, 0, 1]; */
	M[48].mat[0] = cos (M[246].mat[0]);
	M[48].mat[1] = -(sin (M[246].mat[0]));
	M[48].mat[2] = 0.0;
	M[48].mat[3] = sin (M[246].mat[0]);
	M[48].mat[4] = cos (M[246].mat[0]);
	M[48].mat[5] = 0.0;
	M[48].mat[6] = 0.0;
	M[48].mat[7] = 0.0;
	M[48].mat[8] = 1.0;

	/* CalculateJ\Href0 = homogeneous (CalculateJ\Rz, [MuxToControl1\control[2]; MuxToControl1\control[3]; 0]) * CalculateJ\base_offset_H; */
	M[300].mat[0] = M[246].mat[1];
	M[300].mat[1] = M[246].mat[2];
	M[300].mat[2] = 0.0;
	XXMatrixHomogeneous (&M[299], &M[48], &M[300]);
	XXMatrixMul (&M[34], &M[299], &M[46]);

	/* CalculateJ\R1ref = [cos (-MuxToControl1\control[4]), -sin (-MuxToControl1\control[4]), 0; sin (-MuxToControl1\control[4]), cos (-MuxToControl1\control[4]), 0; 0, 0, 1]; */
	M[22].mat[0] = cos (-M[246].mat[3]);
	M[22].mat[1] = -(sin (-M[246].mat[3]));
	M[22].mat[2] = 0.0;
	M[22].mat[3] = sin (-M[246].mat[3]);
	M[22].mat[4] = cos (-M[246].mat[3]);
	M[22].mat[5] = 0.0;
	M[22].mat[6] = 0.0;
	M[22].mat[7] = 0.0;
	M[22].mat[8] = 1.0;

	/* CalculateJ\H1ref = homogeneous (CalculateJ\R1ref, CalculateJ\p1ref); */
	XXMatrixHomogeneous (&M[35], &M[22], &M[28]);

	/* CalculateJ\R21 = [cos (MuxToControl1\control[5]), 0, sin (MuxToControl1\control[5]); 0, 1, 0; -sin (MuxToControl1\control[5]), 0, cos (MuxToControl1\control[5])]; */
	M[23].mat[0] = cos (M[246].mat[4]);
	M[23].mat[1] = 0.0;
	M[23].mat[2] = sin (M[246].mat[4]);
	M[23].mat[3] = 0.0;
	M[23].mat[4] = 1.0;
	M[23].mat[5] = 0.0;
	M[23].mat[6] = -(sin (M[246].mat[4]));
	M[23].mat[7] = 0.0;
	M[23].mat[8] = cos (M[246].mat[4]);

	/* CalculateJ\H21 = homogeneous (CalculateJ\R21, CalculateJ\p21); */
	XXMatrixHomogeneous (&M[36], &M[23], &M[29]);

	/* CalculateJ\R32 = [cos (MuxToControl1\control[6]), 0, sin (MuxToControl1\control[6]); 0, 1, 0; -sin (MuxToControl1\control[6]), 0, cos (MuxToControl1\control[6])]; */
	M[24].mat[0] = cos (M[246].mat[5]);
	M[24].mat[1] = 0.0;
	M[24].mat[2] = sin (M[246].mat[5]);
	M[24].mat[3] = 0.0;
	M[24].mat[4] = 1.0;
	M[24].mat[5] = 0.0;
	M[24].mat[6] = -(sin (M[246].mat[5]));
	M[24].mat[7] = 0.0;
	M[24].mat[8] = cos (M[246].mat[5]);

	/* CalculateJ\H32 = homogeneous (CalculateJ\R32, CalculateJ\p32); */
	XXMatrixHomogeneous (&M[37], &M[24], &M[30]);

	/* CalculateJ\R43 = [cos (MuxToControl1\control[7]), 0, sin (MuxToControl1\control[7]); 0, 1, 0; -sin (MuxToControl1\control[7]), 0, cos (MuxToControl1\control[7])]; */
	M[25].mat[0] = cos (M[246].mat[6]);
	M[25].mat[1] = 0.0;
	M[25].mat[2] = sin (M[246].mat[6]);
	M[25].mat[3] = 0.0;
	M[25].mat[4] = 1.0;
	M[25].mat[5] = 0.0;
	M[25].mat[6] = -(sin (M[246].mat[6]));
	M[25].mat[7] = 0.0;
	M[25].mat[8] = cos (M[246].mat[6]);

	/* CalculateJ\H43 = homogeneous (CalculateJ\R43, CalculateJ\p43); */
	XXMatrixHomogeneous (&M[38], &M[25], &M[31]);

	/* CalculateJ\R54 = [cos (-MuxToControl1\control[8]), -sin (-MuxToControl1\control[8]), 0; sin (-MuxToControl1\control[8]), cos (-MuxToControl1\control[8]), 0; 0, 0, 1]; */
	M[26].mat[0] = cos (-M[246].mat[7]);
	M[26].mat[1] = -(sin (-M[246].mat[7]));
	M[26].mat[2] = 0.0;
	M[26].mat[3] = sin (-M[246].mat[7]);
	M[26].mat[4] = cos (-M[246].mat[7]);
	M[26].mat[5] = 0.0;
	M[26].mat[6] = 0.0;
	M[26].mat[7] = 0.0;
	M[26].mat[8] = 1.0;

	/* CalculateJ\H54 = homogeneous (CalculateJ\R54, CalculateJ\p54); */
	XXMatrixHomogeneous (&M[39], &M[26], &M[32]);

	/* CalculateJ\H10 = CalculateJ\Href0 * CalculateJ\H1ref; */
	XXMatrixMul (&M[41], &M[34], &M[35]);

	/* CalculateJ\H20 = CalculateJ\H10 * CalculateJ\H21; */
	XXMatrixMul (&M[42], &M[41], &M[36]);

	/* CalculateJ\H30 = CalculateJ\H20 * CalculateJ\H32; */
	XXMatrixMul (&M[43], &M[42], &M[37]);

	/* CalculateJ\H40 = CalculateJ\H30 * CalculateJ\H43; */
	XXMatrixMul (&M[44], &M[43], &M[38]);

	/* CalculateJ\H50 = CalculateJ\H40 * CalculateJ\H54; */
	XXMatrixMul (&M[45], &M[44], &M[39]);

	/* CalculateJ\Htip0 = CalculateJ\H50 * CalculateJ\Htip5; */
	XXMatrixMul (&M[1], &M[45], &M[40]);

	/* CalculateJ\controllableJ[1:6,1] = Adjoint (CalculateJ\Href0) * CalculateJ\uTrzrefref; */
	XXMatrixAdjoint (&M[302], &M[34]);
	XXMatrixMul (&M[301], &M[302], &M[14]);
	M[0].mat[0] = M[301].mat[0];
	M[0].mat[8] = M[301].mat[1];
	M[0].mat[16] = M[301].mat[2];
	M[0].mat[24] = M[301].mat[3];
	M[0].mat[32] = M[301].mat[4];
	M[0].mat[40] = M[301].mat[5];

	/* CalculateJ\controllableJ[1:6,2] = Adjoint (CalculateJ\Href0) * CalculateJ\uTryrefref; */
	XXMatrixAdjoint (&M[304], &M[34]);
	XXMatrixMul (&M[303], &M[304], &M[15]);
	M[0].mat[1] = M[303].mat[0];
	M[0].mat[9] = M[303].mat[1];
	M[0].mat[17] = M[303].mat[2];
	M[0].mat[25] = M[303].mat[3];
	M[0].mat[33] = M[303].mat[4];
	M[0].mat[41] = M[303].mat[5];

	/* CalculateJ\controllableJ[1:6,3] = Adjoint (CalculateJ\Href0) * CalculateJ\uTrxrefref; */
	XXMatrixAdjoint (&M[306], &M[34]);
	XXMatrixMul (&M[305], &M[306], &M[16]);
	M[0].mat[2] = M[305].mat[0];
	M[0].mat[10] = M[305].mat[1];
	M[0].mat[18] = M[305].mat[2];
	M[0].mat[26] = M[305].mat[3];
	M[0].mat[34] = M[305].mat[4];
	M[0].mat[42] = M[305].mat[5];

	/* CalculateJ\controllableJ[1:6,4] = Adjoint (CalculateJ\Href0) * CalculateJ\uTr1refref; */
	XXMatrixAdjoint (&M[308], &M[34]);
	XXMatrixMul (&M[307], &M[308], &M[17]);
	M[0].mat[3] = M[307].mat[0];
	M[0].mat[11] = M[307].mat[1];
	M[0].mat[19] = M[307].mat[2];
	M[0].mat[27] = M[307].mat[3];
	M[0].mat[35] = M[307].mat[4];
	M[0].mat[43] = M[307].mat[5];

	/* CalculateJ\controllableJ[1:6,5] = Adjoint (CalculateJ\H10) * CalculateJ\uTr211; */
	XXMatrixAdjoint (&M[310], &M[41]);
	XXMatrixMul (&M[309], &M[310], &M[18]);
	M[0].mat[4] = M[309].mat[0];
	M[0].mat[12] = M[309].mat[1];
	M[0].mat[20] = M[309].mat[2];
	M[0].mat[28] = M[309].mat[3];
	M[0].mat[36] = M[309].mat[4];
	M[0].mat[44] = M[309].mat[5];

	/* CalculateJ\controllableJ[1:6,6] = Adjoint (CalculateJ\H20) * CalculateJ\uTr322; */
	XXMatrixAdjoint (&M[312], &M[42]);
	XXMatrixMul (&M[311], &M[312], &M[19]);
	M[0].mat[5] = M[311].mat[0];
	M[0].mat[13] = M[311].mat[1];
	M[0].mat[21] = M[311].mat[2];
	M[0].mat[29] = M[311].mat[3];
	M[0].mat[37] = M[311].mat[4];
	M[0].mat[45] = M[311].mat[5];

	/* CalculateJ\controllableJ[1:6,7] = Adjoint (CalculateJ\H30) * CalculateJ\uTr433; */
	XXMatrixAdjoint (&M[314], &M[43]);
	XXMatrixMul (&M[313], &M[314], &M[20]);
	M[0].mat[6] = M[313].mat[0];
	M[0].mat[14] = M[313].mat[1];
	M[0].mat[22] = M[313].mat[2];
	M[0].mat[30] = M[313].mat[3];
	M[0].mat[38] = M[313].mat[4];
	M[0].mat[46] = M[313].mat[5];

	/* CalculateJ\controllableJ[1:6,8] = Adjoint (CalculateJ\H40) * CalculateJ\uTr544; */
	XXMatrixAdjoint (&M[316], &M[44]);
	XXMatrixMul (&M[315], &M[316], &M[21]);
	M[0].mat[7] = M[315].mat[0];
	M[0].mat[15] = M[315].mat[1];
	M[0].mat[23] = M[315].mat[2];
	M[0].mat[31] = M[315].mat[3];
	M[0].mat[39] = M[315].mat[4];
	M[0].mat[47] = M[315].mat[5];

		/* JointSoftLimits\angle_limits_low = JointSoftLimits\working_range * JointSoftLimits\limits_low; */
		XXScalarMatrixMul (&M[234], P[213], &M[231]);

		/* JointSoftLimits\angle_limits_high = JointSoftLimits\working_range * JointSoftLimits\limits_high; */
		XXScalarMatrixMul (&M[235], P[213], &M[232]);

		/* JointSoftLimits\substate[1] = (if MuxToControl1\control[1] - JointSoftLimits\angle_limits_high[1] < 0 then 0 else if MuxToControl1\control[1] - JointSoftLimits\angle_limits_high[1] > 10 then 10 else MuxToControl1\control[1] - JointSoftLimits\angle_limits_high[1] end end) + (if MuxToControl1\control[1] - JointSoftLimits\angle_limits_low[1] < -10 then -10 else if MuxToControl1\control[1] - JointSoftLimits\angle_limits_low[1] > 0 then 0 else MuxToControl1\control[1] - JointSoftLimits\angle_limits_low[1] end end); */
		M[233].mat[0] = ((M[246].mat[0] - M[235].mat[0] < 0.0) ? 0.0 : ((M[246].mat[0] - M[235].mat[0] > 10.0) ? 10.0 : (M[246].mat[0] - M[235].mat[0]))) + ((M[246].mat[0] - M[234].mat[0] < -10.0) ? -10.0 : ((M[246].mat[0] - M[234].mat[0] > 0.0) ? 0.0 : (M[246].mat[0] - M[234].mat[0])));

		/* JointSoftLimits\substate[2] = (if MuxToControl1\control[2] - JointSoftLimits\angle_limits_high[2] < 0 then 0 else if MuxToControl1\control[2] - JointSoftLimits\angle_limits_high[2] > 10 then 10 else MuxToControl1\control[2] - JointSoftLimits\angle_limits_high[2] end end) + (if MuxToControl1\control[2] - JointSoftLimits\angle_limits_low[2] < -10 then -10 else if MuxToControl1\control[2] - JointSoftLimits\angle_limits_low[2] > 0 then 0 else MuxToControl1\control[2] - JointSoftLimits\angle_limits_low[2] end end); */
		M[233].mat[1] = ((M[246].mat[1] - M[235].mat[1] < 0.0) ? 0.0 : ((M[246].mat[1] - M[235].mat[1] > 10.0) ? 10.0 : (M[246].mat[1] - M[235].mat[1]))) + ((M[246].mat[1] - M[234].mat[1] < -10.0) ? -10.0 : ((M[246].mat[1] - M[234].mat[1] > 0.0) ? 0.0 : (M[246].mat[1] - M[234].mat[1])));

		/* JointSoftLimits\substate[3] = (if MuxToControl1\control[3] - JointSoftLimits\angle_limits_high[3] < 0 then 0 else if MuxToControl1\control[3] - JointSoftLimits\angle_limits_high[3] > 10 then 10 else MuxToControl1\control[3] - JointSoftLimits\angle_limits_high[3] end end) + (if MuxToControl1\control[3] - JointSoftLimits\angle_limits_low[3] < -10 then -10 else if MuxToControl1\control[3] - JointSoftLimits\angle_limits_low[3] > 0 then 0 else MuxToControl1\control[3] - JointSoftLimits\angle_limits_low[3] end end); */
		M[233].mat[2] = ((M[246].mat[2] - M[235].mat[2] < 0.0) ? 0.0 : ((M[246].mat[2] - M[235].mat[2] > 10.0) ? 10.0 : (M[246].mat[2] - M[235].mat[2]))) + ((M[246].mat[2] - M[234].mat[2] < -10.0) ? -10.0 : ((M[246].mat[2] - M[234].mat[2] > 0.0) ? 0.0 : (M[246].mat[2] - M[234].mat[2])));

		/* JointSoftLimits\substate[4] = (if MuxToControl1\control[4] - JointSoftLimits\angle_limits_high[4] < 0 then 0 else if MuxToControl1\control[4] - JointSoftLimits\angle_limits_high[4] > 10 then 10 else MuxToControl1\control[4] - JointSoftLimits\angle_limits_high[4] end end) + (if MuxToControl1\control[4] - JointSoftLimits\angle_limits_low[4] < -10 then -10 else if MuxToControl1\control[4] - JointSoftLimits\angle_limits_low[4] > 0 then 0 else MuxToControl1\control[4] - JointSoftLimits\angle_limits_low[4] end end); */
		M[233].mat[3] = ((M[246].mat[3] - M[235].mat[3] < 0.0) ? 0.0 : ((M[246].mat[3] - M[235].mat[3] > 10.0) ? 10.0 : (M[246].mat[3] - M[235].mat[3]))) + ((M[246].mat[3] - M[234].mat[3] < -10.0) ? -10.0 : ((M[246].mat[3] - M[234].mat[3] > 0.0) ? 0.0 : (M[246].mat[3] - M[234].mat[3])));

		/* JointSoftLimits\substate[5] = (if MuxToControl1\control[5] - JointSoftLimits\angle_limits_high[5] < 0 then 0 else if MuxToControl1\control[5] - JointSoftLimits\angle_limits_high[5] > 10 then 10 else MuxToControl1\control[5] - JointSoftLimits\angle_limits_high[5] end end) + (if MuxToControl1\control[5] - JointSoftLimits\angle_limits_low[5] < -10 then -10 else if MuxToControl1\control[5] - JointSoftLimits\angle_limits_low[5] > 0 then 0 else MuxToControl1\control[5] - JointSoftLimits\angle_limits_low[5] end end); */
		M[233].mat[4] = ((M[246].mat[4] - M[235].mat[4] < 0.0) ? 0.0 : ((M[246].mat[4] - M[235].mat[4] > 10.0) ? 10.0 : (M[246].mat[4] - M[235].mat[4]))) + ((M[246].mat[4] - M[234].mat[4] < -10.0) ? -10.0 : ((M[246].mat[4] - M[234].mat[4] > 0.0) ? 0.0 : (M[246].mat[4] - M[234].mat[4])));

		/* JointSoftLimits\substate[6] = (if MuxToControl1\control[6] - JointSoftLimits\angle_limits_high[6] < 0 then 0 else if MuxToControl1\control[6] - JointSoftLimits\angle_limits_high[6] > 10 then 10 else MuxToControl1\control[6] - JointSoftLimits\angle_limits_high[6] end end) + (if MuxToControl1\control[6] - JointSoftLimits\angle_limits_low[6] < -10 then -10 else if MuxToControl1\control[6] - JointSoftLimits\angle_limits_low[6] > 0 then 0 else MuxToControl1\control[6] - JointSoftLimits\angle_limits_low[6] end end); */
		M[233].mat[5] = ((M[246].mat[5] - M[235].mat[5] < 0.0) ? 0.0 : ((M[246].mat[5] - M[235].mat[5] > 10.0) ? 10.0 : (M[246].mat[5] - M[235].mat[5]))) + ((M[246].mat[5] - M[234].mat[5] < -10.0) ? -10.0 : ((M[246].mat[5] - M[234].mat[5] > 0.0) ? 0.0 : (M[246].mat[5] - M[234].mat[5])));

		/* JointSoftLimits\substate[7] = (if MuxToControl1\control[7] - JointSoftLimits\angle_limits_high[7] < 0 then 0 else if MuxToControl1\control[7] - JointSoftLimits\angle_limits_high[7] > 10 then 10 else MuxToControl1\control[7] - JointSoftLimits\angle_limits_high[7] end end) + (if MuxToControl1\control[7] - JointSoftLimits\angle_limits_low[7] < -10 then -10 else if MuxToControl1\control[7] - JointSoftLimits\angle_limits_low[7] > 0 then 0 else MuxToControl1\control[7] - JointSoftLimits\angle_limits_low[7] end end); */
		M[233].mat[6] = ((M[246].mat[6] - M[235].mat[6] < 0.0) ? 0.0 : ((M[246].mat[6] - M[235].mat[6] > 10.0) ? 10.0 : (M[246].mat[6] - M[235].mat[6]))) + ((M[246].mat[6] - M[234].mat[6] < -10.0) ? -10.0 : ((M[246].mat[6] - M[234].mat[6] > 0.0) ? 0.0 : (M[246].mat[6] - M[234].mat[6])));

		/* JointSoftLimits\substate[8] = (if MuxToControl1\control[8] - JointSoftLimits\angle_limits_high[8] < 0 then 0 else if MuxToControl1\control[8] - JointSoftLimits\angle_limits_high[8] > 10 then 10 else MuxToControl1\control[8] - JointSoftLimits\angle_limits_high[8] end end) + (if MuxToControl1\control[8] - JointSoftLimits\angle_limits_low[8] < -10 then -10 else if MuxToControl1\control[8] - JointSoftLimits\angle_limits_low[8] > 0 then 0 else MuxToControl1\control[8] - JointSoftLimits\angle_limits_low[8] end end); */
		M[233].mat[7] = ((M[246].mat[7] - M[235].mat[7] < 0.0) ? 0.0 : ((M[246].mat[7] - M[235].mat[7] > 10.0) ? 10.0 : (M[246].mat[7] - M[235].mat[7]))) + ((M[246].mat[7] - M[234].mat[7] < -10.0) ? -10.0 : ((M[246].mat[7] - M[234].mat[7] > 0.0) ? 0.0 : (M[246].mat[7] - M[234].mat[7])));

		/* JointSoftLimits\p.e = diag (JointSoftLimits\c) * JointSoftLimits\substate; */
		XXMatrixDiag (&M[317], &M[230]);
		XXMatrixMul (&M[229], &M[317], &M[233]);

	/* JointSpaceStiffness\substate = diag (JointSpaceStiffness\c) * (MuxToControl1\control - JointSpaceStiffness\setpoints); */
	XXMatrixDiag (&M[318], &M[243]);
	XXMatrixSub (&M[319], &M[246], &M[244]);
	XXMatrixMul (&M[245], &M[318], &M[319]);

	/* JointSpaceStiffness\joints.e[1] = (if JointSpaceStiffness\substate[1] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[1] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[1] end end); */
	M[242].mat[0] = (M[245].mat[0] < -P[254]) ? (-P[254]) : ((M[245].mat[0] > P[254]) ? P[254] : M[245].mat[0]);

	/* JointSpaceStiffness\joints.e[2] = (if JointSpaceStiffness\substate[2] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[2] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[2] end end); */
	M[242].mat[1] = (M[245].mat[1] < -P[254]) ? (-P[254]) : ((M[245].mat[1] > P[254]) ? P[254] : M[245].mat[1]);

	/* JointSpaceStiffness\joints.e[3] = (if JointSpaceStiffness\substate[3] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[3] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[3] end end); */
	M[242].mat[2] = (M[245].mat[2] < -P[254]) ? (-P[254]) : ((M[245].mat[2] > P[254]) ? P[254] : M[245].mat[2]);

	/* JointSpaceStiffness\joints.e[4] = (if JointSpaceStiffness\substate[4] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[4] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[4] end end); */
	M[242].mat[3] = (M[245].mat[3] < -P[254]) ? (-P[254]) : ((M[245].mat[3] > P[254]) ? P[254] : M[245].mat[3]);

	/* JointSpaceStiffness\joints.e[5] = (if JointSpaceStiffness\substate[5] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[5] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[5] end end); */
	M[242].mat[4] = (M[245].mat[4] < -P[254]) ? (-P[254]) : ((M[245].mat[4] > P[254]) ? P[254] : M[245].mat[4]);

	/* JointSpaceStiffness\joints.e[6] = (if JointSpaceStiffness\substate[6] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[6] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[6] end end); */
	M[242].mat[5] = (M[245].mat[5] < -P[254]) ? (-P[254]) : ((M[245].mat[5] > P[254]) ? P[254] : M[245].mat[5]);

	/* JointSpaceStiffness\joints.e[7] = (if JointSpaceStiffness\substate[7] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[7] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[7] end end); */
	M[242].mat[6] = (M[245].mat[6] < -P[254]) ? (-P[254]) : ((M[245].mat[6] > P[254]) ? P[254] : M[245].mat[6]);

	/* JointSpaceStiffness\joints.e[8] = (if JointSpaceStiffness\substate[8] < -JointSpaceStiffness\force_lim then -JointSpaceStiffness\force_lim else if JointSpaceStiffness\substate[8] > JointSpaceStiffness\force_lim then JointSpaceStiffness\force_lim else JointSpaceStiffness\substate[8] end end); */
	M[242].mat[7] = (M[245].mat[7] < -P[254]) ? (-P[254]) : ((M[245].mat[7] > P[254]) ? P[254] : M[245].mat[7]);

	/* CartesianSpaceStiffness\state = inverse (Gain\H) * CalculateJ\Htip0; */
	XXMatrixInverse (&M[320], &M[63], workarray);
	XXMatrixMul (&M[50], &M[320], &M[1]);

	/* CartesianSpaceStiffness\temp = (trace (CartesianSpaceStiffness\state[1:3,1:3]) - 1) / 2; */
	M[322].mat[0] = M[50].mat[0];
	M[322].mat[1] = M[50].mat[1];
	M[322].mat[2] = M[50].mat[2];
	M[322].mat[3] = M[50].mat[4];
	M[322].mat[4] = M[50].mat[5];
	M[322].mat[5] = M[50].mat[6];
	M[322].mat[6] = M[50].mat[8];
	M[322].mat[7] = M[50].mat[9];
	M[322].mat[8] = M[50].mat[10];
	M[321].mat[0] = XXMatrixTrace (&M[322]);
	V[447] = (XXMatrixTrace (&M[322]) - 1.0) / 2.0;

	/* if (CartesianSpaceStiffness\temp < -1) */
	if (V[447] < -1.0)
	{
		/* CartesianSpaceStiffness\temp = -1; */
		V[447] = -1.0;
	}

	/* if (CartesianSpaceStiffness\temp > 1) */
	if (V[447] > 1.0)
	{
		/* CartesianSpaceStiffness\temp = 1; */
		V[447] = 1.0;
	}

	/* CartesianSpaceStiffness\theta = arccos (CartesianSpaceStiffness\temp); */
	V[431] = acos (V[447]);

	/* if (CartesianSpaceStiffness\theta == 0) */
	if (V[431] == 0.0)
	{
		/* CartesianSpaceStiffness\omega = 0; */
		XXMatrixScalarMov (&M[51], 0.0);
	}
	else
	{
		/* CartesianSpaceStiffness\omega = (1 / (2 * sin (CartesianSpaceStiffness\theta))) * [CartesianSpaceStiffness\state[3,2] - CartesianSpaceStiffness\state[2,3]; CartesianSpaceStiffness\state[1,3] - CartesianSpaceStiffness\state[3,1]; CartesianSpaceStiffness\state[2,1] - CartesianSpaceStiffness\state[1,2]]; */
		M[325].mat[0] = M[50].mat[9] - M[50].mat[6];
		M[325].mat[1] = M[50].mat[2] - M[50].mat[8];
		M[325].mat[2] = M[50].mat[4] - M[50].mat[1];
		XXScalarMatrixMul (&M[51], (1.0 / (2.0 * sin (V[431]))), &M[325]);
	}

	/* CartesianSpaceStiffness\Wt[4:6] = (CartesianSpaceStiffness\state[1:3,4] * CartesianSpaceStiffness\CtipTranslation); */
	M[327].mat[0] = M[50].mat[3];
	M[327].mat[1] = M[50].mat[7];
	M[327].mat[2] = M[50].mat[11];
	XXMatrixScalarMul (&M[326], &M[327], P[42]);
	M[53].mat[3] = M[326].mat[0];
	M[53].mat[4] = M[326].mat[1];
	M[53].mat[5] = M[326].mat[2];

	/* CartesianSpaceStiffness\optimizationCriteria_dot = transpose (CartesianSpaceStiffness\state[1:3,4]) * CartesianSpaceStiffness\state[1:3,4]; */
	M[329].mat[0] = M[50].mat[3];
	M[329].mat[1] = M[50].mat[7];
	M[329].mat[2] = M[50].mat[11];
	XXMatrixTranspose (&M[328], &M[329]);
	M[330].mat[0] = M[50].mat[3];
	M[330].mat[1] = M[50].mat[7];
	M[330].mat[2] = M[50].mat[11];
	XXScalarMatrixMatrixMul (&R[12], &M[328], &M[330]);

	/* CartesianSpaceStiffness\Wr[1:3] = (CartesianSpaceStiffness\theta * CartesianSpaceStiffness\omega) * (CartesianSpaceStiffness\CtipRotation); */
	XXScalarMatrixMul (&M[332], V[431], &M[51]);
	XXMatrixScalarMul (&M[331], &M[332], (P[43]));
	M[52].mat[0] = M[331].mat[0];
	M[52].mat[1] = M[331].mat[1];
	M[52].mat[2] = M[331].mat[2];

	/* CartesianSpaceStiffness\p.e = inverse (transpose (Adjoint (Gain\H))) * (CartesianSpaceStiffness\Wt + CartesianSpaceStiffness\Wr); */
	XXMatrixAdjoint (&M[335], &M[63]);
	XXMatrixTranspose (&M[334], &M[335]);
	XXMatrixInverse (&M[333], &M[334], workarray);
	XXMatrixAdd (&M[336], &M[53], &M[52]);
	XXMatrixMul (&M[49], &M[333], &M[336]);

		/* GravityCompensation1\Base\AdHi0\onlyRotH = GravityCompensation1\Hfloor0\output; */
		XXMatrixMov (&M[69], &M[86]);

		/* GravityCompensation1\Base\AdHi0\onlyRotH[1,4] = 0; */
		M[69].mat[3] = 0.0;

		/* GravityCompensation1\Base\AdHi0\onlyRotH[2,4] = 0; */
		M[69].mat[7] = 0.0;

		/* GravityCompensation1\Base\AdHi0\onlyRotH[3,4] = 0; */
		M[69].mat[11] = 0.0;

		/* GravityCompensation1\Base\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Base\AdHi0\onlyRotH)) * GravityCompensation1\Base\Gravity\effort; */
		XXMatrixAdjoint (&M[338], &M[69]);
		XXMatrixTranspose (&M[337], &M[338]);
		XXMatrixMul (&M[68], &M[337], &M[79]);

		/* GravityCompensation1\Base\AdHi0\p1.f = Adjoint (GravityCompensation1\Base\AdHi0\onlyRotH) * GravityCompensation1\Base\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[339], &M[69]);
		XXMatrixMul (&M[67], &M[339], &M[73]);

	/* GravityCompensation1\Submodel13\port1 = MuxToControl1\control[4]; */
	V[1879] = M[246].mat[3];

	/* GravityCompensation1\Submodel13\port2 = MuxToControl1\control[5]; */
	V[1880] = M[246].mat[4];

	/* GravityCompensation1\Submodel13\port3 = MuxToControl1\control[6]; */
	V[1881] = M[246].mat[5];

	/* GravityCompensation1\Submodel13\port4 = MuxToControl1\control[7]; */
	V[1882] = M[246].mat[6];

	/* GravityCompensation1\Submodel13\port5 = MuxToControl1\control[8]; */
	V[1883] = M[246].mat[7];

	/* JointSpaceDamping\substate[1] = (if (DemuxHW1\control.f[1] - JointSpaceDamping\n_deadzone[1]) < -30 then -30 else if (DemuxHW1\control.f[1] - JointSpaceDamping\n_deadzone[1]) > 0 then 0 else (DemuxHW1\control.f[1] - JointSpaceDamping\n_deadzone[1]) end end) + (if (DemuxHW1\control.f[1] - JointSpaceDamping\p_deadzone[1]) < 0 then 0 else if (DemuxHW1\control.f[1] - JointSpaceDamping\p_deadzone[1]) > 30 then 30 else (DemuxHW1\control.f[1] - JointSpaceDamping\p_deadzone[1]) end end); */
	M[241].mat[0] = (((M[59].mat[0] - M[239].mat[0]) < -30.0) ? -30.0 : (((M[59].mat[0] - M[239].mat[0]) > 0.0) ? 0.0 : (M[59].mat[0] - M[239].mat[0]))) + (((M[59].mat[0] - M[238].mat[0]) < 0.0) ? 0.0 : (((M[59].mat[0] - M[238].mat[0]) > 30.0) ? 30.0 : (M[59].mat[0] - M[238].mat[0])));

	/* JointSpaceDamping\substate[2] = (if (DemuxHW1\control.f[2] - JointSpaceDamping\n_deadzone[2]) < -30 then -30 else if (DemuxHW1\control.f[2] - JointSpaceDamping\n_deadzone[2]) > 0 then 0 else (DemuxHW1\control.f[2] - JointSpaceDamping\n_deadzone[2]) end end) + (if (DemuxHW1\control.f[2] - JointSpaceDamping\p_deadzone[2]) < 0 then 0 else if (DemuxHW1\control.f[2] - JointSpaceDamping\p_deadzone[2]) > 30 then 30 else (DemuxHW1\control.f[2] - JointSpaceDamping\p_deadzone[2]) end end); */
	M[241].mat[1] = (((M[59].mat[1] - M[239].mat[1]) < -30.0) ? -30.0 : (((M[59].mat[1] - M[239].mat[1]) > 0.0) ? 0.0 : (M[59].mat[1] - M[239].mat[1]))) + (((M[59].mat[1] - M[238].mat[1]) < 0.0) ? 0.0 : (((M[59].mat[1] - M[238].mat[1]) > 30.0) ? 30.0 : (M[59].mat[1] - M[238].mat[1])));

	/* JointSpaceDamping\substate[3] = (if (DemuxHW1\control.f[3] - JointSpaceDamping\n_deadzone[3]) < -30 then -30 else if (DemuxHW1\control.f[3] - JointSpaceDamping\n_deadzone[3]) > 0 then 0 else (DemuxHW1\control.f[3] - JointSpaceDamping\n_deadzone[3]) end end) + (if (DemuxHW1\control.f[3] - JointSpaceDamping\p_deadzone[3]) < 0 then 0 else if (DemuxHW1\control.f[3] - JointSpaceDamping\p_deadzone[3]) > 30 then 30 else (DemuxHW1\control.f[3] - JointSpaceDamping\p_deadzone[3]) end end); */
	M[241].mat[2] = (((M[59].mat[2] - M[239].mat[2]) < -30.0) ? -30.0 : (((M[59].mat[2] - M[239].mat[2]) > 0.0) ? 0.0 : (M[59].mat[2] - M[239].mat[2]))) + (((M[59].mat[2] - M[238].mat[2]) < 0.0) ? 0.0 : (((M[59].mat[2] - M[238].mat[2]) > 30.0) ? 30.0 : (M[59].mat[2] - M[238].mat[2])));

	/* JointSpaceDamping\substate[4] = (if (DemuxHW1\control.f[4] - JointSpaceDamping\n_deadzone[4]) < -30 then -30 else if (DemuxHW1\control.f[4] - JointSpaceDamping\n_deadzone[4]) > 0 then 0 else (DemuxHW1\control.f[4] - JointSpaceDamping\n_deadzone[4]) end end) + (if (DemuxHW1\control.f[4] - JointSpaceDamping\p_deadzone[4]) < 0 then 0 else if (DemuxHW1\control.f[4] - JointSpaceDamping\p_deadzone[4]) > 30 then 30 else (DemuxHW1\control.f[4] - JointSpaceDamping\p_deadzone[4]) end end); */
	M[241].mat[3] = (((M[59].mat[3] - M[239].mat[3]) < -30.0) ? -30.0 : (((M[59].mat[3] - M[239].mat[3]) > 0.0) ? 0.0 : (M[59].mat[3] - M[239].mat[3]))) + (((M[59].mat[3] - M[238].mat[3]) < 0.0) ? 0.0 : (((M[59].mat[3] - M[238].mat[3]) > 30.0) ? 30.0 : (M[59].mat[3] - M[238].mat[3])));

	/* JointSpaceDamping\substate[5] = (if (DemuxHW1\control.f[5] - JointSpaceDamping\n_deadzone[5]) < -30 then -30 else if (DemuxHW1\control.f[5] - JointSpaceDamping\n_deadzone[5]) > 0 then 0 else (DemuxHW1\control.f[5] - JointSpaceDamping\n_deadzone[5]) end end) + (if (DemuxHW1\control.f[5] - JointSpaceDamping\p_deadzone[5]) < 0 then 0 else if (DemuxHW1\control.f[5] - JointSpaceDamping\p_deadzone[5]) > 30 then 30 else (DemuxHW1\control.f[5] - JointSpaceDamping\p_deadzone[5]) end end); */
	M[241].mat[4] = (((M[59].mat[4] - M[239].mat[4]) < -30.0) ? -30.0 : (((M[59].mat[4] - M[239].mat[4]) > 0.0) ? 0.0 : (M[59].mat[4] - M[239].mat[4]))) + (((M[59].mat[4] - M[238].mat[4]) < 0.0) ? 0.0 : (((M[59].mat[4] - M[238].mat[4]) > 30.0) ? 30.0 : (M[59].mat[4] - M[238].mat[4])));

	/* JointSpaceDamping\substate[6] = (if (DemuxHW1\control.f[6] - JointSpaceDamping\n_deadzone[6]) < -30 then -30 else if (DemuxHW1\control.f[6] - JointSpaceDamping\n_deadzone[6]) > 0 then 0 else (DemuxHW1\control.f[6] - JointSpaceDamping\n_deadzone[6]) end end) + (if (DemuxHW1\control.f[6] - JointSpaceDamping\p_deadzone[6]) < 0 then 0 else if (DemuxHW1\control.f[6] - JointSpaceDamping\p_deadzone[6]) > 30 then 30 else (DemuxHW1\control.f[6] - JointSpaceDamping\p_deadzone[6]) end end); */
	M[241].mat[5] = (((M[59].mat[5] - M[239].mat[5]) < -30.0) ? -30.0 : (((M[59].mat[5] - M[239].mat[5]) > 0.0) ? 0.0 : (M[59].mat[5] - M[239].mat[5]))) + (((M[59].mat[5] - M[238].mat[5]) < 0.0) ? 0.0 : (((M[59].mat[5] - M[238].mat[5]) > 30.0) ? 30.0 : (M[59].mat[5] - M[238].mat[5])));

	/* JointSpaceDamping\substate[7] = (if (DemuxHW1\control.f[7] - JointSpaceDamping\n_deadzone[7]) < -30 then -30 else if (DemuxHW1\control.f[7] - JointSpaceDamping\n_deadzone[7]) > 0 then 0 else (DemuxHW1\control.f[7] - JointSpaceDamping\n_deadzone[7]) end end) + (if (DemuxHW1\control.f[7] - JointSpaceDamping\p_deadzone[7]) < 0 then 0 else if (DemuxHW1\control.f[7] - JointSpaceDamping\p_deadzone[7]) > 30 then 30 else (DemuxHW1\control.f[7] - JointSpaceDamping\p_deadzone[7]) end end); */
	M[241].mat[6] = (((M[59].mat[6] - M[239].mat[6]) < -30.0) ? -30.0 : (((M[59].mat[6] - M[239].mat[6]) > 0.0) ? 0.0 : (M[59].mat[6] - M[239].mat[6]))) + (((M[59].mat[6] - M[238].mat[6]) < 0.0) ? 0.0 : (((M[59].mat[6] - M[238].mat[6]) > 30.0) ? 30.0 : (M[59].mat[6] - M[238].mat[6])));

	/* JointSpaceDamping\substate[8] = (if (DemuxHW1\control.f[8] - JointSpaceDamping\n_deadzone[8]) < -30 then -30 else if (DemuxHW1\control.f[8] - JointSpaceDamping\n_deadzone[8]) > 0 then 0 else (DemuxHW1\control.f[8] - JointSpaceDamping\n_deadzone[8]) end end) + (if (DemuxHW1\control.f[8] - JointSpaceDamping\p_deadzone[8]) < 0 then 0 else if (DemuxHW1\control.f[8] - JointSpaceDamping\p_deadzone[8]) > 30 then 30 else (DemuxHW1\control.f[8] - JointSpaceDamping\p_deadzone[8]) end end); */
	M[241].mat[7] = (((M[59].mat[7] - M[239].mat[7]) < -30.0) ? -30.0 : (((M[59].mat[7] - M[239].mat[7]) > 0.0) ? 0.0 : (M[59].mat[7] - M[239].mat[7]))) + (((M[59].mat[7] - M[238].mat[7]) < 0.0) ? 0.0 : (((M[59].mat[7] - M[238].mat[7]) > 30.0) ? 30.0 : (M[59].mat[7] - M[238].mat[7])));

	/* JointSpaceDamping\p.e = JointSpaceDamping\R * JointSpaceDamping\substate; */
	XXMatrixMul (&M[236], &M[240], &M[241]);

	/* OneJunction\p2.e = -CartesianSpaceStiffness\p.e; */
	XXMatrixInv (&M[250], &M[49]);

	/* ControllableJ\substate = transpose (CalculateJ\controllableJ) * OneJunction\p2.e; */
	XXMatrixTranspose (&M[340], &M[0]);
	XXMatrixMul (&M[56], &M[340], &M[250]);

	/* ControllableJ\joints.e[1] = (if ControllableJ\substate[1] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[1] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[1] end end); */
	M[54].mat[0] = (M[56].mat[0] < -P[44]) ? (-P[44]) : ((M[56].mat[0] > P[44]) ? P[44] : M[56].mat[0]);

	/* ControllableJ\joints.e[2] = (if ControllableJ\substate[2] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[2] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[2] end end); */
	M[54].mat[1] = (M[56].mat[1] < -P[44]) ? (-P[44]) : ((M[56].mat[1] > P[44]) ? P[44] : M[56].mat[1]);

	/* ControllableJ\joints.e[3] = (if ControllableJ\substate[3] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[3] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[3] end end); */
	M[54].mat[2] = (M[56].mat[2] < -P[44]) ? (-P[44]) : ((M[56].mat[2] > P[44]) ? P[44] : M[56].mat[2]);

	/* ControllableJ\joints.e[4] = (if ControllableJ\substate[4] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[4] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[4] end end); */
	M[54].mat[3] = (M[56].mat[3] < -P[44]) ? (-P[44]) : ((M[56].mat[3] > P[44]) ? P[44] : M[56].mat[3]);

	/* ControllableJ\joints.e[5] = (if ControllableJ\substate[5] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[5] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[5] end end); */
	M[54].mat[4] = (M[56].mat[4] < -P[44]) ? (-P[44]) : ((M[56].mat[4] > P[44]) ? P[44] : M[56].mat[4]);

	/* ControllableJ\joints.e[6] = (if ControllableJ\substate[6] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[6] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[6] end end); */
	M[54].mat[5] = (M[56].mat[5] < -P[44]) ? (-P[44]) : ((M[56].mat[5] > P[44]) ? P[44] : M[56].mat[5]);

	/* ControllableJ\joints.e[7] = (if ControllableJ\substate[7] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[7] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[7] end end); */
	M[54].mat[6] = (M[56].mat[6] < -P[44]) ? (-P[44]) : ((M[56].mat[6] > P[44]) ? P[44] : M[56].mat[6]);

	/* ControllableJ\joints.e[8] = (if ControllableJ\substate[8] < -ControllableJ\force_lim then -ControllableJ\force_lim else if ControllableJ\substate[8] > ControllableJ\force_lim then ControllableJ\force_lim else ControllableJ\substate[8] end end); */
	M[54].mat[7] = (M[56].mat[7] < -P[44]) ? (-P[44]) : ((M[56].mat[7] > P[44]) ? P[44] : M[56].mat[7]);

	/* GravityCompensation1\Joint12\Integrate\R = [cos (GravityCompensation1\Submodel13\port2), 0, sin (GravityCompensation1\Submodel13\port2); 0, 1, 0; -sin (GravityCompensation1\Submodel13\port2), 0, cos (GravityCompensation1\Submodel13\port2)]; */
	M[90].mat[0] = cos (V[1880]);
	M[90].mat[1] = 0.0;
	M[90].mat[2] = sin (V[1880]);
	M[90].mat[3] = 0.0;
	M[90].mat[4] = 1.0;
	M[90].mat[5] = 0.0;
	M[90].mat[6] = -(sin (V[1880]));
	M[90].mat[7] = 0.0;
	M[90].mat[8] = cos (V[1880]);

	/* GravityCompensation1\Joint12\Integrate\output = homogeneous (GravityCompensation1\Joint12\Integrate\R, GravityCompensation1\Joint12\Integrate\p); */
	XXMatrixHomogeneous (&M[89], &M[90], &M[91]);

	/* GravityCompensation1\Joint23\Integrate\R = [cos (GravityCompensation1\Submodel13\port3), 0, sin (GravityCompensation1\Submodel13\port3); 0, 1, 0; -sin (GravityCompensation1\Submodel13\port3), 0, cos (GravityCompensation1\Submodel13\port3)]; */
	M[98].mat[0] = cos (V[1881]);
	M[98].mat[1] = 0.0;
	M[98].mat[2] = sin (V[1881]);
	M[98].mat[3] = 0.0;
	M[98].mat[4] = 1.0;
	M[98].mat[5] = 0.0;
	M[98].mat[6] = -(sin (V[1881]));
	M[98].mat[7] = 0.0;
	M[98].mat[8] = cos (V[1881]);

	/* GravityCompensation1\Joint23\Integrate\output = homogeneous (GravityCompensation1\Joint23\Integrate\R, GravityCompensation1\Joint23\Integrate\p); */
	XXMatrixHomogeneous (&M[97], &M[98], &M[99]);

	/* GravityCompensation1\Joint34\Integrate\R = [cos (GravityCompensation1\Submodel13\port4), 0, sin (GravityCompensation1\Submodel13\port4); 0, 1, 0; -sin (GravityCompensation1\Submodel13\port4), 0, cos (GravityCompensation1\Submodel13\port4)]; */
	M[106].mat[0] = cos (V[1882]);
	M[106].mat[1] = 0.0;
	M[106].mat[2] = sin (V[1882]);
	M[106].mat[3] = 0.0;
	M[106].mat[4] = 1.0;
	M[106].mat[5] = 0.0;
	M[106].mat[6] = -(sin (V[1882]));
	M[106].mat[7] = 0.0;
	M[106].mat[8] = cos (V[1882]);

	/* GravityCompensation1\Joint34\Integrate\output = homogeneous (GravityCompensation1\Joint34\Integrate\R, GravityCompensation1\Joint34\Integrate\p); */
	XXMatrixHomogeneous (&M[105], &M[106], &M[107]);

	/* GravityCompensation1\Joint45\Integrate\R = [cos (-GravityCompensation1\Submodel13\port5), -sin (-GravityCompensation1\Submodel13\port5), 0; sin (-GravityCompensation1\Submodel13\port5), cos (-GravityCompensation1\Submodel13\port5), 0; 0, 0, 1]; */
	M[114].mat[0] = cos (-V[1883]);
	M[114].mat[1] = -(sin (-V[1883]));
	M[114].mat[2] = 0.0;
	M[114].mat[3] = sin (-V[1883]);
	M[114].mat[4] = cos (-V[1883]);
	M[114].mat[5] = 0.0;
	M[114].mat[6] = 0.0;
	M[114].mat[7] = 0.0;
	M[114].mat[8] = 1.0;

	/* GravityCompensation1\Joint45\Integrate\output = homogeneous (GravityCompensation1\Joint45\Integrate\R, GravityCompensation1\Joint45\Integrate\p); */
	XXMatrixHomogeneous (&M[113], &M[114], &M[115]);

	/* GravityCompensation1\JointBase1\Integrate\R = [cos (-GravityCompensation1\Submodel13\port1), -sin (-GravityCompensation1\Submodel13\port1), 0; sin (-GravityCompensation1\Submodel13\port1), cos (-GravityCompensation1\Submodel13\port1), 0; 0, 0, 1]; */
	M[122].mat[0] = cos (-V[1879]);
	M[122].mat[1] = -(sin (-V[1879]));
	M[122].mat[2] = 0.0;
	M[122].mat[3] = sin (-V[1879]);
	M[122].mat[4] = cos (-V[1879]);
	M[122].mat[5] = 0.0;
	M[122].mat[6] = 0.0;
	M[122].mat[7] = 0.0;
	M[122].mat[8] = 1.0;

	/* GravityCompensation1\JointBase1\Integrate\output = homogeneous (GravityCompensation1\JointBase1\Integrate\R, GravityCompensation1\JointBase1\Integrate\p); */
	XXMatrixHomogeneous (&M[121], &M[122], &M[123]);

	/* GravityCompensation1\JointBase1\MatrixMul\output = GravityCompensation1\Base\Hij\output * GravityCompensation1\JointBase1\Integrate\output; */
	XXMatrixMul (&M[124], &M[80], &M[121]);

	/* GravityCompensation1\Link1\Hij\output = GravityCompensation1\JointBase1\MatrixMul\output * GravityCompensation1\Link1\Hij\Hab; */
	XXMatrixMul (&M[140], &M[124], &M[141]);

	/* GravityCompensation1\Joint12\MatrixMul\output = GravityCompensation1\Link1\Hij\output * GravityCompensation1\Joint12\Integrate\output; */
	XXMatrixMul (&M[92], &M[140], &M[89]);

		/* GravityCompensation1\Link1\AdHi0\onlyRotH = GravityCompensation1\JointBase1\MatrixMul\output; */
		XXMatrixMov (&M[129], &M[124]);

		/* GravityCompensation1\Link1\AdHi0\onlyRotH[1,4] = 0; */
		M[129].mat[3] = 0.0;

		/* GravityCompensation1\Link1\AdHi0\onlyRotH[2,4] = 0; */
		M[129].mat[7] = 0.0;

		/* GravityCompensation1\Link1\AdHi0\onlyRotH[3,4] = 0; */
		M[129].mat[11] = 0.0;

		/* GravityCompensation1\Link1\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Link1\AdHi0\onlyRotH)) * GravityCompensation1\Link1\Gravity\effort; */
		XXMatrixAdjoint (&M[342], &M[129]);
		XXMatrixTranspose (&M[341], &M[342]);
		XXMatrixMul (&M[128], &M[341], &M[139]);

		/* GravityCompensation1\Link1\AdHi0\p1.f = Adjoint (GravityCompensation1\Link1\AdHi0\onlyRotH) * GravityCompensation1\Link1\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[343], &M[129]);
		XXMatrixMul (&M[127], &M[343], &M[133]);

	/* GravityCompensation1\Link2\Hij\output = GravityCompensation1\Joint12\MatrixMul\output * GravityCompensation1\Link2\Hij\Hab; */
	XXMatrixMul (&M[159], &M[92], &M[160]);

	/* GravityCompensation1\Link1\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Link1\AdHik1\AdH)) * GravityCompensation1\Link1\AdHi0\p2.e; */
	XXMatrixTranspose (&M[345], &M[138]);
	XXScalarMatrixDiv (&M[344], 1.0, &M[345], workarray);
	XXMatrixMul (&M[132], &M[344], &M[128]);

	/* GravityCompensation1\Joint23\MatrixMul\output = GravityCompensation1\Link2\Hij\output * GravityCompensation1\Joint23\Integrate\output; */
	XXMatrixMul (&M[100], &M[159], &M[97]);

	/* GravityCompensation1\Link3\Hij\output = GravityCompensation1\Joint23\MatrixMul\output * GravityCompensation1\Link3\Hij\Hab; */
	XXMatrixMul (&M[178], &M[100], &M[179]);

		/* GravityCompensation1\Link2\AdHi0\onlyRotH = GravityCompensation1\Joint12\MatrixMul\output; */
		XXMatrixMov (&M[148], &M[92]);

		/* GravityCompensation1\Link2\AdHi0\onlyRotH[1,4] = 0; */
		M[148].mat[3] = 0.0;

		/* GravityCompensation1\Link2\AdHi0\onlyRotH[2,4] = 0; */
		M[148].mat[7] = 0.0;

		/* GravityCompensation1\Link2\AdHi0\onlyRotH[3,4] = 0; */
		M[148].mat[11] = 0.0;

		/* GravityCompensation1\Link2\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Link2\AdHi0\onlyRotH)) * GravityCompensation1\Link2\Gravity\effort; */
		XXMatrixAdjoint (&M[347], &M[148]);
		XXMatrixTranspose (&M[346], &M[347]);
		XXMatrixMul (&M[147], &M[346], &M[158]);

		/* GravityCompensation1\Link2\AdHi0\p1.f = Adjoint (GravityCompensation1\Link2\AdHi0\onlyRotH) * GravityCompensation1\Link2\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[348], &M[148]);
		XXMatrixMul (&M[146], &M[348], &M[152]);

	/* GravityCompensation1\Joint34\MatrixMul\output = GravityCompensation1\Link3\Hij\output * GravityCompensation1\Joint34\Integrate\output; */
	XXMatrixMul (&M[108], &M[178], &M[105]);

	/* GravityCompensation1\Link2\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Link2\AdHik1\AdH)) * GravityCompensation1\Link2\AdHi0\p2.e; */
	XXMatrixTranspose (&M[350], &M[157]);
	XXScalarMatrixDiv (&M[349], 1.0, &M[350], workarray);
	XXMatrixMul (&M[151], &M[349], &M[147]);

	/* GravityCompensation1\Link4\Hij\output = GravityCompensation1\Joint34\MatrixMul\output * GravityCompensation1\Link4\Hij\Hab; */
	XXMatrixMul (&M[197], &M[108], &M[198]);

	/* GravityCompensation1\Joint45\MatrixMul\output = GravityCompensation1\Link4\Hij\output * GravityCompensation1\Joint45\Integrate\output; */
	XXMatrixMul (&M[116], &M[197], &M[113]);

		/* GravityCompensation1\Link3\AdHi0\onlyRotH = GravityCompensation1\Joint23\MatrixMul\output; */
		XXMatrixMov (&M[167], &M[100]);

		/* GravityCompensation1\Link3\AdHi0\onlyRotH[1,4] = 0; */
		M[167].mat[3] = 0.0;

		/* GravityCompensation1\Link3\AdHi0\onlyRotH[2,4] = 0; */
		M[167].mat[7] = 0.0;

		/* GravityCompensation1\Link3\AdHi0\onlyRotH[3,4] = 0; */
		M[167].mat[11] = 0.0;

		/* GravityCompensation1\Link3\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Link3\AdHi0\onlyRotH)) * GravityCompensation1\Link3\Gravity\effort; */
		XXMatrixAdjoint (&M[352], &M[167]);
		XXMatrixTranspose (&M[351], &M[352]);
		XXMatrixMul (&M[166], &M[351], &M[177]);

		/* GravityCompensation1\Link3\AdHi0\p1.f = Adjoint (GravityCompensation1\Link3\AdHi0\onlyRotH) * GravityCompensation1\Link3\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[353], &M[167]);
		XXMatrixMul (&M[165], &M[353], &M[171]);

	/* GravityCompensation1\Link3\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Link3\AdHik1\AdH)) * GravityCompensation1\Link3\AdHi0\p2.e; */
	XXMatrixTranspose (&M[355], &M[176]);
	XXScalarMatrixDiv (&M[354], 1.0, &M[355], workarray);
	XXMatrixMul (&M[170], &M[354], &M[166]);

		/* GravityCompensation1\Link4\AdHi0\onlyRotH = GravityCompensation1\Joint34\MatrixMul\output; */
		XXMatrixMov (&M[186], &M[108]);

		/* GravityCompensation1\Link4\AdHi0\onlyRotH[1,4] = 0; */
		M[186].mat[3] = 0.0;

		/* GravityCompensation1\Link4\AdHi0\onlyRotH[2,4] = 0; */
		M[186].mat[7] = 0.0;

		/* GravityCompensation1\Link4\AdHi0\onlyRotH[3,4] = 0; */
		M[186].mat[11] = 0.0;

		/* GravityCompensation1\Link4\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Link4\AdHi0\onlyRotH)) * GravityCompensation1\Link4\Gravity\effort; */
		XXMatrixAdjoint (&M[357], &M[186]);
		XXMatrixTranspose (&M[356], &M[357]);
		XXMatrixMul (&M[185], &M[356], &M[196]);

		/* GravityCompensation1\Link4\AdHi0\p1.f = Adjoint (GravityCompensation1\Link4\AdHi0\onlyRotH) * GravityCompensation1\Link4\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[358], &M[186]);
		XXMatrixMul (&M[184], &M[358], &M[190]);

	/* GravityCompensation1\Link4\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Link4\AdHik1\AdH)) * GravityCompensation1\Link4\AdHi0\p2.e; */
	XXMatrixTranspose (&M[360], &M[195]);
	XXScalarMatrixDiv (&M[359], 1.0, &M[360], workarray);
	XXMatrixMul (&M[189], &M[359], &M[185]);

		/* GravityCompensation1\Link5\AdHi0\onlyRotH = GravityCompensation1\Joint45\MatrixMul\output; */
		XXMatrixMov (&M[205], &M[116]);

		/* GravityCompensation1\Link5\AdHi0\onlyRotH[1,4] = 0; */
		M[205].mat[3] = 0.0;

		/* GravityCompensation1\Link5\AdHi0\onlyRotH[2,4] = 0; */
		M[205].mat[7] = 0.0;

		/* GravityCompensation1\Link5\AdHi0\onlyRotH[3,4] = 0; */
		M[205].mat[11] = 0.0;

		/* GravityCompensation1\Link5\AdHi0\p2.e = transpose (Adjoint (GravityCompensation1\Link5\AdHi0\onlyRotH)) * GravityCompensation1\Link5\Gravity\effort; */
		XXMatrixAdjoint (&M[362], &M[205]);
		XXMatrixTranspose (&M[361], &M[362]);
		XXMatrixMul (&M[204], &M[361], &M[215]);

		/* GravityCompensation1\Link5\AdHi0\p1.f = Adjoint (GravityCompensation1\Link5\AdHi0\onlyRotH) * GravityCompensation1\Link5\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[363], &M[205]);
		XXMatrixMul (&M[203], &M[363], &M[209]);

	/* GravityCompensation1\Link5\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Link5\AdHik1\AdH)) * GravityCompensation1\Link5\AdHi0\p2.e; */
	XXMatrixTranspose (&M[365], &M[214]);
	XXScalarMatrixDiv (&M[364], 1.0, &M[365], workarray);
	XXMatrixMul (&M[208], &M[364], &M[204]);

	/* GravityCompensation1\Link5\Ta0i\p2.e = GravityCompensation1\Link5\AdHik1\p1.e + GravityCompensation1\Link5\AdHij\p1.e; */
	XXMatrixAdd (&M[219], &M[208], &M[206]);

	/* GravityCompensation1\Joint45\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensation1\Joint45\Integrate\output))) * GravityCompensation1\Link5\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[368], &M[113]);
	XXMatrixTranspose (&M[367], &M[368]);
	XXScalarMatrixDiv (&M[366], 1.0, &M[367], workarray);
	XXMatrixMul (&M[111], &M[366], &M[219]);

	/* GravityCompensation1\Joint45\uTbai\p1.e = GravityCompensation1\Joint45\AdHji\p1.e[3]; */
	V[984] = M[111].mat[2];

	/* GravityCompensation1\Link4\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Link4\Hij\Hab)) * GravityCompensation1\Joint45\AdHji\p1.e; */
	XXMatrixAdjoint (&M[370], &M[198]);
	XXMatrixTranspose (&M[369], &M[370]);
	XXMatrixMul (&M[187], &M[369], &M[111]);

	/* GravityCompensation1\Link4\Ta0i\p2.e = GravityCompensation1\Link4\AdHik1\p1.e + GravityCompensation1\Link4\AdHij\p1.e; */
	XXMatrixAdd (&M[200], &M[189], &M[187]);

	/* GravityCompensation1\Mux\port.e[8] = GravityCompensation1\Joint45\uTbai\p1.e * GravityCompensation1\Mux\calibartion; */
	M[222].mat[7] = V[984] * P[140];

	/* GravityCompensation1\Joint34\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensation1\Joint34\Integrate\output))) * GravityCompensation1\Link4\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[373], &M[105]);
	XXMatrixTranspose (&M[372], &M[373]);
	XXScalarMatrixDiv (&M[371], 1.0, &M[372], workarray);
	XXMatrixMul (&M[103], &M[371], &M[200]);

	/* GravityCompensation1\Joint34\uTbai\p1.e = GravityCompensation1\Joint34\AdHji\p1.e[2]; */
	V[915] = M[103].mat[1];

	/* GravityCompensation1\Link3\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Link3\Hij\Hab)) * GravityCompensation1\Joint34\AdHji\p1.e; */
	XXMatrixAdjoint (&M[375], &M[179]);
	XXMatrixTranspose (&M[374], &M[375]);
	XXMatrixMul (&M[168], &M[374], &M[103]);

	/* GravityCompensation1\Link3\Ta0i\p2.e = GravityCompensation1\Link3\AdHik1\p1.e + GravityCompensation1\Link3\AdHij\p1.e; */
	XXMatrixAdd (&M[181], &M[170], &M[168]);

	/* GravityCompensation1\Mux\port.e[7] = GravityCompensation1\Joint34\uTbai\p1.e * GravityCompensation1\Mux\calibartion; */
	M[222].mat[6] = V[915] * P[140];

	/* GravityCompensation1\Joint23\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensation1\Joint23\Integrate\output))) * GravityCompensation1\Link3\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[378], &M[97]);
	XXMatrixTranspose (&M[377], &M[378]);
	XXScalarMatrixDiv (&M[376], 1.0, &M[377], workarray);
	XXMatrixMul (&M[95], &M[376], &M[181]);

	/* GravityCompensation1\Joint23\uTbai\p1.e = GravityCompensation1\Joint23\AdHji\p1.e[2]; */
	V[846] = M[95].mat[1];

	/* GravityCompensation1\Link2\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Link2\Hij\Hab)) * GravityCompensation1\Joint23\AdHji\p1.e; */
	XXMatrixAdjoint (&M[380], &M[160]);
	XXMatrixTranspose (&M[379], &M[380]);
	XXMatrixMul (&M[149], &M[379], &M[95]);

	/* GravityCompensation1\Link2\Ta0i\p2.e = GravityCompensation1\Link2\AdHik1\p1.e + GravityCompensation1\Link2\AdHij\p1.e; */
	XXMatrixAdd (&M[162], &M[151], &M[149]);

	/* GravityCompensation1\Mux\port.e[6] = GravityCompensation1\Joint23\uTbai\p1.e * GravityCompensation1\Mux\calibartion; */
	M[222].mat[5] = V[846] * P[140];

	/* GravityCompensation1\Joint12\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensation1\Joint12\Integrate\output))) * GravityCompensation1\Link2\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[383], &M[89]);
	XXMatrixTranspose (&M[382], &M[383]);
	XXScalarMatrixDiv (&M[381], 1.0, &M[382], workarray);
	XXMatrixMul (&M[87], &M[381], &M[162]);

	/* GravityCompensation1\Joint12\uTbai\p1.e = GravityCompensation1\Joint12\AdHji\p1.e[2]; */
	V[777] = M[87].mat[1];

	/* GravityCompensation1\Link1\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Link1\Hij\Hab)) * GravityCompensation1\Joint12\AdHji\p1.e; */
	XXMatrixAdjoint (&M[385], &M[141]);
	XXMatrixTranspose (&M[384], &M[385]);
	XXMatrixMul (&M[130], &M[384], &M[87]);

	/* GravityCompensation1\Link1\Ta0i\p2.e = GravityCompensation1\Link1\AdHik1\p1.e + GravityCompensation1\Link1\AdHij\p1.e; */
	XXMatrixAdd (&M[143], &M[132], &M[130]);

	/* GravityCompensation1\Mux\port.e[5] = GravityCompensation1\Joint12\uTbai\p1.e * GravityCompensation1\Mux\calibartion; */
	M[222].mat[4] = V[777] * P[140];

	/* GravityCompensation1\JointBase1\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensation1\JointBase1\Integrate\output))) * GravityCompensation1\Link1\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[388], &M[121]);
	XXMatrixTranspose (&M[387], &M[388]);
	XXScalarMatrixDiv (&M[386], 1.0, &M[387], workarray);
	XXMatrixMul (&M[119], &M[386], &M[143]);

	/* GravityCompensation1\JointBase1\uTbai\p1.e = GravityCompensation1\JointBase1\AdHji\p1.e[3]; */
	V[1053] = M[119].mat[2];

	/* GravityCompensation1\Mux\port.e[4] = GravityCompensation1\JointBase1\uTbai\p1.e * GravityCompensation1\Mux\calibartion; */
	M[222].mat[3] = V[1053] * P[140];

	/* OneJunction2\p4.e = ((GravityCompensation1\Mux\port.e + ControllableJ\joints.e) - JointSpaceStiffness\joints.e) - (JointSpaceDamping\p.e + JointSoftLimits\p.e); */
	XXMatrixAdd (&M[390], &M[222], &M[54]);
	XXMatrixSub (&M[389], &M[390], &M[242]);
	XXMatrixAdd (&M[391], &M[236], &M[229]);
	XXMatrixSub (&M[251], &M[389], &M[391]);

	/* DemuxHW1\base.e = OneJunction2\p4.e[1:3]; */
	M[57].mat[0] = M[251].mat[0];
	M[57].mat[1] = M[251].mat[1];
	M[57].mat[2] = M[251].mat[2];

	/* DemuxHW1\arm.e = OneJunction2\p4.e[4:8]; */
	M[60].mat[0] = M[251].mat[3];
	M[60].mat[1] = M[251].mat[4];
	M[60].mat[2] = M[251].mat[5];
	M[60].mat[3] = M[251].mat[6];
	M[60].mat[4] = M[251].mat[7];

	/* bond_to_arm.T = DemuxHW1\arm.e; */
	XXMatrixMov (&M[252], &M[60]);

	/* bond_to_base.F = DemuxHW1\base.e; */
	XXMatrixMov (&M[254], &M[57]);

	}

	/* This function calculates the output equations of the model.
	 * These equations are not needed for calculation of the rates
	 * and are kept separate to make the dynamic set of equations smaller.
	 * These dynamic equations are called often more than one time for each
	 * integration step that is taken. This makes model computation much faster.
	 */
	void interaction_control::CalculateOutput (void)
	{
			/* CartesianSpaceStiffness\stenght = sqrt (transpose (CartesianSpaceStiffness\Wt) * CartesianSpaceStiffness\Wt); */
	XXMatrixTranspose (&M[393], &M[53]);
	XXScalarMatrixMatrixMul (M[392].mat, &M[393], &M[53]);
	V[448] = sqrt (M[392].mat[0]);

	/* ControllableJ\tip.f = CalculateJ\controllableJ * DemuxHW1\control.f; */
	XXMatrixMul (&M[55], &M[0], &M[59]);

	/* GravityCompensation1\Base\AdHik1\p1.e = (1.0 / transpose (GravityCompensation1\Base\AdHik1\AdH)) * GravityCompensation1\Base\AdHi0\p2.e; */
	XXMatrixTranspose (&M[395], &M[78]);
	XXScalarMatrixDiv (&M[394], 1.0, &M[395], workarray);
	XXMatrixMul (&M[72], &M[394], &M[68]);

	/* GravityCompensation1\Mux\port5.f = DemuxHW1\control.f[4]; */
	V[1874] = M[59].mat[3];

	/* GravityCompensation1\Mux\port6.f = DemuxHW1\control.f[5]; */
	V[1875] = M[59].mat[4];

	/* GravityCompensation1\Mux\port7.f = DemuxHW1\control.f[6]; */
	V[1876] = M[59].mat[5];

	/* GravityCompensation1\Mux\port8.f = DemuxHW1\control.f[7]; */
	V[1877] = M[59].mat[6];

	/* GravityCompensation1\Mux\port9.f = DemuxHW1\control.f[8]; */
	V[1878] = M[59].mat[7];

	/* GravityCompensation1\Joint12\uTbai\p2.f = [0; GravityCompensation1\Mux\port6.f; 0; 0; 0; 0]; */
	M[93].mat[0] = 0.0;
	M[93].mat[1] = V[1875];
	M[93].mat[2] = 0.0;
	M[93].mat[3] = 0.0;
	M[93].mat[4] = 0.0;
	M[93].mat[5] = 0.0;

	/* GravityCompensation1\Joint23\uTbai\p2.f = [0; GravityCompensation1\Mux\port7.f; 0; 0; 0; 0]; */
	M[101].mat[0] = 0.0;
	M[101].mat[1] = V[1876];
	M[101].mat[2] = 0.0;
	M[101].mat[3] = 0.0;
	M[101].mat[4] = 0.0;
	M[101].mat[5] = 0.0;

	/* GravityCompensation1\Joint34\uTbai\p2.f = [0; GravityCompensation1\Mux\port8.f; 0; 0; 0; 0]; */
	M[109].mat[0] = 0.0;
	M[109].mat[1] = V[1877];
	M[109].mat[2] = 0.0;
	M[109].mat[3] = 0.0;
	M[109].mat[4] = 0.0;
	M[109].mat[5] = 0.0;

	/* GravityCompensation1\Joint45\uTbai\p2.f = [0; 0; GravityCompensation1\Mux\port9.f; 0; 0; 0]; */
	M[117].mat[0] = 0.0;
	M[117].mat[1] = 0.0;
	M[117].mat[2] = V[1878];
	M[117].mat[3] = 0.0;
	M[117].mat[4] = 0.0;
	M[117].mat[5] = 0.0;

	/* GravityCompensation1\JointBase1\uTbai\p2.f = [0; 0; GravityCompensation1\Mux\port5.f; 0; 0; 0]; */
	M[125].mat[0] = 0.0;
	M[125].mat[1] = 0.0;
	M[125].mat[2] = V[1874];
	M[125].mat[3] = 0.0;
	M[125].mat[4] = 0.0;
	M[125].mat[5] = 0.0;

	/* GravityCompensation1\JointBase1\Wbai\p1.f = GravityCompensation1\Base\AdHij\p2.f - GravityCompensation1\JointBase1\uTbai\p2.f; */
	XXMatrixSub (&M[126], &M[71], &M[125]);

	/* GravityCompensation1\JointBase1\AdHji\p2.f = (1.0 / Adjoint (GravityCompensation1\JointBase1\Integrate\output)) * GravityCompensation1\JointBase1\Wbai\p1.f; */
	XXMatrixAdjoint (&M[397], &M[121]);
	XXScalarMatrixDiv (&M[396], 1.0, &M[397], workarray);
	XXMatrixMul (&M[120], &M[396], &M[126]);

	/* GravityCompensation1\Link1\AdHij\p2.f = Adjoint (GravityCompensation1\Link1\Hij\Hab) * GravityCompensation1\JointBase1\AdHji\p2.f; */
	XXMatrixAdjoint (&M[398], &M[141]);
	XXMatrixMul (&M[131], &M[398], &M[120]);

	/* GravityCompensation1\Link1\AdHik1\p2.f = (1.0 / GravityCompensation1\Link1\AdHik1\AdH) * GravityCompensation1\JointBase1\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[399], 1.0, &M[138], workarray);
	XXMatrixMul (&M[133], &M[399], &M[120]);

	/* GravityCompensation1\Joint12\Wbai\p3.f = GravityCompensation1\Link1\AdHij\p2.f - GravityCompensation1\Joint12\uTbai\p2.f; */
	XXMatrixSub (&M[94], &M[131], &M[93]);

	/* GravityCompensation1\Joint12\AdHji\p2.f = (1.0 / Adjoint (GravityCompensation1\Joint12\Integrate\output)) * GravityCompensation1\Joint12\Wbai\p3.f; */
	XXMatrixAdjoint (&M[401], &M[89]);
	XXScalarMatrixDiv (&M[400], 1.0, &M[401], workarray);
	XXMatrixMul (&M[88], &M[400], &M[94]);

	/* GravityCompensation1\Link2\AdHij\p2.f = Adjoint (GravityCompensation1\Link2\Hij\Hab) * GravityCompensation1\Joint12\AdHji\p2.f; */
	XXMatrixAdjoint (&M[402], &M[160]);
	XXMatrixMul (&M[150], &M[402], &M[88]);

	/* GravityCompensation1\Link2\AdHik1\p2.f = (1.0 / GravityCompensation1\Link2\AdHik1\AdH) * GravityCompensation1\Joint12\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[403], 1.0, &M[157], workarray);
	XXMatrixMul (&M[152], &M[403], &M[88]);

	/* GravityCompensation1\Joint23\Wbai\p3.f = GravityCompensation1\Link2\AdHij\p2.f - GravityCompensation1\Joint23\uTbai\p2.f; */
	XXMatrixSub (&M[102], &M[150], &M[101]);

	/* GravityCompensation1\Joint23\AdHji\p2.f = (1.0 / Adjoint (GravityCompensation1\Joint23\Integrate\output)) * GravityCompensation1\Joint23\Wbai\p3.f; */
	XXMatrixAdjoint (&M[405], &M[97]);
	XXScalarMatrixDiv (&M[404], 1.0, &M[405], workarray);
	XXMatrixMul (&M[96], &M[404], &M[102]);

	/* GravityCompensation1\Link3\AdHij\p2.f = Adjoint (GravityCompensation1\Link3\Hij\Hab) * GravityCompensation1\Joint23\AdHji\p2.f; */
	XXMatrixAdjoint (&M[406], &M[179]);
	XXMatrixMul (&M[169], &M[406], &M[96]);

	/* GravityCompensation1\Link3\AdHik1\p2.f = (1.0 / GravityCompensation1\Link3\AdHik1\AdH) * GravityCompensation1\Joint23\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[407], 1.0, &M[176], workarray);
	XXMatrixMul (&M[171], &M[407], &M[96]);

	/* GravityCompensation1\Joint34\Wbai\p3.f = GravityCompensation1\Link3\AdHij\p2.f - GravityCompensation1\Joint34\uTbai\p2.f; */
	XXMatrixSub (&M[110], &M[169], &M[109]);

	/* GravityCompensation1\Joint34\AdHji\p2.f = (1.0 / Adjoint (GravityCompensation1\Joint34\Integrate\output)) * GravityCompensation1\Joint34\Wbai\p3.f; */
	XXMatrixAdjoint (&M[409], &M[105]);
	XXScalarMatrixDiv (&M[408], 1.0, &M[409], workarray);
	XXMatrixMul (&M[104], &M[408], &M[110]);

	/* GravityCompensation1\Link5\Hij\output = GravityCompensation1\Joint45\MatrixMul\output * GravityCompensation1\Link5\Hij\Hab; */
	XXMatrixMul (&M[216], &M[116], &M[217]);

	/* GravityCompensation1\Link4\AdHij\p2.f = Adjoint (GravityCompensation1\Link4\Hij\Hab) * GravityCompensation1\Joint34\AdHji\p2.f; */
	XXMatrixAdjoint (&M[410], &M[198]);
	XXMatrixMul (&M[188], &M[410], &M[104]);

	/* GravityCompensation1\Link4\AdHik1\p2.f = (1.0 / GravityCompensation1\Link4\AdHik1\AdH) * GravityCompensation1\Joint34\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[411], 1.0, &M[195], workarray);
	XXMatrixMul (&M[190], &M[411], &M[104]);

	/* GravityCompensation1\Joint45\Wbai\p1.f = GravityCompensation1\Link4\AdHij\p2.f - GravityCompensation1\Joint45\uTbai\p2.f; */
	XXMatrixSub (&M[118], &M[188], &M[117]);

	/* GravityCompensation1\Joint45\AdHji\p2.f = (1.0 / Adjoint (GravityCompensation1\Joint45\Integrate\output)) * GravityCompensation1\Joint45\Wbai\p1.f; */
	XXMatrixAdjoint (&M[413], &M[113]);
	XXScalarMatrixDiv (&M[412], 1.0, &M[413], workarray);
	XXMatrixMul (&M[112], &M[412], &M[118]);

	/* GravityCompensation1\Link5\AdHij\p2.f = Adjoint (GravityCompensation1\Link5\Hij\Hab) * GravityCompensation1\Joint45\AdHji\p2.f; */
	XXMatrixAdjoint (&M[414], &M[217]);
	XXMatrixMul (&M[207], &M[414], &M[112]);

	/* GravityCompensation1\Link5\AdHik1\p2.f = (1.0 / GravityCompensation1\Link5\AdHik1\AdH) * GravityCompensation1\Joint45\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[415], 1.0, &M[214], workarray);
	XXMatrixMul (&M[209], &M[415], &M[112]);

	/* GravityCompensation1\Base\AdHij\p1.e = transpose (Adjoint (GravityCompensation1\Base\Hij\Hab)) * GravityCompensation1\JointBase1\AdHji\p1.e; */
	XXMatrixAdjoint (&M[417], &M[81]);
	XXMatrixTranspose (&M[416], &M[417]);
	XXMatrixMul (&M[70], &M[416], &M[119]);

	/* GravityCompensation1\Base\Ta0i\p2.e = GravityCompensation1\Base\AdHik1\p1.e + GravityCompensation1\Base\AdHij\p1.e; */
	XXMatrixAdd (&M[83], &M[72], &M[70]);

			}

	/* This function calculates the final equations of the model.
	 * These equations are calculated after all the calculations
	 * are performed
	 */
	void interaction_control::CalculateFinal (void)
	{
		
	}

	void interaction_control::setupParametersAndStates()
	{
		using namespace boost;

		TiXmlDocument doc(TSim_config_xml);
		if (!doc.LoadFile())
		{
			log(Error) << "File not found: " << TSim_config_xml << endlog();
			return;
		}

		TiXmlHandle hdoc(&doc);
		TiXmlElement* pElem;
		TiXmlHandle hRoot(0);
		TiXmlNode* tNode(NULL);

		hRoot = TiXmlHandle(hdoc.FirstChildElement().Element());
		pElem = hRoot.FirstChild("modelVariables").FirstChild().Element();

		if (pElem)
		{

			do
			{
				log(Debug) << "Begin of processing the tag" << endlog();
				log(Debug) << "Read all relevant fields" << endlog();
				const char * kind =
				(tNode = pElem->FirstChild("kind")) == NULL ?
				NULL : tNode->ToElement()->GetText();
				const char * name =
				(tNode = pElem->FirstChild("name")) == NULL ?
				NULL : tNode->ToElement()->GetText();
				name =
				name == NULL || name == "" ?
				" " : name;
				const char * description =
				(tNode = pElem->FirstChild("description")) == NULL ?
				" " : tNode->ToElement()->GetText();
				description =
				description == NULL || description == "" ?
				" " : description;
				const char * container =
				(tNode = pElem->FirstChild("storage")) == NULL ?
				NULL :
				tNode->FirstChild("name")->ToElement()->GetText();
				const char * strIndex =
				(tNode = pElem->FirstChild("storage")) == NULL ?
				NULL :
				tNode->FirstChild("index")->ToElement()->GetText();
				const char * strRows =
				(tNode = pElem->FirstChild("size")) == NULL ?
				NULL :
				tNode->FirstChild("rows")->ToElement()->GetText();
				const char * strColumns =
				(tNode = pElem->FirstChild("size")) == NULL ?
				NULL :
				tNode->FirstChild("columns")->ToElement()->GetText();
				const char * type =
				(tNode = pElem->FirstChild("type")) == NULL ?
				NULL : tNode->ToElement()->GetText();

				const char * value=
				(tNode = pElem->FirstChild("value")) == NULL ?
				NULL : tNode->ToElement()->GetText();
				log(Debug) << " strings to numbers" << endlog();
				int index, rows, columns;
				if (strIndex == NULL)
				{
					log(Debug)
					<< "Processing : "
					<< TSim_config_xml
					<< " Link to 20 sim variables incorrectly defined: Index =null \n"
					<< " The node will be not processed" << endlog();
					continue;
				}
				index = atoi(strIndex);
				rows = strRows == NULL ? 1 : atoi(strRows);
				columns = strColumns == NULL ? 1 : atoi(strColumns);

				if(index == -1 || rows == -1 || columns == -1)
				{
					log(Error) << "XML parse error: ";
					log(Error) << "Name: " << name << " Disc: " << description
					<< " Index: " << index << " Kind: " << kind << " Type: "
					<< type << endlog();
				}

				log(Debug) << "Name: " << name << " Disc: " << description
				<< " Index: " << index << " Kind: " << kind << " Type: "
				<< type << endlog();

				common20sim::XVMatrix* tempXVMatrix;
				log(Debug) << " Selecting source of data for this node" << endlog();
				if (boost::equals(container, "V"))
				{
					tempXVMatrix=new common20sim::XVMatrix(V+index, rows, columns);
				}
				else if (boost::equals(container, "C"))
				{
					tempXVMatrix=new common20sim::XVMatrix(C+index, rows, columns);
				}
				else if (boost::equals(container, "P"))
				{
					tempXVMatrix=new common20sim::XVMatrix(P+index, rows, columns);
				}
				else if (boost::equals(container, "I"))
				{
					tempXVMatrix=new common20sim::XVMatrix(I+index, rows, columns);
				}
				else if (boost::equals(container, "s"))
				{
					tempXVMatrix=new common20sim::XVMatrix(s+index, rows, columns);
				}
				else if (boost::equals(container, "R"))
				{
					tempXVMatrix=new common20sim::XVMatrix(R+index, rows, columns);
				}
				else if (boost::equals(container, "M"))
				{
					tempXVMatrix=new common20sim::XVMatrix(M[index]);
				}
				else if (boost::equals(container, "U"))
				{
					tempXVMatrix=new common20sim::XVMatrix(U+index, rows, columns);
				}
				else if (boost::equals(container, "workarray"))
				{
					tempXVMatrix=new common20sim::XVMatrix(workarray+index, rows, columns);
				}
				else
				{
					log(Debug) << "Processing : " << TSim_config_xml
					<< " Link to 20 sim variables incorrectly defined: "
					<< container << " The node will be not processed"
					<< endlog();
					continue;
				}

				log(Debug)<<"load matrix with parameters from xml"<<endlog();
				log(Debug)<<"Read from xml values: \t "<<value<<endlog();
				loadMatrixValue(value,tempXVMatrix);
				log(Debug)<<"Confirm from XVmatrix: \t "<<*tempXVMatrix<<endlog();
				log(Debug)<<"select the action based o kind of parameter"<<endlog();
				log(Debug)<<"select the action based o kind of parameter"<<endlog();

				if (boost::equals(kind, "parameter"))
				{
					// create port decorator
					//RTT::Property<RTT::types::carray<double> >* p_rttPort; //TODO: Fix me!

					Adapter20Sim<RTT::Property<RTT::types::carray<double> > > p_20simport(
							string(name), string(description), tempXVMatrix, NULL);

					// check if the property should be hierarchical folded
					RTT::PropertyBag* p_bag(NULL);
					p_bag = createHierarchicalPropertyBags(name);

					p_bag->addProperty(p_20simport.getShortName(), p_20simport.getLink()->getCArray());
					// save the link for updates
					propertyPorts.push_back(p_20simport);

				}
				else if (boost::equals(kind, "state"))
				{

				}
				else if (boost::equals(kind, "variable"))
				{
					//not implemented yet :)
					log(Debug)<<"Variables are not exhibited to out side of the component"<<endlog();
					// Recommend update is to show Interesting variables
				}
				else if (boost::equals(kind, "input"))
				{
					// create port decorator
					RTT::InputPort<flat_matrix_t> * p_rttPort = new RTT::InputPort<flat_matrix_t>;

					Adapter20Sim<RTT::InputPort<flat_matrix_t> > p_20simport(
							string(name), string(description), tempXVMatrix, p_rttPort);

					// create a port
					this->addPort(p_20simport.getFullName(), *p_rttPort).doc(
							p_20simport.getDescription());
					//save link for updates

					inputPorts.push_back(p_20simport);

				}
				else if (boost::equals(kind, "output"))
				{
					// create port decorator
					RTT::OutputPort<flat_matrix_t> * p_rttPort = new RTT::OutputPort<flat_matrix_t>;

					Adapter20Sim<RTT::OutputPort<flat_matrix_t> > p_20simport(
							string(name), string(description), tempXVMatrix, p_rttPort);

					// create a port
					this->addPort(p_20simport.getFullName(), *p_rttPort).doc(
							p_20simport.getDescription());

					outputPorts.push_back(p_20simport);

				}
				else
				{
					log(Debug) << TSim_config_xml << " token kind not recognized("
					<< kind << ")" << endlog();
					continue;
				}
				log(Debug) << "End of processing the tag" << endlog();
			}while ( (pElem = pElem->NextSiblingElement()) != NULL);
			log(Debug) << "End of processing the xml" << endlog();
		}
	}
	void interaction_control::loadMatrixValue(const char * input,XVMatrix *output)
	{

		std::size_t position=0;
		istringstream iss_input(input);

		do
		{
			std::string row;
			getline(iss_input,row,';');
			istringstream iss_row(row);

			do
			{
				std::string field;
				getline(iss_row,field,',');
				output->at(position)=atof(field.c_str());
				position++;
			}while(!iss_row.eof());

		}while(!iss_input.eof());
	}

	RTT::PropertyBag* interaction_control::createHierarchicalPropertyBags(const char * name)
	{
		using namespace boost;
		RTT::PropertyBag* p_bag(NULL);
		string cleaned_name;

		typedef split_iterator<const char*> ssi;
		ssi end;
		for (ssi it = make_split_iterator(name, first_finder("\\", is_iequal()));
				it != end;)
		{
			cleaned_name = replaceIllegalCharacter(
					copy_range<std::string>(*it));

			// Are we at the end already?
			if (++it == end)
			{
				break; // last name of the string is the name of the property.
			}

			if (p_bag == NULL)
			{
				RTT::Property<PropertyBag>* ppb = dynamic_cast<RTT::Property<
				PropertyBag>*>(this->getProperty(cleaned_name));
				if(ppb == NULL)
				{
					p_bag = new RTT::PropertyBag;
					this->addProperty(cleaned_name, *p_bag).doc("Submodel parameters");
				}
				else
				{
					p_bag = &(ppb->value());
				}
			}
			else
			{
				RTT::Property<PropertyBag>* ppb = dynamic_cast<RTT::Property<PropertyBag>*>(p_bag->getProperty(cleaned_name));
				RTT::PropertyBag* ptmp(NULL);
				if(ppb == NULL)
				{
					ptmp = new RTT::PropertyBag;
					p_bag->addProperty(cleaned_name, *ptmp).doc("Submodel parameters");
				}
				else
				{
					ptmp = &(ppb->value());
				}
				p_bag = ptmp;
			}
		}
		if (p_bag != NULL)
		{
			return p_bag;
		}
		else
		{
			return this->properties();

		}
	}
	void interaction_control::cleanupPropertyBags(RTT::PropertyBag* p)
	{
		RTT::PropertyBag::iterator it(p->begin());
		RTT::PropertyBag::iterator end(p->end());

		RTT::Property<PropertyBag>* ppb(NULL);

		for(;it != end; ++it)
		{
			ppb = dynamic_cast<RTT::Property<PropertyBag>*>(*it);

			if(ppb != NULL)
			{
				PropertyBag* ptmp = &(ppb->value());
				cleanupPropertyBags(ptmp);
				delete ptmp;
			}
		}
	}

	bool interaction_control::setPeriod(RTT::Seconds s)
	{
		if(TaskContext::setPeriod(s))
		{
			step_size = s;
			return true;
		}
		else
		{
			return false;
		}
	}
	bool interaction_control::initializeComputation()
	{
		start_time = 0.0;
		finish_time = 40.0;
		step_size = 0.001;
		time = 0;
		major = true;

		number_constants = 25;
		number_parameters = 260;
		number_initialvalues = 13;
		number_variables = 2084;
		number_states = 13;
		number_rates = 13;
		number_matrices = 418;
		number_unnamed = 3772;

		/* the variable arrays */
		C = new XXDouble[25 + 1]; /* constants */
		P = new XXDouble[260 + 1]; /* parameters, currently only one type of parameter exists: double */
		I = new XXDouble[13 + 1]; /* initial values */
		V = new XXDouble[2084 + 1]; /* variables */

		s = new XXDouble[13 + 1]; /* states */
		R = new XXDouble[13 + 1]; /* rates (or new states) */
		M = new XXMatrix[418 + 1]; /* matrices */
		U = new XXDouble[3772 + 1]; /* unnamed */
		workarray = new XXDouble[156 + 1];

		myintegmethod.Initialize(this);

		/* initialization phase (allocating memory) */
		initialize = true;

		//time = t;
			C[0] = 1.0;		/* CalculateJ\vx */
	C[1] = 0.0;		
	C[2] = 0.0;		
	C[3] = 0.0;		/* CalculateJ\vy */
	C[4] = 1.0;		
	C[5] = 0.0;		
	C[6] = 0.0;		/* CalculateJ\omegaz */
	C[7] = 0.0;		
	C[8] = 1.0;		
	C[9] = 0.0;		/* CalculateJ\omega1 */
	C[10] = 0.0;		
	C[11] = -1.0;		
	C[12] = 0.0;		/* CalculateJ\omega2 */
	C[13] = 1.0;		
	C[14] = 0.0;		
	C[15] = 0.0;		/* CalculateJ\omega3 */
	C[16] = 1.0;		
	C[17] = 0.0;		
	C[18] = 0.0;		/* CalculateJ\omega4 */
	C[19] = 1.0;		
	C[20] = 0.0;		
	C[21] = 0.0;		/* CalculateJ\omega5 */
	C[22] = 0.0;		
	C[23] = -1.0;		
	C[24] = 3.1415926535898;		/* pi {} */

		/* set the states */
			s[12] = I[12];		/* CartesianSpaceStiffness\optimizationCriteria */
	s[0] = I[0];		/* filter\s1y */
	s[1] = I[1];
	s[2] = I[2];
	s[3] = I[3];
	s[4] = I[4];
	s[5] = I[5];
	s[6] = I[6];		/* filter\y */
	s[7] = I[7];
	s[8] = I[8];
	s[9] = I[9];
	s[10] = I[10];
	s[11] = I[11];


		/* set the matrices */
			M[0].mat = &V[0];		/* CalculateJ\controllableJ */
	M[0].rows = 6;
	M[0].columns = 8;
	M[1].mat = &V[48];		/* CalculateJ\Htip0 */
	M[1].rows = 4;
	M[1].columns = 4;
	M[2].mat = &P[0];		/* CalculateJ\InitialJointPos */
	M[2].rows = 5;
	M[2].columns = 1;
	M[3].mat = &P[5];		/* CalculateJ\Linkdim */
	M[3].rows = 3;
	M[3].columns = 6;
	M[4].mat = &P[23];		/* CalculateJ\InitialBasePos */
	M[4].rows = 4;
	M[4].columns = 4;
	M[5].mat = &P[39];		/* CalculateJ\baseoffset */
	M[5].rows = 3;
	M[5].columns = 1;
	M[6].mat = &C[0];		/* CalculateJ\vx */
	M[6].rows = 3;
	M[6].columns = 1;
	M[7].mat = &C[3];		/* CalculateJ\vy */
	M[7].rows = 3;
	M[7].columns = 1;
	M[8].mat = &C[6];		/* CalculateJ\omegaz */
	M[8].rows = 3;
	M[8].columns = 1;
	M[9].mat = &C[9];		/* CalculateJ\omega1 */
	M[9].rows = 3;
	M[9].columns = 1;
	M[10].mat = &C[12];		/* CalculateJ\omega2 */
	M[10].rows = 3;
	M[10].columns = 1;
	M[11].mat = &C[15];		/* CalculateJ\omega3 */
	M[11].rows = 3;
	M[11].columns = 1;
	M[12].mat = &C[18];		/* CalculateJ\omega4 */
	M[12].rows = 3;
	M[12].columns = 1;
	M[13].mat = &C[21];		/* CalculateJ\omega5 */
	M[13].rows = 3;
	M[13].columns = 1;
	M[14].mat = &V[64];		/* CalculateJ\uTrzrefref */
	M[14].rows = 6;
	M[14].columns = 1;
	M[15].mat = &V[70];		/* CalculateJ\uTryrefref */
	M[15].rows = 6;
	M[15].columns = 1;
	M[16].mat = &V[76];		/* CalculateJ\uTrxrefref */
	M[16].rows = 6;
	M[16].columns = 1;
	M[17].mat = &V[82];		/* CalculateJ\uTr1refref */
	M[17].rows = 6;
	M[17].columns = 1;
	M[18].mat = &V[88];		/* CalculateJ\uTr211 */
	M[18].rows = 6;
	M[18].columns = 1;
	M[19].mat = &V[94];		/* CalculateJ\uTr322 */
	M[19].rows = 6;
	M[19].columns = 1;
	M[20].mat = &V[100];		/* CalculateJ\uTr433 */
	M[20].rows = 6;
	M[20].columns = 1;
	M[21].mat = &V[106];		/* CalculateJ\uTr544 */
	M[21].rows = 6;
	M[21].columns = 1;
	M[22].mat = &V[112];		/* CalculateJ\R1ref */
	M[22].rows = 3;
	M[22].columns = 3;
	M[23].mat = &V[121];		/* CalculateJ\R21 */
	M[23].rows = 3;
	M[23].columns = 3;
	M[24].mat = &V[130];		/* CalculateJ\R32 */
	M[24].rows = 3;
	M[24].columns = 3;
	M[25].mat = &V[139];		/* CalculateJ\R43 */
	M[25].rows = 3;
	M[25].columns = 3;
	M[26].mat = &V[148];		/* CalculateJ\R54 */
	M[26].rows = 3;
	M[26].columns = 3;
	M[27].mat = &V[157];		/* CalculateJ\Rtip5 */
	M[27].rows = 3;
	M[27].columns = 3;
	M[28].mat = &V[166];		/* CalculateJ\p1ref */
	M[28].rows = 3;
	M[28].columns = 1;
	M[29].mat = &V[169];		/* CalculateJ\p21 */
	M[29].rows = 3;
	M[29].columns = 1;
	M[30].mat = &V[172];		/* CalculateJ\p32 */
	M[30].rows = 3;
	M[30].columns = 1;
	M[31].mat = &V[175];		/* CalculateJ\p43 */
	M[31].rows = 3;
	M[31].columns = 1;
	M[32].mat = &V[178];		/* CalculateJ\p54 */
	M[32].rows = 3;
	M[32].columns = 1;
	M[33].mat = &V[181];		/* CalculateJ\ptip5 */
	M[33].rows = 3;
	M[33].columns = 1;
	M[34].mat = &V[184];		/* CalculateJ\Href0 */
	M[34].rows = 4;
	M[34].columns = 4;
	M[35].mat = &V[200];		/* CalculateJ\H1ref */
	M[35].rows = 4;
	M[35].columns = 4;
	M[36].mat = &V[216];		/* CalculateJ\H21 */
	M[36].rows = 4;
	M[36].columns = 4;
	M[37].mat = &V[232];		/* CalculateJ\H32 */
	M[37].rows = 4;
	M[37].columns = 4;
	M[38].mat = &V[248];		/* CalculateJ\H43 */
	M[38].rows = 4;
	M[38].columns = 4;
	M[39].mat = &V[264];		/* CalculateJ\H54 */
	M[39].rows = 4;
	M[39].columns = 4;
	M[40].mat = &V[280];		/* CalculateJ\Htip5 */
	M[40].rows = 4;
	M[40].columns = 4;
	M[41].mat = &V[296];		/* CalculateJ\H10 */
	M[41].rows = 4;
	M[41].columns = 4;
	M[42].mat = &V[312];		/* CalculateJ\H20 */
	M[42].rows = 4;
	M[42].columns = 4;
	M[43].mat = &V[328];		/* CalculateJ\H30 */
	M[43].rows = 4;
	M[43].columns = 4;
	M[44].mat = &V[344];		/* CalculateJ\H40 */
	M[44].rows = 4;
	M[44].columns = 4;
	M[45].mat = &V[360];		/* CalculateJ\H50 */
	M[45].rows = 4;
	M[45].columns = 4;
	M[46].mat = &V[376];		/* CalculateJ\base_offset_H */
	M[46].rows = 4;
	M[46].columns = 4;
	M[47].mat = &V[392];		/* CalculateJ\initialq */
	M[47].rows = 8;
	M[47].columns = 1;
	M[48].mat = &V[400];		/* CalculateJ\Rz */
	M[48].rows = 3;
	M[48].columns = 3;
	M[49].mat = &V[409];		/* CartesianSpaceStiffness\p.e */
	M[49].rows = 6;
	M[49].columns = 1;
	M[50].mat = &V[415];		/* CartesianSpaceStiffness\state */
	M[50].rows = 4;
	M[50].columns = 4;
	M[51].mat = &V[432];		/* CartesianSpaceStiffness\omega */
	M[51].rows = 3;
	M[51].columns = 1;
	M[52].mat = &V[435];		/* CartesianSpaceStiffness\Wr */
	M[52].rows = 6;
	M[52].columns = 1;
	M[53].mat = &V[441];		/* CartesianSpaceStiffness\Wt */
	M[53].rows = 6;
	M[53].columns = 1;
	M[54].mat = &V[449];		/* ControllableJ\joints.e */
	M[54].rows = 8;
	M[54].columns = 1;
	M[55].mat = &V[457];		/* ControllableJ\tip.f */
	M[55].rows = 6;
	M[55].columns = 1;
	M[56].mat = &V[463];		/* ControllableJ\substate */
	M[56].rows = 8;
	M[56].columns = 1;
	M[57].mat = &V[471];		/* DemuxHW1\base.e */
	M[57].rows = 3;
	M[57].columns = 1;
	M[58].mat = &V[474];		/* DemuxHW1\base.f */
	M[58].rows = 3;
	M[58].columns = 1;
	M[59].mat = &V[477];		/* DemuxHW1\control.f */
	M[59].rows = 8;
	M[59].columns = 1;
	M[60].mat = &V[485];		/* DemuxHW1\arm.e */
	M[60].rows = 5;
	M[60].columns = 1;
	M[61].mat = &V[490];		/* DemuxHW1\arm.f */
	M[61].rows = 5;
	M[61].columns = 1;
	M[62].mat = &V[495];		/* filter\u */
	M[62].rows = 6;
	M[62].columns = 1;
	M[63].mat = &V[502];		/* Gain\H */
	M[63].rows = 4;
	M[63].columns = 4;
	M[64].mat = &V[518];		/* Gain\Rz */
	M[64].rows = 3;
	M[64].columns = 3;
	M[65].mat = &V[527];		/* Gain\Ry */
	M[65].rows = 3;
	M[65].columns = 3;
	M[66].mat = &V[536];		/* Gain\Rx */
	M[66].rows = 3;
	M[66].columns = 3;
	M[67].mat = &V[545];		/* GravityCompensation1\Base\AdHi0\p1.f */
	M[67].rows = 6;
	M[67].columns = 1;
	M[68].mat = &V[551];		/* GravityCompensation1\Base\AdHi0\p2.e */
	M[68].rows = 6;
	M[68].columns = 1;
	M[69].mat = &V[557];		/* GravityCompensation1\Base\AdHi0\onlyRotH */
	M[69].rows = 4;
	M[69].columns = 4;
	M[70].mat = &V[573];		/* GravityCompensation1\Base\AdHij\p1.e */
	M[70].rows = 6;
	M[70].columns = 1;
	M[71].mat = &V[579];		/* GravityCompensation1\Base\AdHij\p2.f */
	M[71].rows = 6;
	M[71].columns = 1;
	M[72].mat = &V[585];		/* GravityCompensation1\Base\AdHik1\p1.e */
	M[72].rows = 6;
	M[72].columns = 1;
	M[73].mat = &V[591];		/* GravityCompensation1\Base\AdHik1\p2.f */
	M[73].rows = 6;
	M[73].columns = 1;
	M[74].mat = &P[46];		/* GravityCompensation1\Base\AdHik1\COMdim */
	M[74].rows = 3;
	M[74].columns = 1;
	M[75].mat = &V[597];		/* GravityCompensation1\Base\AdHik1\d */
	M[75].rows = 3;
	M[75].columns = 1;
	M[76].mat = &V[600];		/* GravityCompensation1\Base\AdHik1\R */
	M[76].rows = 3;
	M[76].columns = 3;
	M[77].mat = &V[609];		/* GravityCompensation1\Base\AdHik1\H */
	M[77].rows = 4;
	M[77].columns = 4;
	M[78].mat = &V[625];		/* GravityCompensation1\Base\AdHik1\AdH */
	M[78].rows = 6;
	M[78].columns = 6;
	M[79].mat = &V[661];		/* GravityCompensation1\Base\Gravity\effort */
	M[79].rows = 6;
	M[79].columns = 1;
	M[80].mat = &V[667];		/* GravityCompensation1\Base\Hij\output */
	M[80].rows = 4;
	M[80].columns = 4;
	M[81].mat = &V[683];		/* GravityCompensation1\Base\Hij\Hab */
	M[81].rows = 4;
	M[81].columns = 4;
	M[82].mat = &P[50];		/* GravityCompensation1\Base\Hij\dim */
	M[82].rows = 3;
	M[82].columns = 1;
	M[83].mat = &V[699];		/* GravityCompensation1\Base\Ta0i\p2.e */
	M[83].rows = 6;
	M[83].columns = 1;
	M[84].mat = &P[54];		/* GravityCompensation1\Base\COMdim */
	M[84].rows = 3;
	M[84].columns = 1;
	M[85].mat = &P[57];		/* GravityCompensation1\Base\dim */
	M[85].rows = 3;
	M[85].columns = 1;
	M[86].mat = &V[705];		/* GravityCompensation1\Hfloor0\output */
	M[86].rows = 4;
	M[86].columns = 4;
	M[87].mat = &V[721];		/* GravityCompensation1\Joint12\AdHji\p1.e */
	M[87].rows = 6;
	M[87].columns = 1;
	M[88].mat = &V[727];		/* GravityCompensation1\Joint12\AdHji\p2.f */
	M[88].rows = 6;
	M[88].columns = 1;
	M[89].mat = &V[733];		/* GravityCompensation1\Joint12\Integrate\output */
	M[89].rows = 4;
	M[89].columns = 4;
	M[90].mat = &V[749];		/* GravityCompensation1\Joint12\Integrate\R */
	M[90].rows = 3;
	M[90].columns = 3;
	M[91].mat = &V[758];		/* GravityCompensation1\Joint12\Integrate\p */
	M[91].rows = 3;
	M[91].columns = 1;
	M[92].mat = &V[761];		/* GravityCompensation1\Joint12\MatrixMul\output */
	M[92].rows = 4;
	M[92].columns = 4;
	M[93].mat = &V[778];		/* GravityCompensation1\Joint12\uTbai\p2.f */
	M[93].rows = 6;
	M[93].columns = 1;
	M[94].mat = &V[784];		/* GravityCompensation1\Joint12\Wbai\p3.f */
	M[94].rows = 6;
	M[94].columns = 1;
	M[95].mat = &V[790];		/* GravityCompensation1\Joint23\AdHji\p1.e */
	M[95].rows = 6;
	M[95].columns = 1;
	M[96].mat = &V[796];		/* GravityCompensation1\Joint23\AdHji\p2.f */
	M[96].rows = 6;
	M[96].columns = 1;
	M[97].mat = &V[802];		/* GravityCompensation1\Joint23\Integrate\output */
	M[97].rows = 4;
	M[97].columns = 4;
	M[98].mat = &V[818];		/* GravityCompensation1\Joint23\Integrate\R */
	M[98].rows = 3;
	M[98].columns = 3;
	M[99].mat = &V[827];		/* GravityCompensation1\Joint23\Integrate\p */
	M[99].rows = 3;
	M[99].columns = 1;
	M[100].mat = &V[830];		/* GravityCompensation1\Joint23\MatrixMul\output */
	M[100].rows = 4;
	M[100].columns = 4;
	M[101].mat = &V[847];		/* GravityCompensation1\Joint23\uTbai\p2.f */
	M[101].rows = 6;
	M[101].columns = 1;
	M[102].mat = &V[853];		/* GravityCompensation1\Joint23\Wbai\p3.f */
	M[102].rows = 6;
	M[102].columns = 1;
	M[103].mat = &V[859];		/* GravityCompensation1\Joint34\AdHji\p1.e */
	M[103].rows = 6;
	M[103].columns = 1;
	M[104].mat = &V[865];		/* GravityCompensation1\Joint34\AdHji\p2.f */
	M[104].rows = 6;
	M[104].columns = 1;
	M[105].mat = &V[871];		/* GravityCompensation1\Joint34\Integrate\output */
	M[105].rows = 4;
	M[105].columns = 4;
	M[106].mat = &V[887];		/* GravityCompensation1\Joint34\Integrate\R */
	M[106].rows = 3;
	M[106].columns = 3;
	M[107].mat = &V[896];		/* GravityCompensation1\Joint34\Integrate\p */
	M[107].rows = 3;
	M[107].columns = 1;
	M[108].mat = &V[899];		/* GravityCompensation1\Joint34\MatrixMul\output */
	M[108].rows = 4;
	M[108].columns = 4;
	M[109].mat = &V[916];		/* GravityCompensation1\Joint34\uTbai\p2.f */
	M[109].rows = 6;
	M[109].columns = 1;
	M[110].mat = &V[922];		/* GravityCompensation1\Joint34\Wbai\p3.f */
	M[110].rows = 6;
	M[110].columns = 1;
	M[111].mat = &V[928];		/* GravityCompensation1\Joint45\AdHji\p1.e */
	M[111].rows = 6;
	M[111].columns = 1;
	M[112].mat = &V[934];		/* GravityCompensation1\Joint45\AdHji\p2.f */
	M[112].rows = 6;
	M[112].columns = 1;
	M[113].mat = &V[940];		/* GravityCompensation1\Joint45\Integrate\output */
	M[113].rows = 4;
	M[113].columns = 4;
	M[114].mat = &V[956];		/* GravityCompensation1\Joint45\Integrate\R */
	M[114].rows = 3;
	M[114].columns = 3;
	M[115].mat = &V[965];		/* GravityCompensation1\Joint45\Integrate\p */
	M[115].rows = 3;
	M[115].columns = 1;
	M[116].mat = &V[968];		/* GravityCompensation1\Joint45\MatrixMul\output */
	M[116].rows = 4;
	M[116].columns = 4;
	M[117].mat = &V[985];		/* GravityCompensation1\Joint45\uTbai\p2.f */
	M[117].rows = 6;
	M[117].columns = 1;
	M[118].mat = &V[991];		/* GravityCompensation1\Joint45\Wbai\p1.f */
	M[118].rows = 6;
	M[118].columns = 1;
	M[119].mat = &V[997];		/* GravityCompensation1\JointBase1\AdHji\p1.e */
	M[119].rows = 6;
	M[119].columns = 1;
	M[120].mat = &V[1003];		/* GravityCompensation1\JointBase1\AdHji\p2.f */
	M[120].rows = 6;
	M[120].columns = 1;
	M[121].mat = &V[1009];		/* GravityCompensation1\JointBase1\Integrate\output */
	M[121].rows = 4;
	M[121].columns = 4;
	M[122].mat = &V[1025];		/* GravityCompensation1\JointBase1\Integrate\R */
	M[122].rows = 3;
	M[122].columns = 3;
	M[123].mat = &V[1034];		/* GravityCompensation1\JointBase1\Integrate\p */
	M[123].rows = 3;
	M[123].columns = 1;
	M[124].mat = &V[1037];		/* GravityCompensation1\JointBase1\MatrixMul\output */
	M[124].rows = 4;
	M[124].columns = 4;
	M[125].mat = &V[1054];		/* GravityCompensation1\JointBase1\uTbai\p2.f */
	M[125].rows = 6;
	M[125].columns = 1;
	M[126].mat = &V[1060];		/* GravityCompensation1\JointBase1\Wbai\p1.f */
	M[126].rows = 6;
	M[126].columns = 1;
	M[127].mat = &V[1066];		/* GravityCompensation1\Link1\AdHi0\p1.f */
	M[127].rows = 6;
	M[127].columns = 1;
	M[128].mat = &V[1072];		/* GravityCompensation1\Link1\AdHi0\p2.e */
	M[128].rows = 6;
	M[128].columns = 1;
	M[129].mat = &V[1078];		/* GravityCompensation1\Link1\AdHi0\onlyRotH */
	M[129].rows = 4;
	M[129].columns = 4;
	M[130].mat = &V[1094];		/* GravityCompensation1\Link1\AdHij\p1.e */
	M[130].rows = 6;
	M[130].columns = 1;
	M[131].mat = &V[1100];		/* GravityCompensation1\Link1\AdHij\p2.f */
	M[131].rows = 6;
	M[131].columns = 1;
	M[132].mat = &V[1106];		/* GravityCompensation1\Link1\AdHik1\p1.e */
	M[132].rows = 6;
	M[132].columns = 1;
	M[133].mat = &V[1112];		/* GravityCompensation1\Link1\AdHik1\p2.f */
	M[133].rows = 6;
	M[133].columns = 1;
	M[134].mat = &P[70];		/* GravityCompensation1\Link1\AdHik1\COMdim */
	M[134].rows = 3;
	M[134].columns = 1;
	M[135].mat = &V[1118];		/* GravityCompensation1\Link1\AdHik1\d */
	M[135].rows = 3;
	M[135].columns = 1;
	M[136].mat = &V[1121];		/* GravityCompensation1\Link1\AdHik1\R */
	M[136].rows = 3;
	M[136].columns = 3;
	M[137].mat = &V[1130];		/* GravityCompensation1\Link1\AdHik1\H */
	M[137].rows = 4;
	M[137].columns = 4;
	M[138].mat = &V[1146];		/* GravityCompensation1\Link1\AdHik1\AdH */
	M[138].rows = 6;
	M[138].columns = 6;
	M[139].mat = &V[1182];		/* GravityCompensation1\Link1\Gravity\effort */
	M[139].rows = 6;
	M[139].columns = 1;
	M[140].mat = &V[1188];		/* GravityCompensation1\Link1\Hij\output */
	M[140].rows = 4;
	M[140].columns = 4;
	M[141].mat = &V[1204];		/* GravityCompensation1\Link1\Hij\Hab */
	M[141].rows = 4;
	M[141].columns = 4;
	M[142].mat = &P[74];		/* GravityCompensation1\Link1\Hij\dim */
	M[142].rows = 3;
	M[142].columns = 1;
	M[143].mat = &V[1220];		/* GravityCompensation1\Link1\Ta0i\p2.e */
	M[143].rows = 6;
	M[143].columns = 1;
	M[144].mat = &P[78];		/* GravityCompensation1\Link1\COMdim */
	M[144].rows = 3;
	M[144].columns = 1;
	M[145].mat = &P[81];		/* GravityCompensation1\Link1\dim */
	M[145].rows = 3;
	M[145].columns = 1;
	M[146].mat = &V[1226];		/* GravityCompensation1\Link2\AdHi0\p1.f */
	M[146].rows = 6;
	M[146].columns = 1;
	M[147].mat = &V[1232];		/* GravityCompensation1\Link2\AdHi0\p2.e */
	M[147].rows = 6;
	M[147].columns = 1;
	M[148].mat = &V[1238];		/* GravityCompensation1\Link2\AdHi0\onlyRotH */
	M[148].rows = 4;
	M[148].columns = 4;
	M[149].mat = &V[1254];		/* GravityCompensation1\Link2\AdHij\p1.e */
	M[149].rows = 6;
	M[149].columns = 1;
	M[150].mat = &V[1260];		/* GravityCompensation1\Link2\AdHij\p2.f */
	M[150].rows = 6;
	M[150].columns = 1;
	M[151].mat = &V[1266];		/* GravityCompensation1\Link2\AdHik1\p1.e */
	M[151].rows = 6;
	M[151].columns = 1;
	M[152].mat = &V[1272];		/* GravityCompensation1\Link2\AdHik1\p2.f */
	M[152].rows = 6;
	M[152].columns = 1;
	M[153].mat = &P[84];		/* GravityCompensation1\Link2\AdHik1\COMdim */
	M[153].rows = 3;
	M[153].columns = 1;
	M[154].mat = &V[1278];		/* GravityCompensation1\Link2\AdHik1\d */
	M[154].rows = 3;
	M[154].columns = 1;
	M[155].mat = &V[1281];		/* GravityCompensation1\Link2\AdHik1\R */
	M[155].rows = 3;
	M[155].columns = 3;
	M[156].mat = &V[1290];		/* GravityCompensation1\Link2\AdHik1\H */
	M[156].rows = 4;
	M[156].columns = 4;
	M[157].mat = &V[1306];		/* GravityCompensation1\Link2\AdHik1\AdH */
	M[157].rows = 6;
	M[157].columns = 6;
	M[158].mat = &V[1342];		/* GravityCompensation1\Link2\Gravity\effort */
	M[158].rows = 6;
	M[158].columns = 1;
	M[159].mat = &V[1348];		/* GravityCompensation1\Link2\Hij\output */
	M[159].rows = 4;
	M[159].columns = 4;
	M[160].mat = &V[1364];		/* GravityCompensation1\Link2\Hij\Hab */
	M[160].rows = 4;
	M[160].columns = 4;
	M[161].mat = &P[88];		/* GravityCompensation1\Link2\Hij\dim */
	M[161].rows = 3;
	M[161].columns = 1;
	M[162].mat = &V[1380];		/* GravityCompensation1\Link2\Ta0i\p2.e */
	M[162].rows = 6;
	M[162].columns = 1;
	M[163].mat = &P[92];		/* GravityCompensation1\Link2\COMdim */
	M[163].rows = 3;
	M[163].columns = 1;
	M[164].mat = &P[95];		/* GravityCompensation1\Link2\dim */
	M[164].rows = 3;
	M[164].columns = 1;
	M[165].mat = &V[1386];		/* GravityCompensation1\Link3\AdHi0\p1.f */
	M[165].rows = 6;
	M[165].columns = 1;
	M[166].mat = &V[1392];		/* GravityCompensation1\Link3\AdHi0\p2.e */
	M[166].rows = 6;
	M[166].columns = 1;
	M[167].mat = &V[1398];		/* GravityCompensation1\Link3\AdHi0\onlyRotH */
	M[167].rows = 4;
	M[167].columns = 4;
	M[168].mat = &V[1414];		/* GravityCompensation1\Link3\AdHij\p1.e */
	M[168].rows = 6;
	M[168].columns = 1;
	M[169].mat = &V[1420];		/* GravityCompensation1\Link3\AdHij\p2.f */
	M[169].rows = 6;
	M[169].columns = 1;
	M[170].mat = &V[1426];		/* GravityCompensation1\Link3\AdHik1\p1.e */
	M[170].rows = 6;
	M[170].columns = 1;
	M[171].mat = &V[1432];		/* GravityCompensation1\Link3\AdHik1\p2.f */
	M[171].rows = 6;
	M[171].columns = 1;
	M[172].mat = &P[98];		/* GravityCompensation1\Link3\AdHik1\COMdim */
	M[172].rows = 3;
	M[172].columns = 1;
	M[173].mat = &V[1438];		/* GravityCompensation1\Link3\AdHik1\d */
	M[173].rows = 3;
	M[173].columns = 1;
	M[174].mat = &V[1441];		/* GravityCompensation1\Link3\AdHik1\R */
	M[174].rows = 3;
	M[174].columns = 3;
	M[175].mat = &V[1450];		/* GravityCompensation1\Link3\AdHik1\H */
	M[175].rows = 4;
	M[175].columns = 4;
	M[176].mat = &V[1466];		/* GravityCompensation1\Link3\AdHik1\AdH */
	M[176].rows = 6;
	M[176].columns = 6;
	M[177].mat = &V[1502];		/* GravityCompensation1\Link3\Gravity\effort */
	M[177].rows = 6;
	M[177].columns = 1;
	M[178].mat = &V[1508];		/* GravityCompensation1\Link3\Hij\output */
	M[178].rows = 4;
	M[178].columns = 4;
	M[179].mat = &V[1524];		/* GravityCompensation1\Link3\Hij\Hab */
	M[179].rows = 4;
	M[179].columns = 4;
	M[180].mat = &P[102];		/* GravityCompensation1\Link3\Hij\dim */
	M[180].rows = 3;
	M[180].columns = 1;
	M[181].mat = &V[1540];		/* GravityCompensation1\Link3\Ta0i\p2.e */
	M[181].rows = 6;
	M[181].columns = 1;
	M[182].mat = &P[106];		/* GravityCompensation1\Link3\COMdim */
	M[182].rows = 3;
	M[182].columns = 1;
	M[183].mat = &P[109];		/* GravityCompensation1\Link3\dim */
	M[183].rows = 3;
	M[183].columns = 1;
	M[184].mat = &V[1546];		/* GravityCompensation1\Link4\AdHi0\p1.f */
	M[184].rows = 6;
	M[184].columns = 1;
	M[185].mat = &V[1552];		/* GravityCompensation1\Link4\AdHi0\p2.e */
	M[185].rows = 6;
	M[185].columns = 1;
	M[186].mat = &V[1558];		/* GravityCompensation1\Link4\AdHi0\onlyRotH */
	M[186].rows = 4;
	M[186].columns = 4;
	M[187].mat = &V[1574];		/* GravityCompensation1\Link4\AdHij\p1.e */
	M[187].rows = 6;
	M[187].columns = 1;
	M[188].mat = &V[1580];		/* GravityCompensation1\Link4\AdHij\p2.f */
	M[188].rows = 6;
	M[188].columns = 1;
	M[189].mat = &V[1586];		/* GravityCompensation1\Link4\AdHik1\p1.e */
	M[189].rows = 6;
	M[189].columns = 1;
	M[190].mat = &V[1592];		/* GravityCompensation1\Link4\AdHik1\p2.f */
	M[190].rows = 6;
	M[190].columns = 1;
	M[191].mat = &P[112];		/* GravityCompensation1\Link4\AdHik1\COMdim */
	M[191].rows = 3;
	M[191].columns = 1;
	M[192].mat = &V[1598];		/* GravityCompensation1\Link4\AdHik1\d */
	M[192].rows = 3;
	M[192].columns = 1;
	M[193].mat = &V[1601];		/* GravityCompensation1\Link4\AdHik1\R */
	M[193].rows = 3;
	M[193].columns = 3;
	M[194].mat = &V[1610];		/* GravityCompensation1\Link4\AdHik1\H */
	M[194].rows = 4;
	M[194].columns = 4;
	M[195].mat = &V[1626];		/* GravityCompensation1\Link4\AdHik1\AdH */
	M[195].rows = 6;
	M[195].columns = 6;
	M[196].mat = &V[1662];		/* GravityCompensation1\Link4\Gravity\effort */
	M[196].rows = 6;
	M[196].columns = 1;
	M[197].mat = &V[1668];		/* GravityCompensation1\Link4\Hij\output */
	M[197].rows = 4;
	M[197].columns = 4;
	M[198].mat = &V[1684];		/* GravityCompensation1\Link4\Hij\Hab */
	M[198].rows = 4;
	M[198].columns = 4;
	M[199].mat = &P[116];		/* GravityCompensation1\Link4\Hij\dim */
	M[199].rows = 3;
	M[199].columns = 1;
	M[200].mat = &V[1700];		/* GravityCompensation1\Link4\Ta0i\p2.e */
	M[200].rows = 6;
	M[200].columns = 1;
	M[201].mat = &P[120];		/* GravityCompensation1\Link4\COMdim */
	M[201].rows = 3;
	M[201].columns = 1;
	M[202].mat = &P[123];		/* GravityCompensation1\Link4\dim */
	M[202].rows = 3;
	M[202].columns = 1;
	M[203].mat = &V[1706];		/* GravityCompensation1\Link5\AdHi0\p1.f */
	M[203].rows = 6;
	M[203].columns = 1;
	M[204].mat = &V[1712];		/* GravityCompensation1\Link5\AdHi0\p2.e */
	M[204].rows = 6;
	M[204].columns = 1;
	M[205].mat = &V[1718];		/* GravityCompensation1\Link5\AdHi0\onlyRotH */
	M[205].rows = 4;
	M[205].columns = 4;
	M[206].mat = &V[1734];		/* GravityCompensation1\Link5\AdHij\p1.e */
	M[206].rows = 6;
	M[206].columns = 1;
	M[207].mat = &V[1740];		/* GravityCompensation1\Link5\AdHij\p2.f */
	M[207].rows = 6;
	M[207].columns = 1;
	M[208].mat = &V[1746];		/* GravityCompensation1\Link5\AdHik1\p1.e */
	M[208].rows = 6;
	M[208].columns = 1;
	M[209].mat = &V[1752];		/* GravityCompensation1\Link5\AdHik1\p2.f */
	M[209].rows = 6;
	M[209].columns = 1;
	M[210].mat = &P[126];		/* GravityCompensation1\Link5\AdHik1\COMdim */
	M[210].rows = 3;
	M[210].columns = 1;
	M[211].mat = &V[1758];		/* GravityCompensation1\Link5\AdHik1\d */
	M[211].rows = 3;
	M[211].columns = 1;
	M[212].mat = &V[1761];		/* GravityCompensation1\Link5\AdHik1\R */
	M[212].rows = 3;
	M[212].columns = 3;
	M[213].mat = &V[1770];		/* GravityCompensation1\Link5\AdHik1\H */
	M[213].rows = 4;
	M[213].columns = 4;
	M[214].mat = &V[1786];		/* GravityCompensation1\Link5\AdHik1\AdH */
	M[214].rows = 6;
	M[214].columns = 6;
	M[215].mat = &V[1822];		/* GravityCompensation1\Link5\Gravity\effort */
	M[215].rows = 6;
	M[215].columns = 1;
	M[216].mat = &V[1828];		/* GravityCompensation1\Link5\Hij\output */
	M[216].rows = 4;
	M[216].columns = 4;
	M[217].mat = &V[1844];		/* GravityCompensation1\Link5\Hij\Hab */
	M[217].rows = 4;
	M[217].columns = 4;
	M[218].mat = &P[130];		/* GravityCompensation1\Link5\Hij\dim */
	M[218].rows = 3;
	M[218].columns = 1;
	M[219].mat = &V[1860];		/* GravityCompensation1\Link5\Ta0i\p2.e */
	M[219].rows = 6;
	M[219].columns = 1;
	M[220].mat = &P[134];		/* GravityCompensation1\Link5\COMdim */
	M[220].rows = 3;
	M[220].columns = 1;
	M[221].mat = &P[137];		/* GravityCompensation1\Link5\dim */
	M[221].rows = 3;
	M[221].columns = 1;
	M[222].mat = &V[1866];		/* GravityCompensation1\Mux\port.e */
	M[222].rows = 8;
	M[222].columns = 1;
	M[223].mat = &V[1884];		/* GravityCompensation1\Wtip0\p.e */
	M[223].rows = 6;
	M[223].columns = 1;
	M[224].mat = &V[1890];		/* GravityCompensation1\ZeroJunction\p1.f */
	M[224].rows = 6;
	M[224].columns = 1;
	M[225].mat = &P[142];		/* GravityCompensation1\InitialJointPos */
	M[225].rows = 5;
	M[225].columns = 1;
	M[226].mat = &P[147];		/* GravityCompensation1\LinkCOMdim */
	M[226].rows = 3;
	M[226].columns = 6;
	M[227].mat = &P[165];		/* GravityCompensation1\Linkdim */
	M[227].rows = 3;
	M[227].columns = 6;
	M[228].mat = &P[183];		/* GravityCompensation1\Linkm */
	M[228].rows = 6;
	M[228].columns = 1;
	M[229].mat = &V[1896];		/* JointSoftLimits\p.e */
	M[229].rows = 8;
	M[229].columns = 1;
	M[230].mat = &P[189];		/* JointSoftLimits\c */
	M[230].rows = 8;
	M[230].columns = 1;
	M[231].mat = &P[197];		/* JointSoftLimits\limits_low */
	M[231].rows = 8;
	M[231].columns = 1;
	M[232].mat = &P[205];		/* JointSoftLimits\limits_high */
	M[232].rows = 8;
	M[232].columns = 1;
	M[233].mat = &V[1904];		/* JointSoftLimits\substate */
	M[233].rows = 8;
	M[233].columns = 1;
	M[234].mat = &V[1912];		/* JointSoftLimits\angle_limits_low */
	M[234].rows = 8;
	M[234].columns = 1;
	M[235].mat = &V[1920];		/* JointSoftLimits\angle_limits_high */
	M[235].rows = 8;
	M[235].columns = 1;
	M[236].mat = &V[1928];		/* JointSpaceDamping\p.e */
	M[236].rows = 8;
	M[236].columns = 1;
	M[237].mat = &P[214];		/* JointSpaceDamping\r */
	M[237].rows = 8;
	M[237].columns = 1;
	M[238].mat = &P[222];		/* JointSpaceDamping\p_deadzone */
	M[238].rows = 8;
	M[238].columns = 1;
	M[239].mat = &P[230];		/* JointSpaceDamping\n_deadzone */
	M[239].rows = 8;
	M[239].columns = 1;
	M[240].mat = &V[1936];		/* JointSpaceDamping\R */
	M[240].rows = 8;
	M[240].columns = 8;
	M[241].mat = &V[2000];		/* JointSpaceDamping\substate */
	M[241].rows = 8;
	M[241].columns = 1;
	M[242].mat = &V[2008];		/* JointSpaceStiffness\joints.e */
	M[242].rows = 8;
	M[242].columns = 1;
	M[243].mat = &P[238];		/* JointSpaceStiffness\c */
	M[243].rows = 8;
	M[243].columns = 1;
	M[244].mat = &P[246];		/* JointSpaceStiffness\setpoints */
	M[244].rows = 8;
	M[244].columns = 1;
	M[245].mat = &V[2016];		/* JointSpaceStiffness\substate */
	M[245].rows = 8;
	M[245].columns = 1;
	M[246].mat = &V[2024];		/* MuxToControl1\control */
	M[246].rows = 8;
	M[246].columns = 1;
	M[247].mat = &V[2032];		/* MuxToControl1\arm */
	M[247].rows = 5;
	M[247].columns = 1;
	M[248].mat = &V[2037];		/* MuxToControl1\base */
	M[248].rows = 3;
	M[248].columns = 1;
	M[249].mat = &P[255];		/* MuxToControl1\zero_angles */
	M[249].rows = 5;
	M[249].columns = 1;
	M[250].mat = &V[2040];		/* OneJunction\p2.e */
	M[250].rows = 6;
	M[250].columns = 1;
	M[251].mat = &V[2046];		/* OneJunction2\p4.e */
	M[251].rows = 8;
	M[251].columns = 1;
	M[252].mat = &V[2054];		/* bond_to_arm.T */
	M[252].rows = 5;
	M[252].columns = 1;
	M[253].mat = &V[2059];		/* bond_to_arm.omega */
	M[253].rows = 5;
	M[253].columns = 1;
	M[254].mat = &V[2064];		/* bond_to_base.F */
	M[254].rows = 3;
	M[254].columns = 1;
	M[255].mat = &V[2067];		/* bond_to_base.v */
	M[255].rows = 3;
	M[255].columns = 1;
	M[256].mat = &V[2070];		/* measured_angles_arm */
	M[256].rows = 5;
	M[256].columns = 1;
	M[257].mat = &V[2075];		/* xyzypr */
	M[257].rows = 6;
	M[257].columns = 1;
	M[258].mat = &V[2081];		/* odometry_base */
	M[258].rows = 3;
	M[258].columns = 1;
	M[259].mat = &R[0];		/* filter\s2y */
	M[259].rows = 6;
	M[259].columns = 1;
	M[260].mat = &I[0];		/* filter\s1y_initial */
	M[260].rows = 6;
	M[260].columns = 1;
	M[261].mat = &s[0];		/* filter\s1y */
	M[261].rows = 6;
	M[261].columns = 1;
	M[262].mat = &s[6];		/* filter\y */
	M[262].rows = 6;
	M[262].columns = 1;
	M[263].mat = &I[6];		/* filter\initPos */
	M[263].rows = 6;
	M[263].columns = 1;
	M[264].mat = &U[0];		/* U1 */
	M[264].rows = 3;
	M[264].columns = 3;
	M[265].mat = &U[9];		/* U2 */
	M[265].rows = 3;
	M[265].columns = 1;
	M[266].mat = &U[12];		/* U3 */
	M[266].rows = 3;
	M[266].columns = 3;
	M[267].mat = &U[21];		/* U4 */
	M[267].rows = 3;
	M[267].columns = 1;
	M[268].mat = &U[24];		/* U5 */
	M[268].rows = 3;
	M[268].columns = 1;
	M[269].mat = &U[27];		/* U6 */
	M[269].rows = 3;
	M[269].columns = 3;
	M[270].mat = &U[36];		/* U7 */
	M[270].rows = 3;
	M[270].columns = 1;
	M[271].mat = &U[39];		/* U8 */
	M[271].rows = 3;
	M[271].columns = 1;
	M[272].mat = &U[42];		/* U9 */
	M[272].rows = 3;
	M[272].columns = 3;
	M[273].mat = &U[51];		/* U10 */
	M[273].rows = 3;
	M[273].columns = 1;
	M[274].mat = &U[54];		/* U11 */
	M[274].rows = 3;
	M[274].columns = 1;
	M[275].mat = &U[57];		/* U12 */
	M[275].rows = 3;
	M[275].columns = 3;
	M[276].mat = &U[66];		/* U13 */
	M[276].rows = 3;
	M[276].columns = 1;
	M[277].mat = &U[69];		/* U14 */
	M[277].rows = 3;
	M[277].columns = 1;
	M[278].mat = &U[72];		/* U15 */
	M[278].rows = 3;
	M[278].columns = 3;
	M[279].mat = &U[81];		/* U16 */
	M[279].rows = 3;
	M[279].columns = 1;
	M[280].mat = &U[84];		/* U17 */
	M[280].rows = 3;
	M[280].columns = 3;
	M[281].mat = &U[93];		/* U18 */
	M[281].rows = 3;
	M[281].columns = 3;
	M[282].mat = &U[102];		/* U19 */
	M[282].rows = 3;
	M[282].columns = 3;
	M[283].mat = &U[111];		/* U20 */
	M[283].rows = 3;
	M[283].columns = 3;
	M[284].mat = &U[120];		/* U21 */
	M[284].rows = 3;
	M[284].columns = 3;
	M[285].mat = &U[129];		/* U22 */
	M[285].rows = 3;
	M[285].columns = 3;
	M[286].mat = &U[138];		/* U23 */
	M[286].rows = 6;
	M[286].columns = 6;
	M[287].mat = &U[174];		/* U24 */
	M[287].rows = 6;
	M[287].columns = 6;
	M[288].mat = &U[210];		/* U25 */
	M[288].rows = 6;
	M[288].columns = 6;
	M[289].mat = &U[246];		/* U26 */
	M[289].rows = 6;
	M[289].columns = 6;
	M[290].mat = &U[282];		/* U27 */
	M[290].rows = 6;
	M[290].columns = 1;
	M[291].mat = &U[288];		/* U28 */
	M[291].rows = 6;
	M[291].columns = 1;
	M[292].mat = &U[294];		/* U29 */
	M[292].rows = 6;
	M[292].columns = 1;
	M[293].mat = &U[300];		/* U30 */
	M[293].rows = 3;
	M[293].columns = 3;
	M[294].mat = &U[309];		/* U31 */
	M[294].rows = 3;
	M[294].columns = 3;
	M[295].mat = &U[318];		/* U32 */
	M[295].rows = 3;
	M[295].columns = 1;
	M[296].mat = &U[321];		/* U33 */
	M[296].rows = 5;
	M[296].columns = 1;
	M[297].mat = &U[326];		/* U34 */
	M[297].rows = 5;
	M[297].columns = 1;
	M[298].mat = &U[331];		/* U35 */
	M[298].rows = 5;
	M[298].columns = 1;
	M[299].mat = &U[336];		/* U36 */
	M[299].rows = 4;
	M[299].columns = 4;
	M[300].mat = &U[352];		/* U37 */
	M[300].rows = 3;
	M[300].columns = 1;
	M[301].mat = &U[355];		/* U38 */
	M[301].rows = 6;
	M[301].columns = 1;
	M[302].mat = &U[361];		/* U39 */
	M[302].rows = 6;
	M[302].columns = 6;
	M[303].mat = &U[397];		/* U40 */
	M[303].rows = 6;
	M[303].columns = 1;
	M[304].mat = &U[403];		/* U41 */
	M[304].rows = 6;
	M[304].columns = 6;
	M[305].mat = &U[439];		/* U42 */
	M[305].rows = 6;
	M[305].columns = 1;
	M[306].mat = &U[445];		/* U43 */
	M[306].rows = 6;
	M[306].columns = 6;
	M[307].mat = &U[481];		/* U44 */
	M[307].rows = 6;
	M[307].columns = 1;
	M[308].mat = &U[487];		/* U45 */
	M[308].rows = 6;
	M[308].columns = 6;
	M[309].mat = &U[523];		/* U46 */
	M[309].rows = 6;
	M[309].columns = 1;
	M[310].mat = &U[529];		/* U47 */
	M[310].rows = 6;
	M[310].columns = 6;
	M[311].mat = &U[565];		/* U48 */
	M[311].rows = 6;
	M[311].columns = 1;
	M[312].mat = &U[571];		/* U49 */
	M[312].rows = 6;
	M[312].columns = 6;
	M[313].mat = &U[607];		/* U50 */
	M[313].rows = 6;
	M[313].columns = 1;
	M[314].mat = &U[613];		/* U51 */
	M[314].rows = 6;
	M[314].columns = 6;
	M[315].mat = &U[649];		/* U52 */
	M[315].rows = 6;
	M[315].columns = 1;
	M[316].mat = &U[655];		/* U53 */
	M[316].rows = 6;
	M[316].columns = 6;
	M[317].mat = &U[691];		/* U54 */
	M[317].rows = 8;
	M[317].columns = 8;
	M[318].mat = &U[755];		/* U55 */
	M[318].rows = 8;
	M[318].columns = 8;
	M[319].mat = &U[819];		/* U56 */
	M[319].rows = 8;
	M[319].columns = 1;
	M[320].mat = &U[827];		/* U57 */
	M[320].rows = 4;
	M[320].columns = 4;
	M[321].mat = &U[843];		/* U58 */
	M[321].rows = 1;
	M[321].columns = 1;
	M[322].mat = &U[844];		/* U59 */
	M[322].rows = 3;
	M[322].columns = 3;
	M[323].mat = &U[853];		/* U60 */
	M[323].rows = 1;
	M[323].columns = 1;
	M[324].mat = &U[854];		/* U61 */
	M[324].rows = 1;
	M[324].columns = 1;
	M[325].mat = &U[855];		/* U62 */
	M[325].rows = 3;
	M[325].columns = 1;
	M[326].mat = &U[858];		/* U63 */
	M[326].rows = 3;
	M[326].columns = 1;
	M[327].mat = &U[861];		/* U64 */
	M[327].rows = 3;
	M[327].columns = 1;
	M[328].mat = &U[864];		/* U65 */
	M[328].rows = 1;
	M[328].columns = 3;
	M[329].mat = &U[867];		/* U66 */
	M[329].rows = 3;
	M[329].columns = 1;
	M[330].mat = &U[870];		/* U67 */
	M[330].rows = 3;
	M[330].columns = 1;
	M[331].mat = &U[873];		/* U68 */
	M[331].rows = 3;
	M[331].columns = 1;
	M[332].mat = &U[876];		/* U69 */
	M[332].rows = 3;
	M[332].columns = 1;
	M[333].mat = &U[879];		/* U70 */
	M[333].rows = 6;
	M[333].columns = 6;
	M[334].mat = &U[915];		/* U71 */
	M[334].rows = 6;
	M[334].columns = 6;
	M[335].mat = &U[951];		/* U72 */
	M[335].rows = 6;
	M[335].columns = 6;
	M[336].mat = &U[987];		/* U73 */
	M[336].rows = 6;
	M[336].columns = 1;
	M[337].mat = &U[993];		/* U74 */
	M[337].rows = 6;
	M[337].columns = 6;
	M[338].mat = &U[1029];		/* U75 */
	M[338].rows = 6;
	M[338].columns = 6;
	M[339].mat = &U[1065];		/* U76 */
	M[339].rows = 6;
	M[339].columns = 6;
	M[340].mat = &U[1101];		/* U77 */
	M[340].rows = 8;
	M[340].columns = 6;
	M[341].mat = &U[1149];		/* U78 */
	M[341].rows = 6;
	M[341].columns = 6;
	M[342].mat = &U[1185];		/* U79 */
	M[342].rows = 6;
	M[342].columns = 6;
	M[343].mat = &U[1221];		/* U80 */
	M[343].rows = 6;
	M[343].columns = 6;
	M[344].mat = &U[1257];		/* U81 */
	M[344].rows = 6;
	M[344].columns = 6;
	M[345].mat = &U[1293];		/* U82 */
	M[345].rows = 6;
	M[345].columns = 6;
	M[346].mat = &U[1329];		/* U83 */
	M[346].rows = 6;
	M[346].columns = 6;
	M[347].mat = &U[1365];		/* U84 */
	M[347].rows = 6;
	M[347].columns = 6;
	M[348].mat = &U[1401];		/* U85 */
	M[348].rows = 6;
	M[348].columns = 6;
	M[349].mat = &U[1437];		/* U86 */
	M[349].rows = 6;
	M[349].columns = 6;
	M[350].mat = &U[1473];		/* U87 */
	M[350].rows = 6;
	M[350].columns = 6;
	M[351].mat = &U[1509];		/* U88 */
	M[351].rows = 6;
	M[351].columns = 6;
	M[352].mat = &U[1545];		/* U89 */
	M[352].rows = 6;
	M[352].columns = 6;
	M[353].mat = &U[1581];		/* U90 */
	M[353].rows = 6;
	M[353].columns = 6;
	M[354].mat = &U[1617];		/* U91 */
	M[354].rows = 6;
	M[354].columns = 6;
	M[355].mat = &U[1653];		/* U92 */
	M[355].rows = 6;
	M[355].columns = 6;
	M[356].mat = &U[1689];		/* U93 */
	M[356].rows = 6;
	M[356].columns = 6;
	M[357].mat = &U[1725];		/* U94 */
	M[357].rows = 6;
	M[357].columns = 6;
	M[358].mat = &U[1761];		/* U95 */
	M[358].rows = 6;
	M[358].columns = 6;
	M[359].mat = &U[1797];		/* U96 */
	M[359].rows = 6;
	M[359].columns = 6;
	M[360].mat = &U[1833];		/* U97 */
	M[360].rows = 6;
	M[360].columns = 6;
	M[361].mat = &U[1869];		/* U98 */
	M[361].rows = 6;
	M[361].columns = 6;
	M[362].mat = &U[1905];		/* U99 */
	M[362].rows = 6;
	M[362].columns = 6;
	M[363].mat = &U[1941];		/* U100 */
	M[363].rows = 6;
	M[363].columns = 6;
	M[364].mat = &U[1977];		/* U101 */
	M[364].rows = 6;
	M[364].columns = 6;
	M[365].mat = &U[2013];		/* U102 */
	M[365].rows = 6;
	M[365].columns = 6;
	M[366].mat = &U[2049];		/* U103 */
	M[366].rows = 6;
	M[366].columns = 6;
	M[367].mat = &U[2085];		/* U104 */
	M[367].rows = 6;
	M[367].columns = 6;
	M[368].mat = &U[2121];		/* U105 */
	M[368].rows = 6;
	M[368].columns = 6;
	M[369].mat = &U[2157];		/* U106 */
	M[369].rows = 6;
	M[369].columns = 6;
	M[370].mat = &U[2193];		/* U107 */
	M[370].rows = 6;
	M[370].columns = 6;
	M[371].mat = &U[2229];		/* U108 */
	M[371].rows = 6;
	M[371].columns = 6;
	M[372].mat = &U[2265];		/* U109 */
	M[372].rows = 6;
	M[372].columns = 6;
	M[373].mat = &U[2301];		/* U110 */
	M[373].rows = 6;
	M[373].columns = 6;
	M[374].mat = &U[2337];		/* U111 */
	M[374].rows = 6;
	M[374].columns = 6;
	M[375].mat = &U[2373];		/* U112 */
	M[375].rows = 6;
	M[375].columns = 6;
	M[376].mat = &U[2409];		/* U113 */
	M[376].rows = 6;
	M[376].columns = 6;
	M[377].mat = &U[2445];		/* U114 */
	M[377].rows = 6;
	M[377].columns = 6;
	M[378].mat = &U[2481];		/* U115 */
	M[378].rows = 6;
	M[378].columns = 6;
	M[379].mat = &U[2517];		/* U116 */
	M[379].rows = 6;
	M[379].columns = 6;
	M[380].mat = &U[2553];		/* U117 */
	M[380].rows = 6;
	M[380].columns = 6;
	M[381].mat = &U[2589];		/* U118 */
	M[381].rows = 6;
	M[381].columns = 6;
	M[382].mat = &U[2625];		/* U119 */
	M[382].rows = 6;
	M[382].columns = 6;
	M[383].mat = &U[2661];		/* U120 */
	M[383].rows = 6;
	M[383].columns = 6;
	M[384].mat = &U[2697];		/* U121 */
	M[384].rows = 6;
	M[384].columns = 6;
	M[385].mat = &U[2733];		/* U122 */
	M[385].rows = 6;
	M[385].columns = 6;
	M[386].mat = &U[2769];		/* U123 */
	M[386].rows = 6;
	M[386].columns = 6;
	M[387].mat = &U[2805];		/* U124 */
	M[387].rows = 6;
	M[387].columns = 6;
	M[388].mat = &U[2841];		/* U125 */
	M[388].rows = 6;
	M[388].columns = 6;
	M[389].mat = &U[2877];		/* U126 */
	M[389].rows = 8;
	M[389].columns = 1;
	M[390].mat = &U[2885];		/* U127 */
	M[390].rows = 8;
	M[390].columns = 1;
	M[391].mat = &U[2893];		/* U128 */
	M[391].rows = 8;
	M[391].columns = 1;
	M[392].mat = &U[2901];		/* U129 */
	M[392].rows = 1;
	M[392].columns = 1;
	M[393].mat = &U[2902];		/* U130 */
	M[393].rows = 1;
	M[393].columns = 6;
	M[394].mat = &U[2908];		/* U131 */
	M[394].rows = 6;
	M[394].columns = 6;
	M[395].mat = &U[2944];		/* U132 */
	M[395].rows = 6;
	M[395].columns = 6;
	M[396].mat = &U[2980];		/* U133 */
	M[396].rows = 6;
	M[396].columns = 6;
	M[397].mat = &U[3016];		/* U134 */
	M[397].rows = 6;
	M[397].columns = 6;
	M[398].mat = &U[3052];		/* U135 */
	M[398].rows = 6;
	M[398].columns = 6;
	M[399].mat = &U[3088];		/* U136 */
	M[399].rows = 6;
	M[399].columns = 6;
	M[400].mat = &U[3124];		/* U137 */
	M[400].rows = 6;
	M[400].columns = 6;
	M[401].mat = &U[3160];		/* U138 */
	M[401].rows = 6;
	M[401].columns = 6;
	M[402].mat = &U[3196];		/* U139 */
	M[402].rows = 6;
	M[402].columns = 6;
	M[403].mat = &U[3232];		/* U140 */
	M[403].rows = 6;
	M[403].columns = 6;
	M[404].mat = &U[3268];		/* U141 */
	M[404].rows = 6;
	M[404].columns = 6;
	M[405].mat = &U[3304];		/* U142 */
	M[405].rows = 6;
	M[405].columns = 6;
	M[406].mat = &U[3340];		/* U143 */
	M[406].rows = 6;
	M[406].columns = 6;
	M[407].mat = &U[3376];		/* U144 */
	M[407].rows = 6;
	M[407].columns = 6;
	M[408].mat = &U[3412];		/* U145 */
	M[408].rows = 6;
	M[408].columns = 6;
	M[409].mat = &U[3448];		/* U146 */
	M[409].rows = 6;
	M[409].columns = 6;
	M[410].mat = &U[3484];		/* U147 */
	M[410].rows = 6;
	M[410].columns = 6;
	M[411].mat = &U[3520];		/* U148 */
	M[411].rows = 6;
	M[411].columns = 6;
	M[412].mat = &U[3556];		/* U149 */
	M[412].rows = 6;
	M[412].columns = 6;
	M[413].mat = &U[3592];		/* U150 */
	M[413].rows = 6;
	M[413].columns = 6;
	M[414].mat = &U[3628];		/* U151 */
	M[414].rows = 6;
	M[414].columns = 6;
	M[415].mat = &U[3664];		/* U152 */
	M[415].rows = 6;
	M[415].columns = 6;
	M[416].mat = &U[3700];		/* U153 */
	M[416].rows = 6;
	M[416].columns = 6;
	M[417].mat = &U[3736];		/* U154 */
	M[417].rows = 6;
	M[417].columns = 6;


		/* end of initialization phase */
		initialize = false;
		return initialize;
	}
}

/* Macro to generate component library
 * Can be modified if the component is part of a big project with other components 
 */
ORO_CREATE_COMPONENT(ModelControl::interaction_control)


