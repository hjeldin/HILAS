/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  src\ArmPoseControllerModel.cpp
 *  subm:  ArmPoseControllerModel
 *  model: motion_stack
 *  expmt: motion_stack
 *  date:  August 6, 2012
 *  time:  10:18:08 am
 *  user:  Campuslicentie
 *  from:  Universiteit Twente
 *  build: 4.1.2.4
 **********************************************************/

/* Standard include files */
#include <stdio.h>
#include <math.h>
#include <stdexcept>

/* 20-sim include files */
#include "ArmPoseControllerModel.hpp"

/* Orocos include */
#include <boost/algorithm/string.hpp>

using namespace std;

namespace motion_stack
{

	ArmPoseControllerModel::ArmPoseControllerModel(): m_model_config(this)
	{
		using namespace boost;

		setupComputation();
	}

	ArmPoseControllerModel::~ArmPoseControllerModel(void)
	{
		/* free memory */
		delete[] C;
		delete[] P;
		delete[] I;
		delete[] V;
		delete[] s;
		delete[] R;
		delete[] M;
		delete[] U;
		delete[] workarray;
	}

  void ArmPoseControllerModel::setupComputation()
  {
    start_time = 0.0;
    finish_time = 0;
    step_size = 0.001;
    time = 0;
    major = true;

    number_constants = 0;
    number_parameters = 179;
    number_initialvalues = 10;
    number_variables = 1463;
    number_states = 10;
    number_rates = 10;
    number_matrices = 280;
    number_unnamed = 2993;

    /* the variable arrays */
    C = new XXDouble[0 + 1]; /* constants */
    P = new XXDouble[179 + 1]; /* parameters, currently only one type of parameter exists: double */
    I = new XXDouble[10 + 1]; /* initial values */
    V = new XXDouble[1463 + 1]; /* variables */

    s = new XXDouble[10 + 1]; /* states */
    R = new XXDouble[10 + 1]; /* rates (or new states) */
    M = new XXMatrix[280 + 1]; /* matrices */
    U = new XXDouble[2993 + 1]; /* unnamed */
    workarray = new XXDouble[120 + 1];
  }

	bool ArmPoseControllerModel::loadModelConfiguration(std::string uri)
	{
	  m_model_config.load(uri);
	  return true;
	}

	XXModelConfiguration& ArmPoseControllerModel::getModelConfiguration()
	{
	  return m_model_config;
	}

  bool ArmPoseControllerModel::configure()
  {
    myintegmethod.Initialize(this);

    /* initialization phase (allocating memory) */
    initialize = true;
    //CONSTANTS
    

    //PARAMETERS
    	P[0] = 0.01489;		/* GravityCompensationModel\Base\AdHik1\COMdim */
	P[1] = 0.00213;		
	P[2] = 0.00213;		
	P[3] = 20.0;		/* GravityCompensationModel\Base\Gravity\m */
	P[4] = 0.024;		/* GravityCompensationModel\Base\Hij\dim */
	P[5] = 0.0;		
	P[6] = 0.096;		
	P[7] = 20.0;		/* GravityCompensationModel\Base\m */
	P[8] = 0.01489;		/* GravityCompensationModel\Base\COMdim */
	P[9] = 0.00213;		
	P[10] = 0.00213;		
	P[11] = 0.024;		/* GravityCompensationModel\Base\dim */
	P[12] = 0.0;		
	P[13] = 0.096;		
	P[14] = 0.0;		/* GravityCompensationModel\Joint12\Integrate\init */
	P[15] = 0.0;		/* GravityCompensationModel\Joint12\InitialPos */
	P[16] = 0.0;		/* GravityCompensationModel\Joint23\Integrate\init */
	P[17] = 0.0;		/* GravityCompensationModel\Joint23\InitialPos */
	P[18] = 0.0;		/* GravityCompensationModel\Joint34\Integrate\init */
	P[19] = 0.0;		/* GravityCompensationModel\Joint34\InitialPos */
	P[20] = 0.0;		/* GravityCompensationModel\Joint45\Integrate\init */
	P[21] = 0.0;		/* GravityCompensationModel\Joint45\InitialPos */
	P[22] = 0.0;		/* GravityCompensationModel\JointBase1\Integrate\init */
	P[23] = 0.0;		/* GravityCompensationModel\JointBase1\InitialPos */
	P[24] = 0.10453;		/* GravityCompensationModel\Link1\AdHik1\COMdim */
	P[25] = 0.0017;		
	P[26] = -0.00297;		
	P[27] = 2.412;		/* GravityCompensationModel\Link1\Gravity\m */
	P[28] = 0.033;		/* GravityCompensationModel\Link1\Hij\dim */
	P[29] = 0.0;		
	P[30] = 0.019;		
	P[31] = 2.412;		/* GravityCompensationModel\Link1\m */
	P[32] = 0.10453;		/* GravityCompensationModel\Link1\COMdim */
	P[33] = 0.0017;		
	P[34] = -0.00297;		
	P[35] = 0.033;		/* GravityCompensationModel\Link1\dim */
	P[36] = 0.0;		
	P[37] = 0.019;		
	P[38] = 0.001;		/* GravityCompensationModel\Link2\AdHik1\COMdim */
	P[39] = 0.0967;		
	P[40] = 0.02107;		
	P[41] = 1.155;		/* GravityCompensationModel\Link2\Gravity\m */
	P[42] = 0.0;		/* GravityCompensationModel\Link2\Hij\dim */
	P[43] = 0.0;		
	P[44] = 0.155;		
	P[45] = 1.155;		/* GravityCompensationModel\Link2\m */
	P[46] = 0.001;		/* GravityCompensationModel\Link2\COMdim */
	P[47] = 0.0967;		
	P[48] = 0.02107;		
	P[49] = 0.0;		/* GravityCompensationModel\Link2\dim */
	P[50] = 0.0;		
	P[51] = 0.155;		
	P[52] = 0.011;		/* GravityCompensationModel\Link3\AdHik1\COMdim */
	P[53] = 0.05103;		
	P[54] = -0.02319;		
	P[55] = 0.934;		/* GravityCompensationModel\Link3\Gravity\m */
	P[56] = 0.0;		/* GravityCompensationModel\Link3\Hij\dim */
	P[57] = 0.0;		
	P[58] = 0.135;		
	P[59] = 0.934;		/* GravityCompensationModel\Link3\m */
	P[60] = 0.011;		/* GravityCompensationModel\Link3\COMdim */
	P[61] = 0.05103;		
	P[62] = -0.02319;		
	P[63] = 0.0;		/* GravityCompensationModel\Link3\dim */
	P[64] = 0.0;		
	P[65] = 0.135;		
	P[66] = 0.0;		/* GravityCompensationModel\Link4\AdHik1\COMdim */
	P[67] = 0.00115;		
	P[68] = -0.01683;		
	P[69] = 0.877;		/* GravityCompensationModel\Link4\Gravity\m */
	P[70] = 0.0;		/* GravityCompensationModel\Link4\Hij\dim */
	P[71] = 0.0;		
	P[72] = 0.096;		
	P[73] = 0.877;		/* GravityCompensationModel\Link4\m */
	P[74] = 0.0;		/* GravityCompensationModel\Link4\COMdim */
	P[75] = 0.00115;		
	P[76] = -0.01683;		
	P[77] = 0.0;		/* GravityCompensationModel\Link4\dim */
	P[78] = 0.0;		
	P[79] = 0.096;		
	P[80] = 0.0;		/* GravityCompensationModel\Link5\AdHik1\COMdim */
	P[81] = 0.0;		
	P[82] = 0.001;		
	P[83] = 1.121;		/* GravityCompensationModel\Link5\Gravity\m */
	P[84] = 0.0;		/* GravityCompensationModel\Link5\Hij\dim */
	P[85] = 0.0;		
	P[86] = 0.034;		
	P[87] = 1.121;		/* GravityCompensationModel\Link5\m */
	P[88] = 0.0;		/* GravityCompensationModel\Link5\COMdim */
	P[89] = 0.0;		
	P[90] = 0.001;		
	P[91] = 0.0;		/* GravityCompensationModel\Link5\dim */
	P[92] = 0.0;		
	P[93] = 0.034;		
	P[94] = 1.0;		/* GravityCompensationModel\Mux\calibartion */
	P[95] = 0.0;		/* GravityCompensationModel\Wtip0\effort */
	P[96] = 0.0;		/* GravityCompensationModel\InitialJointPos */
	P[97] = 0.0;		
	P[98] = 0.0;		
	P[99] = 0.0;		
	P[100] = 0.0;		
	P[101] = 0.01489;		/* GravityCompensationModel\LinkCOMdim */
	P[102] = 0.10453;		
	P[103] = 0.001;		
	P[104] = 0.011;		
	P[105] = 0.0;		
	P[106] = 0.0;		
	P[107] = 0.00213;		
	P[108] = 0.0017;		
	P[109] = 0.0967;		
	P[110] = 0.05103;		
	P[111] = 0.00115;		
	P[112] = 0.0;		
	P[113] = 0.00213;		
	P[114] = -0.00297;		
	P[115] = 0.02107;		
	P[116] = -0.02319;		
	P[117] = -0.01683;		
	P[118] = 0.001;		
	P[119] = 0.024;		/* GravityCompensationModel\Linkdim */
	P[120] = 0.033;		
	P[121] = 0.0;		
	P[122] = 0.0;		
	P[123] = 0.0;		
	P[124] = 0.0;		
	P[125] = 0.0;		
	P[126] = 0.0;		
	P[127] = 0.0;		
	P[128] = 0.0;		
	P[129] = 0.0;		
	P[130] = 0.0;		
	P[131] = 0.096;		
	P[132] = 0.019;		
	P[133] = 0.155;		
	P[134] = 0.135;		
	P[135] = 0.096;		
	P[136] = 0.034;		
	P[137] = 20.0;		/* GravityCompensationModel\Linkm */
	P[138] = 2.412;		
	P[139] = 1.155;		
	P[140] = 0.934;		
	P[141] = 0.877;		
	P[142] = 1.121;		
	P[143] = -2.9496;		/* JointInitialStateOffset\joints_initial_states */
	P[144] = -1.13;		
	P[145] = 2.5482;		
	P[146] = -1.789;		
	P[147] = -2.9234;		
	P[148] = 50.0;		/* JointSoftLimits\c */
	P[149] = 50.0;		
	P[150] = 50.0;		
	P[151] = 50.0;		
	P[152] = 50.0;		
	P[153] = -2.9395;		/* JointSoftLimits\limits_low */
	P[154] = -1.1244;		
	P[155] = -2.4733;		
	P[156] = -1.7668;		
	P[157] = -2.8127;		
	P[158] = 2.8847;		/* JointSoftLimits\limits_high */
	P[159] = 1.4809;		
	P[160] = 2.5325;		
	P[161] = 1.6368;		
	P[162] = 2.7125;		
	P[163] = 0.95;		/* JointSoftLimits\working_range */
	P[164] = 1.0;		/* JointSpaceController\PD_Joint1\kp {} */
	P[165] = 1.0;		/* JointSpaceController\PD_Joint1\tauD {s} */
	P[166] = 0.01;		/* JointSpaceController\PD_Joint1\beta {} */
	P[167] = 1.0;		/* JointSpaceController\PD_Joint2\kp {} */
	P[168] = 1.0;		/* JointSpaceController\PD_Joint2\tauD {s} */
	P[169] = 0.01;		/* JointSpaceController\PD_Joint2\beta {} */
	P[170] = 1.0;		/* JointSpaceController\PD_Joint3\kp {} */
	P[171] = 1.0;		/* JointSpaceController\PD_Joint3\tauD {s} */
	P[172] = 0.01;		/* JointSpaceController\PD_Joint3\beta {} */
	P[173] = 1.0;		/* JointSpaceController\PD_Joint4\kp {} */
	P[174] = 1.0;		/* JointSpaceController\PD_Joint4\tauD {s} */
	P[175] = 0.01;		/* JointSpaceController\PD_Joint4\beta {} */
	P[176] = 1.0;		/* JointSpaceController\PD_Joint5\kp {} */
	P[177] = 1.0;		/* JointSpaceController\PD_Joint5\tauD {s} */
	P[178] = 0.01;		/* JointSpaceController\PD_Joint5\beta {} */


    //INITIAL VALUES
    	I[0] = 0.0;		/* JointSpaceController\PD_Joint1\uD_previous_initial */
	I[1] = 0.0;		/* JointSpaceController\PD_Joint1\error_previous_initial */
	I[2] = 0.0;		/* JointSpaceController\PD_Joint2\uD_previous_initial */
	I[3] = 0.0;		/* JointSpaceController\PD_Joint2\error_previous_initial */
	I[4] = 0.0;		/* JointSpaceController\PD_Joint3\uD_previous_initial */
	I[5] = 0.0;		/* JointSpaceController\PD_Joint3\error_previous_initial */
	I[6] = 0.0;		/* JointSpaceController\PD_Joint4\uD_previous_initial */
	I[7] = 0.0;		/* JointSpaceController\PD_Joint4\error_previous_initial */
	I[8] = 0.0;		/* JointSpaceController\PD_Joint5\uD_previous_initial */
	I[9] = 0.0;		/* JointSpaceController\PD_Joint5\error_previous_initial */


    //MATRICES
    	M[0].mat = &V[0];		/* GravityCompensationModel\Base\AdHi0\p1.f */
	M[0].rows = 6;
	M[0].columns = 1;
	M[1].mat = &V[6];		/* GravityCompensationModel\Base\AdHi0\p2.e */
	M[1].rows = 6;
	M[1].columns = 1;
	M[2].mat = &V[12];		/* GravityCompensationModel\Base\AdHi0\onlyRotH */
	M[2].rows = 4;
	M[2].columns = 4;
	M[3].mat = &V[28];		/* GravityCompensationModel\Base\AdHij\p1.e */
	M[3].rows = 6;
	M[3].columns = 1;
	M[4].mat = &V[34];		/* GravityCompensationModel\Base\AdHij\p2.f */
	M[4].rows = 6;
	M[4].columns = 1;
	M[5].mat = &V[40];		/* GravityCompensationModel\Base\AdHik1\p1.e */
	M[5].rows = 6;
	M[5].columns = 1;
	M[6].mat = &V[46];		/* GravityCompensationModel\Base\AdHik1\p2.f */
	M[6].rows = 6;
	M[6].columns = 1;
	M[7].mat = &P[0];		/* GravityCompensationModel\Base\AdHik1\COMdim */
	M[7].rows = 3;
	M[7].columns = 1;
	M[8].mat = &V[52];		/* GravityCompensationModel\Base\AdHik1\d */
	M[8].rows = 3;
	M[8].columns = 1;
	M[9].mat = &V[55];		/* GravityCompensationModel\Base\AdHik1\R */
	M[9].rows = 3;
	M[9].columns = 3;
	M[10].mat = &V[64];		/* GravityCompensationModel\Base\AdHik1\H */
	M[10].rows = 4;
	M[10].columns = 4;
	M[11].mat = &V[80];		/* GravityCompensationModel\Base\AdHik1\AdH */
	M[11].rows = 6;
	M[11].columns = 6;
	M[12].mat = &V[116];		/* GravityCompensationModel\Base\Gravity\effort */
	M[12].rows = 6;
	M[12].columns = 1;
	M[13].mat = &V[122];		/* GravityCompensationModel\Base\Hij\output */
	M[13].rows = 4;
	M[13].columns = 4;
	M[14].mat = &V[138];		/* GravityCompensationModel\Base\Hij\Hab */
	M[14].rows = 4;
	M[14].columns = 4;
	M[15].mat = &P[4];		/* GravityCompensationModel\Base\Hij\dim */
	M[15].rows = 3;
	M[15].columns = 1;
	M[16].mat = &V[154];		/* GravityCompensationModel\Base\Ta0i\p2.e */
	M[16].rows = 6;
	M[16].columns = 1;
	M[17].mat = &P[8];		/* GravityCompensationModel\Base\COMdim */
	M[17].rows = 3;
	M[17].columns = 1;
	M[18].mat = &P[11];		/* GravityCompensationModel\Base\dim */
	M[18].rows = 3;
	M[18].columns = 1;
	M[19].mat = &V[160];		/* GravityCompensationModel\Hfloor0\output */
	M[19].rows = 4;
	M[19].columns = 4;
	M[20].mat = &V[176];		/* GravityCompensationModel\Joint12\AdHji\p1.e */
	M[20].rows = 6;
	M[20].columns = 1;
	M[21].mat = &V[182];		/* GravityCompensationModel\Joint12\AdHji\p2.f */
	M[21].rows = 6;
	M[21].columns = 1;
	M[22].mat = &V[188];		/* GravityCompensationModel\Joint12\Integrate\output */
	M[22].rows = 4;
	M[22].columns = 4;
	M[23].mat = &V[204];		/* GravityCompensationModel\Joint12\Integrate\R */
	M[23].rows = 3;
	M[23].columns = 3;
	M[24].mat = &V[213];		/* GravityCompensationModel\Joint12\Integrate\p */
	M[24].rows = 3;
	M[24].columns = 1;
	M[25].mat = &V[216];		/* GravityCompensationModel\Joint12\MatrixMul\output */
	M[25].rows = 4;
	M[25].columns = 4;
	M[26].mat = &V[233];		/* GravityCompensationModel\Joint12\uTbai\p2.f */
	M[26].rows = 6;
	M[26].columns = 1;
	M[27].mat = &V[239];		/* GravityCompensationModel\Joint12\Wbai\p3.f */
	M[27].rows = 6;
	M[27].columns = 1;
	M[28].mat = &V[245];		/* GravityCompensationModel\Joint23\AdHji\p1.e */
	M[28].rows = 6;
	M[28].columns = 1;
	M[29].mat = &V[251];		/* GravityCompensationModel\Joint23\AdHji\p2.f */
	M[29].rows = 6;
	M[29].columns = 1;
	M[30].mat = &V[257];		/* GravityCompensationModel\Joint23\Integrate\output */
	M[30].rows = 4;
	M[30].columns = 4;
	M[31].mat = &V[273];		/* GravityCompensationModel\Joint23\Integrate\R */
	M[31].rows = 3;
	M[31].columns = 3;
	M[32].mat = &V[282];		/* GravityCompensationModel\Joint23\Integrate\p */
	M[32].rows = 3;
	M[32].columns = 1;
	M[33].mat = &V[285];		/* GravityCompensationModel\Joint23\MatrixMul\output */
	M[33].rows = 4;
	M[33].columns = 4;
	M[34].mat = &V[302];		/* GravityCompensationModel\Joint23\uTbai\p2.f */
	M[34].rows = 6;
	M[34].columns = 1;
	M[35].mat = &V[308];		/* GravityCompensationModel\Joint23\Wbai\p3.f */
	M[35].rows = 6;
	M[35].columns = 1;
	M[36].mat = &V[314];		/* GravityCompensationModel\Joint34\AdHji\p1.e */
	M[36].rows = 6;
	M[36].columns = 1;
	M[37].mat = &V[320];		/* GravityCompensationModel\Joint34\AdHji\p2.f */
	M[37].rows = 6;
	M[37].columns = 1;
	M[38].mat = &V[326];		/* GravityCompensationModel\Joint34\Integrate\output */
	M[38].rows = 4;
	M[38].columns = 4;
	M[39].mat = &V[342];		/* GravityCompensationModel\Joint34\Integrate\R */
	M[39].rows = 3;
	M[39].columns = 3;
	M[40].mat = &V[351];		/* GravityCompensationModel\Joint34\Integrate\p */
	M[40].rows = 3;
	M[40].columns = 1;
	M[41].mat = &V[354];		/* GravityCompensationModel\Joint34\MatrixMul\output */
	M[41].rows = 4;
	M[41].columns = 4;
	M[42].mat = &V[371];		/* GravityCompensationModel\Joint34\uTbai\p2.f */
	M[42].rows = 6;
	M[42].columns = 1;
	M[43].mat = &V[377];		/* GravityCompensationModel\Joint34\Wbai\p3.f */
	M[43].rows = 6;
	M[43].columns = 1;
	M[44].mat = &V[383];		/* GravityCompensationModel\Joint45\AdHji\p1.e */
	M[44].rows = 6;
	M[44].columns = 1;
	M[45].mat = &V[389];		/* GravityCompensationModel\Joint45\AdHji\p2.f */
	M[45].rows = 6;
	M[45].columns = 1;
	M[46].mat = &V[395];		/* GravityCompensationModel\Joint45\Integrate\output */
	M[46].rows = 4;
	M[46].columns = 4;
	M[47].mat = &V[411];		/* GravityCompensationModel\Joint45\Integrate\R */
	M[47].rows = 3;
	M[47].columns = 3;
	M[48].mat = &V[420];		/* GravityCompensationModel\Joint45\Integrate\p */
	M[48].rows = 3;
	M[48].columns = 1;
	M[49].mat = &V[423];		/* GravityCompensationModel\Joint45\MatrixMul\output */
	M[49].rows = 4;
	M[49].columns = 4;
	M[50].mat = &V[440];		/* GravityCompensationModel\Joint45\uTbai\p2.f */
	M[50].rows = 6;
	M[50].columns = 1;
	M[51].mat = &V[446];		/* GravityCompensationModel\Joint45\Wbai\p1.f */
	M[51].rows = 6;
	M[51].columns = 1;
	M[52].mat = &V[452];		/* GravityCompensationModel\JointBase1\AdHji\p1.e */
	M[52].rows = 6;
	M[52].columns = 1;
	M[53].mat = &V[458];		/* GravityCompensationModel\JointBase1\AdHji\p2.f */
	M[53].rows = 6;
	M[53].columns = 1;
	M[54].mat = &V[464];		/* GravityCompensationModel\JointBase1\Integrate\output */
	M[54].rows = 4;
	M[54].columns = 4;
	M[55].mat = &V[480];		/* GravityCompensationModel\JointBase1\Integrate\R */
	M[55].rows = 3;
	M[55].columns = 3;
	M[56].mat = &V[489];		/* GravityCompensationModel\JointBase1\Integrate\p */
	M[56].rows = 3;
	M[56].columns = 1;
	M[57].mat = &V[492];		/* GravityCompensationModel\JointBase1\MatrixMul\output */
	M[57].rows = 4;
	M[57].columns = 4;
	M[58].mat = &V[509];		/* GravityCompensationModel\JointBase1\uTbai\p2.f */
	M[58].rows = 6;
	M[58].columns = 1;
	M[59].mat = &V[515];		/* GravityCompensationModel\JointBase1\Wbai\p1.f */
	M[59].rows = 6;
	M[59].columns = 1;
	M[60].mat = &V[521];		/* GravityCompensationModel\Link1\AdHi0\p1.f */
	M[60].rows = 6;
	M[60].columns = 1;
	M[61].mat = &V[527];		/* GravityCompensationModel\Link1\AdHi0\p2.e */
	M[61].rows = 6;
	M[61].columns = 1;
	M[62].mat = &V[533];		/* GravityCompensationModel\Link1\AdHi0\onlyRotH */
	M[62].rows = 4;
	M[62].columns = 4;
	M[63].mat = &V[549];		/* GravityCompensationModel\Link1\AdHij\p1.e */
	M[63].rows = 6;
	M[63].columns = 1;
	M[64].mat = &V[555];		/* GravityCompensationModel\Link1\AdHij\p2.f */
	M[64].rows = 6;
	M[64].columns = 1;
	M[65].mat = &V[561];		/* GravityCompensationModel\Link1\AdHik1\p1.e */
	M[65].rows = 6;
	M[65].columns = 1;
	M[66].mat = &V[567];		/* GravityCompensationModel\Link1\AdHik1\p2.f */
	M[66].rows = 6;
	M[66].columns = 1;
	M[67].mat = &P[24];		/* GravityCompensationModel\Link1\AdHik1\COMdim */
	M[67].rows = 3;
	M[67].columns = 1;
	M[68].mat = &V[573];		/* GravityCompensationModel\Link1\AdHik1\d */
	M[68].rows = 3;
	M[68].columns = 1;
	M[69].mat = &V[576];		/* GravityCompensationModel\Link1\AdHik1\R */
	M[69].rows = 3;
	M[69].columns = 3;
	M[70].mat = &V[585];		/* GravityCompensationModel\Link1\AdHik1\H */
	M[70].rows = 4;
	M[70].columns = 4;
	M[71].mat = &V[601];		/* GravityCompensationModel\Link1\AdHik1\AdH */
	M[71].rows = 6;
	M[71].columns = 6;
	M[72].mat = &V[637];		/* GravityCompensationModel\Link1\Gravity\effort */
	M[72].rows = 6;
	M[72].columns = 1;
	M[73].mat = &V[643];		/* GravityCompensationModel\Link1\Hij\output */
	M[73].rows = 4;
	M[73].columns = 4;
	M[74].mat = &V[659];		/* GravityCompensationModel\Link1\Hij\Hab */
	M[74].rows = 4;
	M[74].columns = 4;
	M[75].mat = &P[28];		/* GravityCompensationModel\Link1\Hij\dim */
	M[75].rows = 3;
	M[75].columns = 1;
	M[76].mat = &V[675];		/* GravityCompensationModel\Link1\Ta0i\p2.e */
	M[76].rows = 6;
	M[76].columns = 1;
	M[77].mat = &P[32];		/* GravityCompensationModel\Link1\COMdim */
	M[77].rows = 3;
	M[77].columns = 1;
	M[78].mat = &P[35];		/* GravityCompensationModel\Link1\dim */
	M[78].rows = 3;
	M[78].columns = 1;
	M[79].mat = &V[681];		/* GravityCompensationModel\Link2\AdHi0\p1.f */
	M[79].rows = 6;
	M[79].columns = 1;
	M[80].mat = &V[687];		/* GravityCompensationModel\Link2\AdHi0\p2.e */
	M[80].rows = 6;
	M[80].columns = 1;
	M[81].mat = &V[693];		/* GravityCompensationModel\Link2\AdHi0\onlyRotH */
	M[81].rows = 4;
	M[81].columns = 4;
	M[82].mat = &V[709];		/* GravityCompensationModel\Link2\AdHij\p1.e */
	M[82].rows = 6;
	M[82].columns = 1;
	M[83].mat = &V[715];		/* GravityCompensationModel\Link2\AdHij\p2.f */
	M[83].rows = 6;
	M[83].columns = 1;
	M[84].mat = &V[721];		/* GravityCompensationModel\Link2\AdHik1\p1.e */
	M[84].rows = 6;
	M[84].columns = 1;
	M[85].mat = &V[727];		/* GravityCompensationModel\Link2\AdHik1\p2.f */
	M[85].rows = 6;
	M[85].columns = 1;
	M[86].mat = &P[38];		/* GravityCompensationModel\Link2\AdHik1\COMdim */
	M[86].rows = 3;
	M[86].columns = 1;
	M[87].mat = &V[733];		/* GravityCompensationModel\Link2\AdHik1\d */
	M[87].rows = 3;
	M[87].columns = 1;
	M[88].mat = &V[736];		/* GravityCompensationModel\Link2\AdHik1\R */
	M[88].rows = 3;
	M[88].columns = 3;
	M[89].mat = &V[745];		/* GravityCompensationModel\Link2\AdHik1\H */
	M[89].rows = 4;
	M[89].columns = 4;
	M[90].mat = &V[761];		/* GravityCompensationModel\Link2\AdHik1\AdH */
	M[90].rows = 6;
	M[90].columns = 6;
	M[91].mat = &V[797];		/* GravityCompensationModel\Link2\Gravity\effort */
	M[91].rows = 6;
	M[91].columns = 1;
	M[92].mat = &V[803];		/* GravityCompensationModel\Link2\Hij\output */
	M[92].rows = 4;
	M[92].columns = 4;
	M[93].mat = &V[819];		/* GravityCompensationModel\Link2\Hij\Hab */
	M[93].rows = 4;
	M[93].columns = 4;
	M[94].mat = &P[42];		/* GravityCompensationModel\Link2\Hij\dim */
	M[94].rows = 3;
	M[94].columns = 1;
	M[95].mat = &V[835];		/* GravityCompensationModel\Link2\Ta0i\p2.e */
	M[95].rows = 6;
	M[95].columns = 1;
	M[96].mat = &P[46];		/* GravityCompensationModel\Link2\COMdim */
	M[96].rows = 3;
	M[96].columns = 1;
	M[97].mat = &P[49];		/* GravityCompensationModel\Link2\dim */
	M[97].rows = 3;
	M[97].columns = 1;
	M[98].mat = &V[841];		/* GravityCompensationModel\Link3\AdHi0\p1.f */
	M[98].rows = 6;
	M[98].columns = 1;
	M[99].mat = &V[847];		/* GravityCompensationModel\Link3\AdHi0\p2.e */
	M[99].rows = 6;
	M[99].columns = 1;
	M[100].mat = &V[853];		/* GravityCompensationModel\Link3\AdHi0\onlyRotH */
	M[100].rows = 4;
	M[100].columns = 4;
	M[101].mat = &V[869];		/* GravityCompensationModel\Link3\AdHij\p1.e */
	M[101].rows = 6;
	M[101].columns = 1;
	M[102].mat = &V[875];		/* GravityCompensationModel\Link3\AdHij\p2.f */
	M[102].rows = 6;
	M[102].columns = 1;
	M[103].mat = &V[881];		/* GravityCompensationModel\Link3\AdHik1\p1.e */
	M[103].rows = 6;
	M[103].columns = 1;
	M[104].mat = &V[887];		/* GravityCompensationModel\Link3\AdHik1\p2.f */
	M[104].rows = 6;
	M[104].columns = 1;
	M[105].mat = &P[52];		/* GravityCompensationModel\Link3\AdHik1\COMdim */
	M[105].rows = 3;
	M[105].columns = 1;
	M[106].mat = &V[893];		/* GravityCompensationModel\Link3\AdHik1\d */
	M[106].rows = 3;
	M[106].columns = 1;
	M[107].mat = &V[896];		/* GravityCompensationModel\Link3\AdHik1\R */
	M[107].rows = 3;
	M[107].columns = 3;
	M[108].mat = &V[905];		/* GravityCompensationModel\Link3\AdHik1\H */
	M[108].rows = 4;
	M[108].columns = 4;
	M[109].mat = &V[921];		/* GravityCompensationModel\Link3\AdHik1\AdH */
	M[109].rows = 6;
	M[109].columns = 6;
	M[110].mat = &V[957];		/* GravityCompensationModel\Link3\Gravity\effort */
	M[110].rows = 6;
	M[110].columns = 1;
	M[111].mat = &V[963];		/* GravityCompensationModel\Link3\Hij\output */
	M[111].rows = 4;
	M[111].columns = 4;
	M[112].mat = &V[979];		/* GravityCompensationModel\Link3\Hij\Hab */
	M[112].rows = 4;
	M[112].columns = 4;
	M[113].mat = &P[56];		/* GravityCompensationModel\Link3\Hij\dim */
	M[113].rows = 3;
	M[113].columns = 1;
	M[114].mat = &V[995];		/* GravityCompensationModel\Link3\Ta0i\p2.e */
	M[114].rows = 6;
	M[114].columns = 1;
	M[115].mat = &P[60];		/* GravityCompensationModel\Link3\COMdim */
	M[115].rows = 3;
	M[115].columns = 1;
	M[116].mat = &P[63];		/* GravityCompensationModel\Link3\dim */
	M[116].rows = 3;
	M[116].columns = 1;
	M[117].mat = &V[1001];		/* GravityCompensationModel\Link4\AdHi0\p1.f */
	M[117].rows = 6;
	M[117].columns = 1;
	M[118].mat = &V[1007];		/* GravityCompensationModel\Link4\AdHi0\p2.e */
	M[118].rows = 6;
	M[118].columns = 1;
	M[119].mat = &V[1013];		/* GravityCompensationModel\Link4\AdHi0\onlyRotH */
	M[119].rows = 4;
	M[119].columns = 4;
	M[120].mat = &V[1029];		/* GravityCompensationModel\Link4\AdHij\p1.e */
	M[120].rows = 6;
	M[120].columns = 1;
	M[121].mat = &V[1035];		/* GravityCompensationModel\Link4\AdHij\p2.f */
	M[121].rows = 6;
	M[121].columns = 1;
	M[122].mat = &V[1041];		/* GravityCompensationModel\Link4\AdHik1\p1.e */
	M[122].rows = 6;
	M[122].columns = 1;
	M[123].mat = &V[1047];		/* GravityCompensationModel\Link4\AdHik1\p2.f */
	M[123].rows = 6;
	M[123].columns = 1;
	M[124].mat = &P[66];		/* GravityCompensationModel\Link4\AdHik1\COMdim */
	M[124].rows = 3;
	M[124].columns = 1;
	M[125].mat = &V[1053];		/* GravityCompensationModel\Link4\AdHik1\d */
	M[125].rows = 3;
	M[125].columns = 1;
	M[126].mat = &V[1056];		/* GravityCompensationModel\Link4\AdHik1\R */
	M[126].rows = 3;
	M[126].columns = 3;
	M[127].mat = &V[1065];		/* GravityCompensationModel\Link4\AdHik1\H */
	M[127].rows = 4;
	M[127].columns = 4;
	M[128].mat = &V[1081];		/* GravityCompensationModel\Link4\AdHik1\AdH */
	M[128].rows = 6;
	M[128].columns = 6;
	M[129].mat = &V[1117];		/* GravityCompensationModel\Link4\Gravity\effort */
	M[129].rows = 6;
	M[129].columns = 1;
	M[130].mat = &V[1123];		/* GravityCompensationModel\Link4\Hij\output */
	M[130].rows = 4;
	M[130].columns = 4;
	M[131].mat = &V[1139];		/* GravityCompensationModel\Link4\Hij\Hab */
	M[131].rows = 4;
	M[131].columns = 4;
	M[132].mat = &P[70];		/* GravityCompensationModel\Link4\Hij\dim */
	M[132].rows = 3;
	M[132].columns = 1;
	M[133].mat = &V[1155];		/* GravityCompensationModel\Link4\Ta0i\p2.e */
	M[133].rows = 6;
	M[133].columns = 1;
	M[134].mat = &P[74];		/* GravityCompensationModel\Link4\COMdim */
	M[134].rows = 3;
	M[134].columns = 1;
	M[135].mat = &P[77];		/* GravityCompensationModel\Link4\dim */
	M[135].rows = 3;
	M[135].columns = 1;
	M[136].mat = &V[1161];		/* GravityCompensationModel\Link5\AdHi0\p1.f */
	M[136].rows = 6;
	M[136].columns = 1;
	M[137].mat = &V[1167];		/* GravityCompensationModel\Link5\AdHi0\p2.e */
	M[137].rows = 6;
	M[137].columns = 1;
	M[138].mat = &V[1173];		/* GravityCompensationModel\Link5\AdHi0\onlyRotH */
	M[138].rows = 4;
	M[138].columns = 4;
	M[139].mat = &V[1189];		/* GravityCompensationModel\Link5\AdHij\p1.e */
	M[139].rows = 6;
	M[139].columns = 1;
	M[140].mat = &V[1195];		/* GravityCompensationModel\Link5\AdHij\p2.f */
	M[140].rows = 6;
	M[140].columns = 1;
	M[141].mat = &V[1201];		/* GravityCompensationModel\Link5\AdHik1\p1.e */
	M[141].rows = 6;
	M[141].columns = 1;
	M[142].mat = &V[1207];		/* GravityCompensationModel\Link5\AdHik1\p2.f */
	M[142].rows = 6;
	M[142].columns = 1;
	M[143].mat = &P[80];		/* GravityCompensationModel\Link5\AdHik1\COMdim */
	M[143].rows = 3;
	M[143].columns = 1;
	M[144].mat = &V[1213];		/* GravityCompensationModel\Link5\AdHik1\d */
	M[144].rows = 3;
	M[144].columns = 1;
	M[145].mat = &V[1216];		/* GravityCompensationModel\Link5\AdHik1\R */
	M[145].rows = 3;
	M[145].columns = 3;
	M[146].mat = &V[1225];		/* GravityCompensationModel\Link5\AdHik1\H */
	M[146].rows = 4;
	M[146].columns = 4;
	M[147].mat = &V[1241];		/* GravityCompensationModel\Link5\AdHik1\AdH */
	M[147].rows = 6;
	M[147].columns = 6;
	M[148].mat = &V[1277];		/* GravityCompensationModel\Link5\Gravity\effort */
	M[148].rows = 6;
	M[148].columns = 1;
	M[149].mat = &V[1283];		/* GravityCompensationModel\Link5\Hij\output */
	M[149].rows = 4;
	M[149].columns = 4;
	M[150].mat = &V[1299];		/* GravityCompensationModel\Link5\Hij\Hab */
	M[150].rows = 4;
	M[150].columns = 4;
	M[151].mat = &P[84];		/* GravityCompensationModel\Link5\Hij\dim */
	M[151].rows = 3;
	M[151].columns = 1;
	M[152].mat = &V[1315];		/* GravityCompensationModel\Link5\Ta0i\p2.e */
	M[152].rows = 6;
	M[152].columns = 1;
	M[153].mat = &P[88];		/* GravityCompensationModel\Link5\COMdim */
	M[153].rows = 3;
	M[153].columns = 1;
	M[154].mat = &P[91];		/* GravityCompensationModel\Link5\dim */
	M[154].rows = 3;
	M[154].columns = 1;
	M[155].mat = &V[1321];		/* GravityCompensationModel\Mux\port.e */
	M[155].rows = 5;
	M[155].columns = 1;
	M[156].mat = &V[1336];		/* GravityCompensationModel\Wtip0\p.e */
	M[156].rows = 6;
	M[156].columns = 1;
	M[157].mat = &V[1342];		/* GravityCompensationModel\ZeroJunction\p1.f */
	M[157].rows = 6;
	M[157].columns = 1;
	M[158].mat = &V[1348];		/* GravityCompensationModel\ZeroJunction1\p1.f */
	M[158].rows = 5;
	M[158].columns = 1;
	M[159].mat = &P[96];		/* GravityCompensationModel\InitialJointPos */
	M[159].rows = 5;
	M[159].columns = 1;
	M[160].mat = &P[101];		/* GravityCompensationModel\LinkCOMdim */
	M[160].rows = 3;
	M[160].columns = 6;
	M[161].mat = &P[119];		/* GravityCompensationModel\Linkdim */
	M[161].rows = 3;
	M[161].columns = 6;
	M[162].mat = &P[137];		/* GravityCompensationModel\Linkm */
	M[162].rows = 6;
	M[162].columns = 1;
	M[163].mat = &V[1353];		/* JointInitialStateOffset\input */
	M[163].rows = 5;
	M[163].columns = 1;
	M[164].mat = &V[1358];		/* JointInitialStateOffset\output */
	M[164].rows = 5;
	M[164].columns = 1;
	M[165].mat = &P[143];		/* JointInitialStateOffset\joints_initial_states */
	M[165].rows = 5;
	M[165].columns = 1;
	M[166].mat = &V[1363];		/* JointSoftLimits\output */
	M[166].rows = 5;
	M[166].columns = 1;
	M[167].mat = &P[148];		/* JointSoftLimits\c */
	M[167].rows = 5;
	M[167].columns = 1;
	M[168].mat = &P[153];		/* JointSoftLimits\limits_low */
	M[168].rows = 5;
	M[168].columns = 1;
	M[169].mat = &P[158];		/* JointSoftLimits\limits_high */
	M[169].rows = 5;
	M[169].columns = 1;
	M[170].mat = &V[1368];		/* JointSoftLimits\substate */
	M[170].rows = 5;
	M[170].columns = 1;
	M[171].mat = &V[1373];		/* JointSoftLimits\angle_limits_low */
	M[171].rows = 5;
	M[171].columns = 1;
	M[172].mat = &V[1378];		/* JointSoftLimits\angle_limits_high */
	M[172].rows = 5;
	M[172].columns = 1;
	M[173].mat = &V[1383];		/* JointSpaceController\Demux1\output */
	M[173].rows = 5;
	M[173].columns = 1;
	M[174].mat = &V[1393];		/* JointSpaceController\PlusMinus1\output */
	M[174].rows = 5;
	M[174].columns = 1;
	M[175].mat = &V[1398];		/* JointSpaceController\Submodel3\cmd */
	M[175].rows = 5;
	M[175].columns = 1;
	M[176].mat = &V[1403];		/* JointSpaceController\angles_setpoint */
	M[176].rows = 5;
	M[176].columns = 1;
	M[177].mat = &V[1408];		/* JointSpaceController\active_joint */
	M[177].rows = 5;
	M[177].columns = 1;
	M[178].mat = &V[1413];		/* PlusMinus1\output */
	M[178].rows = 5;
	M[178].columns = 1;
	M[179].mat = &V[1418];		/* PlusMinus2\output */
	M[179].rows = 5;
	M[179].columns = 1;
	M[180].mat = &V[1423];		/* PlusMinus3\output */
	M[180].rows = 5;
	M[180].columns = 1;
	M[181].mat = &V[1428];		/* PlusMinus3\plus2 */
	M[181].rows = 5;
	M[181].columns = 1;
	M[182].mat = &V[1433];		/* joints_angle_output */
	M[182].rows = 5;
	M[182].columns = 1;
	M[183].mat = &V[1438];		/* Arm_torque */
	M[183].rows = 5;
	M[183].columns = 1;
	M[184].mat = &V[1443];		/* joints_torque */
	M[184].rows = 5;
	M[184].columns = 1;
	M[185].mat = &V[1448];		/* angles_setpoint */
	M[185].rows = 5;
	M[185].columns = 1;
	M[186].mat = &V[1453];		/* active_joint */
	M[186].rows = 5;
	M[186].columns = 1;
	M[187].mat = &V[1458];		/* joints_angle */
	M[187].rows = 5;
	M[187].columns = 1;
	M[188].mat = &U[0];		/* U1 */
	M[188].rows = 3;
	M[188].columns = 3;
	M[189].mat = &U[9];		/* U2 */
	M[189].rows = 3;
	M[189].columns = 3;
	M[190].mat = &U[18];		/* U3 */
	M[190].rows = 3;
	M[190].columns = 3;
	M[191].mat = &U[27];		/* U4 */
	M[191].rows = 3;
	M[191].columns = 3;
	M[192].mat = &U[36];		/* U5 */
	M[192].rows = 3;
	M[192].columns = 3;
	M[193].mat = &U[45];		/* U6 */
	M[193].rows = 3;
	M[193].columns = 3;
	M[194].mat = &U[54];		/* U7 */
	M[194].rows = 6;
	M[194].columns = 6;
	M[195].mat = &U[90];		/* U8 */
	M[195].rows = 6;
	M[195].columns = 6;
	M[196].mat = &U[126];		/* U9 */
	M[196].rows = 6;
	M[196].columns = 6;
	M[197].mat = &U[162];		/* U10 */
	M[197].rows = 6;
	M[197].columns = 6;
	M[198].mat = &U[198];		/* U11 */
	M[198].rows = 6;
	M[198].columns = 6;
	M[199].mat = &U[234];		/* U12 */
	M[199].rows = 6;
	M[199].columns = 6;
	M[200].mat = &U[270];		/* U13 */
	M[200].rows = 6;
	M[200].columns = 6;
	M[201].mat = &U[306];		/* U14 */
	M[201].rows = 5;
	M[201].columns = 5;
	M[202].mat = &U[331];		/* U15 */
	M[202].rows = 5;
	M[202].columns = 5;
	M[203].mat = &U[356];		/* U16 */
	M[203].rows = 5;
	M[203].columns = 1;
	M[204].mat = &U[361];		/* U17 */
	M[204].rows = 5;
	M[204].columns = 1;
	M[205].mat = &U[366];		/* U18 */
	M[205].rows = 5;
	M[205].columns = 5;
	M[206].mat = &U[391];		/* U19 */
	M[206].rows = 5;
	M[206].columns = 1;
	M[207].mat = &U[396];		/* U20 */
	M[207].rows = 5;
	M[207].columns = 1;
	M[208].mat = &U[401];		/* U21 */
	M[208].rows = 6;
	M[208].columns = 6;
	M[209].mat = &U[437];		/* U22 */
	M[209].rows = 6;
	M[209].columns = 6;
	M[210].mat = &U[473];		/* U23 */
	M[210].rows = 6;
	M[210].columns = 6;
	M[211].mat = &U[509];		/* U24 */
	M[211].rows = 6;
	M[211].columns = 6;
	M[212].mat = &U[545];		/* U25 */
	M[212].rows = 6;
	M[212].columns = 6;
	M[213].mat = &U[581];		/* U26 */
	M[213].rows = 6;
	M[213].columns = 6;
	M[214].mat = &U[617];		/* U27 */
	M[214].rows = 6;
	M[214].columns = 6;
	M[215].mat = &U[653];		/* U28 */
	M[215].rows = 6;
	M[215].columns = 6;
	M[216].mat = &U[689];		/* U29 */
	M[216].rows = 6;
	M[216].columns = 6;
	M[217].mat = &U[725];		/* U30 */
	M[217].rows = 6;
	M[217].columns = 6;
	M[218].mat = &U[761];		/* U31 */
	M[218].rows = 6;
	M[218].columns = 6;
	M[219].mat = &U[797];		/* U32 */
	M[219].rows = 6;
	M[219].columns = 6;
	M[220].mat = &U[833];		/* U33 */
	M[220].rows = 6;
	M[220].columns = 6;
	M[221].mat = &U[869];		/* U34 */
	M[221].rows = 6;
	M[221].columns = 6;
	M[222].mat = &U[905];		/* U35 */
	M[222].rows = 6;
	M[222].columns = 6;
	M[223].mat = &U[941];		/* U36 */
	M[223].rows = 6;
	M[223].columns = 6;
	M[224].mat = &U[977];		/* U37 */
	M[224].rows = 6;
	M[224].columns = 6;
	M[225].mat = &U[1013];		/* U38 */
	M[225].rows = 6;
	M[225].columns = 6;
	M[226].mat = &U[1049];		/* U39 */
	M[226].rows = 6;
	M[226].columns = 6;
	M[227].mat = &U[1085];		/* U40 */
	M[227].rows = 6;
	M[227].columns = 6;
	M[228].mat = &U[1121];		/* U41 */
	M[228].rows = 6;
	M[228].columns = 6;
	M[229].mat = &U[1157];		/* U42 */
	M[229].rows = 6;
	M[229].columns = 6;
	M[230].mat = &U[1193];		/* U43 */
	M[230].rows = 6;
	M[230].columns = 6;
	M[231].mat = &U[1229];		/* U44 */
	M[231].rows = 6;
	M[231].columns = 6;
	M[232].mat = &U[1265];		/* U45 */
	M[232].rows = 6;
	M[232].columns = 6;
	M[233].mat = &U[1301];		/* U46 */
	M[233].rows = 6;
	M[233].columns = 6;
	M[234].mat = &U[1337];		/* U47 */
	M[234].rows = 6;
	M[234].columns = 6;
	M[235].mat = &U[1373];		/* U48 */
	M[235].rows = 6;
	M[235].columns = 6;
	M[236].mat = &U[1409];		/* U49 */
	M[236].rows = 6;
	M[236].columns = 6;
	M[237].mat = &U[1445];		/* U50 */
	M[237].rows = 6;
	M[237].columns = 6;
	M[238].mat = &U[1481];		/* U51 */
	M[238].rows = 6;
	M[238].columns = 6;
	M[239].mat = &U[1517];		/* U52 */
	M[239].rows = 6;
	M[239].columns = 6;
	M[240].mat = &U[1553];		/* U53 */
	M[240].rows = 6;
	M[240].columns = 6;
	M[241].mat = &U[1589];		/* U54 */
	M[241].rows = 6;
	M[241].columns = 6;
	M[242].mat = &U[1625];		/* U55 */
	M[242].rows = 6;
	M[242].columns = 6;
	M[243].mat = &U[1661];		/* U56 */
	M[243].rows = 6;
	M[243].columns = 6;
	M[244].mat = &U[1697];		/* U57 */
	M[244].rows = 6;
	M[244].columns = 6;
	M[245].mat = &U[1733];		/* U58 */
	M[245].rows = 6;
	M[245].columns = 6;
	M[246].mat = &U[1769];		/* U59 */
	M[246].rows = 6;
	M[246].columns = 6;
	M[247].mat = &U[1805];		/* U60 */
	M[247].rows = 6;
	M[247].columns = 6;
	M[248].mat = &U[1841];		/* U61 */
	M[248].rows = 6;
	M[248].columns = 6;
	M[249].mat = &U[1877];		/* U62 */
	M[249].rows = 6;
	M[249].columns = 6;
	M[250].mat = &U[1913];		/* U63 */
	M[250].rows = 6;
	M[250].columns = 6;
	M[251].mat = &U[1949];		/* U64 */
	M[251].rows = 6;
	M[251].columns = 6;
	M[252].mat = &U[1985];		/* U65 */
	M[252].rows = 6;
	M[252].columns = 6;
	M[253].mat = &U[2021];		/* U66 */
	M[253].rows = 6;
	M[253].columns = 6;
	M[254].mat = &U[2057];		/* U67 */
	M[254].rows = 6;
	M[254].columns = 6;
	M[255].mat = &U[2093];		/* U68 */
	M[255].rows = 6;
	M[255].columns = 6;
	M[256].mat = &U[2129];		/* U69 */
	M[256].rows = 6;
	M[256].columns = 6;
	M[257].mat = &U[2165];		/* U70 */
	M[257].rows = 6;
	M[257].columns = 6;
	M[258].mat = &U[2201];		/* U71 */
	M[258].rows = 6;
	M[258].columns = 6;
	M[259].mat = &U[2237];		/* U72 */
	M[259].rows = 6;
	M[259].columns = 6;
	M[260].mat = &U[2273];		/* U73 */
	M[260].rows = 6;
	M[260].columns = 6;
	M[261].mat = &U[2309];		/* U74 */
	M[261].rows = 6;
	M[261].columns = 6;
	M[262].mat = &U[2345];		/* U75 */
	M[262].rows = 6;
	M[262].columns = 6;
	M[263].mat = &U[2381];		/* U76 */
	M[263].rows = 6;
	M[263].columns = 6;
	M[264].mat = &U[2417];		/* U77 */
	M[264].rows = 6;
	M[264].columns = 6;
	M[265].mat = &U[2453];		/* U78 */
	M[265].rows = 6;
	M[265].columns = 6;
	M[266].mat = &U[2489];		/* U79 */
	M[266].rows = 6;
	M[266].columns = 6;
	M[267].mat = &U[2525];		/* U80 */
	M[267].rows = 6;
	M[267].columns = 6;
	M[268].mat = &U[2561];		/* U81 */
	M[268].rows = 6;
	M[268].columns = 6;
	M[269].mat = &U[2597];		/* U82 */
	M[269].rows = 6;
	M[269].columns = 6;
	M[270].mat = &U[2633];		/* U83 */
	M[270].rows = 6;
	M[270].columns = 6;
	M[271].mat = &U[2669];		/* U84 */
	M[271].rows = 6;
	M[271].columns = 6;
	M[272].mat = &U[2705];		/* U85 */
	M[272].rows = 6;
	M[272].columns = 6;
	M[273].mat = &U[2741];		/* U86 */
	M[273].rows = 6;
	M[273].columns = 6;
	M[274].mat = &U[2777];		/* U87 */
	M[274].rows = 6;
	M[274].columns = 6;
	M[275].mat = &U[2813];		/* U88 */
	M[275].rows = 6;
	M[275].columns = 6;
	M[276].mat = &U[2849];		/* U89 */
	M[276].rows = 6;
	M[276].columns = 6;
	M[277].mat = &U[2885];		/* U90 */
	M[277].rows = 6;
	M[277].columns = 6;
	M[278].mat = &U[2921];		/* U91 */
	M[278].rows = 6;
	M[278].columns = 6;
	M[279].mat = &U[2957];		/* U92 */
	M[279].rows = 6;
	M[279].columns = 6;


    //INITIALIZE_DEPSTATES
    //INITIALIZE_ALGLOOPS
    //INITIALIZE_CONSTRAINTS%

    //INPUTS
    //INITIALIZE_INPUTS% -> not the actual inputs

    //OUTPUTS
    //INITIALIZE_OUTPUTS% -> not the actual outputs

    //INITIALIZE_FAVORITE_PARS
    //INITIALIZE_FAVORITE_VARS

    //INITIALIZE_CONSTANTS%
    /* set the states */
    //INITIALIZE_STATES%

    /* set the matrices */
    //INITIALIZE_MATRICES%

    // overload INITIALIZE_* with values from xml
    std::vector<XVMatrix>& pps = m_model_config.getConfiguration();

    for(unsigned int i = 0; i < pps.size(); ++i)
    {
      if( static_cast<unsigned int>(pps[i].storage.rows * pps[i].storage.columns) != pps[i].values.size())
        throw std::out_of_range("" + pps[i].name);

      // Copy to XXData -> double*
      memcpy(pps[i].storage.mat, pps[i].values.data(), pps[i].values.size()*sizeof(double));
    }

    //STATES - do NOT move this line up!
    	s[0] = I[0];		/* JointSpaceController\PD_Joint1\uD_previous */
	s[1] = I[1];		/* JointSpaceController\PD_Joint1\error_previous */
	s[2] = I[2];		/* JointSpaceController\PD_Joint2\uD_previous */
	s[3] = I[3];		/* JointSpaceController\PD_Joint2\error_previous */
	s[4] = I[4];		/* JointSpaceController\PD_Joint3\uD_previous */
	s[5] = I[5];		/* JointSpaceController\PD_Joint3\error_previous */
	s[6] = I[6];		/* JointSpaceController\PD_Joint4\uD_previous */
	s[7] = I[7];		/* JointSpaceController\PD_Joint4\error_previous */
	s[8] = I[8];		/* JointSpaceController\PD_Joint5\uD_previous */
	s[9] = I[9];		/* JointSpaceController\PD_Joint5\error_previous */


    /* end of initialization phase */
    initialize = false;
    return initialize;
  }

  void ArmPoseControllerModel::start()
  {
    /* calculate initial and static equations */
    CalculateInitial ();
    CalculateStatic ();
    CopyInputsToVariables ();
    CalculateInput ();
    CalculateDynamic();
    CalculateOutput ();
    CopyVariablesToOutputs ();
  }

  void ArmPoseControllerModel::step()
  {
    /* another precessor submodel could determine the parameters of this submodel
         and therefore the static parameter calculations need to be performed. */
    CalculateStatic ();

    /* main calculation of the model */
    CopyInputsToVariables (); //get input from port
    CalculateInput ();
    myintegmethod.Step();
    CalculateOutput ();
    CopyVariablesToOutputs (); //send output to port
  }

  void ArmPoseControllerModel::stop()
  {
    CopyInputsToVariables();
    /* calculate the final model equations */
    CalculateFinal ();
    CopyVariablesToOutputs();
  }

  XXDouble ArmPoseControllerModel::getTime(void)
  {
    return time;
  }

	/* This function calculates the initial equations of the model.
	 * These equations are calculated before anything else
	 */
	inline void ArmPoseControllerModel::CalculateInitial (void)
	{
				/* GravityCompensationModel\Base\AdHik1\COMdim = GravityCompensationModel\Base\COMdim; */
		XXMatrixMov (&M[7], &M[17]);

		/* GravityCompensationModel\Base\Hij\dim = GravityCompensationModel\Base\dim; */
		XXMatrixMov (&M[15], &M[18]);

		/* GravityCompensationModel\Base\Gravity\m = GravityCompensationModel\Base\m; */
		P[3] = P[7];

		/* GravityCompensationModel\Joint12\Integrate\init = GravityCompensationModel\Joint12\InitialPos; */
		P[14] = P[15];

		/* GravityCompensationModel\Joint23\Integrate\init = GravityCompensationModel\Joint23\InitialPos; */
		P[16] = P[17];

		/* GravityCompensationModel\Joint34\Integrate\init = GravityCompensationModel\Joint34\InitialPos; */
		P[18] = P[19];

		/* GravityCompensationModel\Joint45\Integrate\init = GravityCompensationModel\Joint45\InitialPos; */
		P[20] = P[21];

		/* GravityCompensationModel\JointBase1\Integrate\init = GravityCompensationModel\JointBase1\InitialPos; */
		P[22] = P[23];

		/* GravityCompensationModel\Link1\AdHik1\COMdim = GravityCompensationModel\Link1\COMdim; */
		XXMatrixMov (&M[67], &M[77]);

		/* GravityCompensationModel\Link1\Hij\dim = GravityCompensationModel\Link1\dim; */
		XXMatrixMov (&M[75], &M[78]);

		/* GravityCompensationModel\Link1\Gravity\m = GravityCompensationModel\Link1\m; */
		P[27] = P[31];

		/* GravityCompensationModel\Link2\AdHik1\COMdim = GravityCompensationModel\Link2\COMdim; */
		XXMatrixMov (&M[86], &M[96]);

		/* GravityCompensationModel\Link2\Hij\dim = GravityCompensationModel\Link2\dim; */
		XXMatrixMov (&M[94], &M[97]);

		/* GravityCompensationModel\Link2\Gravity\m = GravityCompensationModel\Link2\m; */
		P[41] = P[45];

		/* GravityCompensationModel\Link3\AdHik1\COMdim = GravityCompensationModel\Link3\COMdim; */
		XXMatrixMov (&M[105], &M[115]);

		/* GravityCompensationModel\Link3\Hij\dim = GravityCompensationModel\Link3\dim; */
		XXMatrixMov (&M[113], &M[116]);

		/* GravityCompensationModel\Link3\Gravity\m = GravityCompensationModel\Link3\m; */
		P[55] = P[59];

		/* GravityCompensationModel\Link4\AdHik1\COMdim = GravityCompensationModel\Link4\COMdim; */
		XXMatrixMov (&M[124], &M[134]);

		/* GravityCompensationModel\Link4\Hij\dim = GravityCompensationModel\Link4\dim; */
		XXMatrixMov (&M[132], &M[135]);

		/* GravityCompensationModel\Link4\Gravity\m = GravityCompensationModel\Link4\m; */
		P[69] = P[73];

		/* GravityCompensationModel\Link5\AdHik1\COMdim = GravityCompensationModel\Link5\COMdim; */
		XXMatrixMov (&M[143], &M[153]);

		/* GravityCompensationModel\Link5\Hij\dim = GravityCompensationModel\Link5\dim; */
		XXMatrixMov (&M[151], &M[154]);

		/* GravityCompensationModel\Link5\Gravity\m = GravityCompensationModel\Link5\m; */
		P[83] = P[87];

		/* GravityCompensationModel\Base\m = GravityCompensationModel\Linkm[1]; */
		P[7] = M[162].mat[0];

		/* GravityCompensationModel\Base\COMdim = GravityCompensationModel\LinkCOMdim[1:3,1]; */
		M[17].mat[0] = M[160].mat[0];
		M[17].mat[1] = M[160].mat[6];
		M[17].mat[2] = M[160].mat[12];

		/* GravityCompensationModel\Base\dim = GravityCompensationModel\Linkdim[1:3,1]; */
		M[18].mat[0] = M[161].mat[0];
		M[18].mat[1] = M[161].mat[6];
		M[18].mat[2] = M[161].mat[12];

		/* GravityCompensationModel\Link1\m = GravityCompensationModel\Linkm[2]; */
		P[31] = M[162].mat[1];

		/* GravityCompensationModel\Link1\COMdim = GravityCompensationModel\LinkCOMdim[1:3,2]; */
		M[77].mat[0] = M[160].mat[1];
		M[77].mat[1] = M[160].mat[7];
		M[77].mat[2] = M[160].mat[13];

		/* GravityCompensationModel\Link1\dim = GravityCompensationModel\Linkdim[1:3,2]; */
		M[78].mat[0] = M[161].mat[1];
		M[78].mat[1] = M[161].mat[7];
		M[78].mat[2] = M[161].mat[13];

		/* GravityCompensationModel\Link2\m = GravityCompensationModel\Linkm[3]; */
		P[45] = M[162].mat[2];

		/* GravityCompensationModel\Link2\COMdim = GravityCompensationModel\LinkCOMdim[1:3,3]; */
		M[96].mat[0] = M[160].mat[2];
		M[96].mat[1] = M[160].mat[8];
		M[96].mat[2] = M[160].mat[14];

		/* GravityCompensationModel\Link2\dim = GravityCompensationModel\Linkdim[1:3,3]; */
		M[97].mat[0] = M[161].mat[2];
		M[97].mat[1] = M[161].mat[8];
		M[97].mat[2] = M[161].mat[14];

		/* GravityCompensationModel\Link3\m = GravityCompensationModel\Linkm[4]; */
		P[59] = M[162].mat[3];

		/* GravityCompensationModel\Link3\COMdim = GravityCompensationModel\LinkCOMdim[1:3,4]; */
		M[115].mat[0] = M[160].mat[3];
		M[115].mat[1] = M[160].mat[9];
		M[115].mat[2] = M[160].mat[15];

		/* GravityCompensationModel\Link3\dim = GravityCompensationModel\Linkdim[1:3,4]; */
		M[116].mat[0] = M[161].mat[3];
		M[116].mat[1] = M[161].mat[9];
		M[116].mat[2] = M[161].mat[15];

		/* GravityCompensationModel\Link4\m = GravityCompensationModel\Linkm[5]; */
		P[73] = M[162].mat[4];

		/* GravityCompensationModel\Link4\COMdim = GravityCompensationModel\LinkCOMdim[1:3,5]; */
		M[134].mat[0] = M[160].mat[4];
		M[134].mat[1] = M[160].mat[10];
		M[134].mat[2] = M[160].mat[16];

		/* GravityCompensationModel\Link4\dim = GravityCompensationModel\Linkdim[1:3,5]; */
		M[135].mat[0] = M[161].mat[4];
		M[135].mat[1] = M[161].mat[10];
		M[135].mat[2] = M[161].mat[16];

		/* GravityCompensationModel\Link5\m = GravityCompensationModel\Linkm[6]; */
		P[87] = M[162].mat[5];

		/* GravityCompensationModel\Link5\COMdim = GravityCompensationModel\LinkCOMdim[1:3,6]; */
		M[153].mat[0] = M[160].mat[5];
		M[153].mat[1] = M[160].mat[11];
		M[153].mat[2] = M[160].mat[17];

		/* GravityCompensationModel\Link5\dim = GravityCompensationModel\Linkdim[1:3,6]; */
		M[154].mat[0] = M[161].mat[5];
		M[154].mat[1] = M[161].mat[11];
		M[154].mat[2] = M[161].mat[17];

		/* GravityCompensationModel\JointBase1\InitialPos = GravityCompensationModel\InitialJointPos[1]; */
		P[23] = M[159].mat[0];

		/* GravityCompensationModel\Joint12\InitialPos = GravityCompensationModel\InitialJointPos[2]; */
		P[15] = M[159].mat[1];

		/* GravityCompensationModel\Joint23\InitialPos = GravityCompensationModel\InitialJointPos[3]; */
		P[17] = M[159].mat[2];

		/* GravityCompensationModel\Joint34\InitialPos = GravityCompensationModel\InitialJointPos[4]; */
		P[19] = M[159].mat[3];

		/* GravityCompensationModel\Joint45\InitialPos = GravityCompensationModel\InitialJointPos[5]; */
		P[21] = M[159].mat[4];

	}

	/* This function calculates the static equations of the model.
	 * These equations are only dependent from parameters and constants
	 */
	inline void ArmPoseControllerModel::CalculateStatic (void)
	{
			/* GravityCompensationModel\Base\AdHik1\d = GravityCompensationModel\Base\AdHik1\COMdim; */
	XXMatrixMov (&M[8], &M[7]);

	/* GravityCompensationModel\Base\AdHik1\R = eye (3); */
	XXMatrixEye (&M[9]);

	/* GravityCompensationModel\Base\AdHik1\H = homogeneous (GravityCompensationModel\Base\AdHik1\R, GravityCompensationModel\Base\AdHik1\d); */
	XXMatrixHomogeneous (&M[10], &M[9], &M[8]);

	/* GravityCompensationModel\Base\AdHik1\AdH = Adjoint (GravityCompensationModel\Base\AdHik1\H); */
	XXMatrixAdjoint (&M[11], &M[10]);

	/* GravityCompensationModel\Base\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Base\Gravity\m]; */
	M[12].mat[0] = 0.0;
	M[12].mat[1] = 0.0;
	M[12].mat[2] = 0.0;
	M[12].mat[3] = 0.0;
	M[12].mat[4] = 0.0;
	M[12].mat[5] = -9.8 * P[3];

	/* GravityCompensationModel\Base\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Base\Hij\dim); */
	XXMatrixEye (&M[188]);
	XXMatrixHomogeneous (&M[14], &M[188], &M[15]);

	/* GravityCompensationModel\Hfloor0\output = eye (4); */
	XXMatrixEye (&M[19]);

	/* GravityCompensationModel\Joint12\Integrate\p = [0; 0; 0]; */
	M[24].mat[0] = 0.0;
	M[24].mat[1] = 0.0;
	M[24].mat[2] = 0.0;

	/* GravityCompensationModel\Joint23\Integrate\p = [0; 0; 0]; */
	M[32].mat[0] = 0.0;
	M[32].mat[1] = 0.0;
	M[32].mat[2] = 0.0;

	/* GravityCompensationModel\Joint34\Integrate\p = [0; 0; 0]; */
	M[40].mat[0] = 0.0;
	M[40].mat[1] = 0.0;
	M[40].mat[2] = 0.0;

	/* GravityCompensationModel\Joint45\Integrate\p = [0; 0; 0]; */
	M[48].mat[0] = 0.0;
	M[48].mat[1] = 0.0;
	M[48].mat[2] = 0.0;

	/* GravityCompensationModel\JointBase1\Integrate\p = [0; 0; 0]; */
	M[56].mat[0] = 0.0;
	M[56].mat[1] = 0.0;
	M[56].mat[2] = 0.0;

	/* GravityCompensationModel\Link1\AdHik1\d = GravityCompensationModel\Link1\AdHik1\COMdim; */
	XXMatrixMov (&M[68], &M[67]);

	/* GravityCompensationModel\Link1\AdHik1\R = eye (3); */
	XXMatrixEye (&M[69]);

	/* GravityCompensationModel\Link1\AdHik1\H = homogeneous (GravityCompensationModel\Link1\AdHik1\R, GravityCompensationModel\Link1\AdHik1\d); */
	XXMatrixHomogeneous (&M[70], &M[69], &M[68]);

	/* GravityCompensationModel\Link1\AdHik1\AdH = Adjoint (GravityCompensationModel\Link1\AdHik1\H); */
	XXMatrixAdjoint (&M[71], &M[70]);

	/* GravityCompensationModel\Link1\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Link1\Gravity\m]; */
	M[72].mat[0] = 0.0;
	M[72].mat[1] = 0.0;
	M[72].mat[2] = 0.0;
	M[72].mat[3] = 0.0;
	M[72].mat[4] = 0.0;
	M[72].mat[5] = -9.8 * P[27];

	/* GravityCompensationModel\Link1\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Link1\Hij\dim); */
	XXMatrixEye (&M[189]);
	XXMatrixHomogeneous (&M[74], &M[189], &M[75]);

	/* GravityCompensationModel\Link2\AdHik1\d = GravityCompensationModel\Link2\AdHik1\COMdim; */
	XXMatrixMov (&M[87], &M[86]);

	/* GravityCompensationModel\Link2\AdHik1\R = eye (3); */
	XXMatrixEye (&M[88]);

	/* GravityCompensationModel\Link2\AdHik1\H = homogeneous (GravityCompensationModel\Link2\AdHik1\R, GravityCompensationModel\Link2\AdHik1\d); */
	XXMatrixHomogeneous (&M[89], &M[88], &M[87]);

	/* GravityCompensationModel\Link2\AdHik1\AdH = Adjoint (GravityCompensationModel\Link2\AdHik1\H); */
	XXMatrixAdjoint (&M[90], &M[89]);

	/* GravityCompensationModel\Link2\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Link2\Gravity\m]; */
	M[91].mat[0] = 0.0;
	M[91].mat[1] = 0.0;
	M[91].mat[2] = 0.0;
	M[91].mat[3] = 0.0;
	M[91].mat[4] = 0.0;
	M[91].mat[5] = -9.8 * P[41];

	/* GravityCompensationModel\Link2\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Link2\Hij\dim); */
	XXMatrixEye (&M[190]);
	XXMatrixHomogeneous (&M[93], &M[190], &M[94]);

	/* GravityCompensationModel\Link3\AdHik1\d = GravityCompensationModel\Link3\AdHik1\COMdim; */
	XXMatrixMov (&M[106], &M[105]);

	/* GravityCompensationModel\Link3\AdHik1\R = eye (3); */
	XXMatrixEye (&M[107]);

	/* GravityCompensationModel\Link3\AdHik1\H = homogeneous (GravityCompensationModel\Link3\AdHik1\R, GravityCompensationModel\Link3\AdHik1\d); */
	XXMatrixHomogeneous (&M[108], &M[107], &M[106]);

	/* GravityCompensationModel\Link3\AdHik1\AdH = Adjoint (GravityCompensationModel\Link3\AdHik1\H); */
	XXMatrixAdjoint (&M[109], &M[108]);

	/* GravityCompensationModel\Link3\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Link3\Gravity\m]; */
	M[110].mat[0] = 0.0;
	M[110].mat[1] = 0.0;
	M[110].mat[2] = 0.0;
	M[110].mat[3] = 0.0;
	M[110].mat[4] = 0.0;
	M[110].mat[5] = -9.8 * P[55];

	/* GravityCompensationModel\Link3\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Link3\Hij\dim); */
	XXMatrixEye (&M[191]);
	XXMatrixHomogeneous (&M[112], &M[191], &M[113]);

	/* GravityCompensationModel\Link4\AdHik1\d = GravityCompensationModel\Link4\AdHik1\COMdim; */
	XXMatrixMov (&M[125], &M[124]);

	/* GravityCompensationModel\Link4\AdHik1\R = eye (3); */
	XXMatrixEye (&M[126]);

	/* GravityCompensationModel\Link4\AdHik1\H = homogeneous (GravityCompensationModel\Link4\AdHik1\R, GravityCompensationModel\Link4\AdHik1\d); */
	XXMatrixHomogeneous (&M[127], &M[126], &M[125]);

	/* GravityCompensationModel\Link4\AdHik1\AdH = Adjoint (GravityCompensationModel\Link4\AdHik1\H); */
	XXMatrixAdjoint (&M[128], &M[127]);

	/* GravityCompensationModel\Link4\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Link4\Gravity\m]; */
	M[129].mat[0] = 0.0;
	M[129].mat[1] = 0.0;
	M[129].mat[2] = 0.0;
	M[129].mat[3] = 0.0;
	M[129].mat[4] = 0.0;
	M[129].mat[5] = -9.8 * P[69];

	/* GravityCompensationModel\Link4\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Link4\Hij\dim); */
	XXMatrixEye (&M[192]);
	XXMatrixHomogeneous (&M[131], &M[192], &M[132]);

	/* GravityCompensationModel\Link5\AdHik1\d = GravityCompensationModel\Link5\AdHik1\COMdim; */
	XXMatrixMov (&M[144], &M[143]);

	/* GravityCompensationModel\Link5\AdHik1\R = eye (3); */
	XXMatrixEye (&M[145]);

	/* GravityCompensationModel\Link5\AdHik1\H = homogeneous (GravityCompensationModel\Link5\AdHik1\R, GravityCompensationModel\Link5\AdHik1\d); */
	XXMatrixHomogeneous (&M[146], &M[145], &M[144]);

	/* GravityCompensationModel\Link5\AdHik1\AdH = Adjoint (GravityCompensationModel\Link5\AdHik1\H); */
	XXMatrixAdjoint (&M[147], &M[146]);

	/* GravityCompensationModel\Link5\Gravity\effort = [0; 0; 0; 0; 0; -9.8 * GravityCompensationModel\Link5\Gravity\m]; */
	M[148].mat[0] = 0.0;
	M[148].mat[1] = 0.0;
	M[148].mat[2] = 0.0;
	M[148].mat[3] = 0.0;
	M[148].mat[4] = 0.0;
	M[148].mat[5] = -9.8 * P[83];

	/* GravityCompensationModel\Link5\Hij\Hab = homogeneous (eye (3), GravityCompensationModel\Link5\Hij\dim); */
	XXMatrixEye (&M[193]);
	XXMatrixHomogeneous (&M[150], &M[193], &M[151]);

	/* GravityCompensationModel\Wtip0\p.e = GravityCompensationModel\Wtip0\effort; */
	XXMatrixScalarMov (&M[156], P[95]);

	/* GravityCompensationModel\ZeroJunction\p1.f = 0; */
	XXMatrixScalarMov (&M[157], 0.0);

	/* GravityCompensationModel\ZeroJunction1\p1.f = 0; */
	XXMatrixScalarMov (&M[158], 0.0);

	/* GravityCompensationModel\Link5\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Link5\Hij\Hab)) * GravityCompensationModel\Wtip0\p.e; */
	XXMatrixAdjoint (&M[195], &M[150]);
	XXMatrixTranspose (&M[194], &M[195]);
	XXMatrixMul (&M[139], &M[194], &M[156]);

	/* GravityCompensationModel\Base\AdHij\p2.f = Adjoint (GravityCompensationModel\Base\Hij\Hab) * GravityCompensationModel\ZeroJunction\p1.f; */
	XXMatrixAdjoint (&M[196], &M[14]);
	XXMatrixMul (&M[4], &M[196], &M[157]);

	/* GravityCompensationModel\Base\AdHik1\p2.f = (1.0 / GravityCompensationModel\Base\AdHik1\AdH) * GravityCompensationModel\ZeroJunction\p1.f; */
	XXScalarMatrixDiv (&M[197], 1.0, &M[11], workarray);
	XXMatrixMul (&M[6], &M[197], &M[157]);

	/* GravityCompensationModel\Base\Hij\output = GravityCompensationModel\Hfloor0\output * GravityCompensationModel\Base\Hij\Hab; */
	XXMatrixMul (&M[13], &M[19], &M[14]);

	}

	/* This function calculates the input equations of the model.
	 * These equations are dynamic equations that must not change
	 * in calls from the integration method (like random and delay).
	 */
	inline void ArmPoseControllerModel::CalculateInput (void)
	{
		
	}

	/* This function calculates the dynamic equations of the model.
	 * These equations are called from the integration method
	 * to calculate the new model rates (that are then integrated).
	 */
	inline void ArmPoseControllerModel::CalculateDynamic (void)
	{
			/* JointSpaceController\PD_Joint1\factor = 1 / (sampletime + JointSpaceController\PD_Joint1\tauD * JointSpaceController\PD_Joint1\beta); */
	V[1388] = 1.0 / (step_size + P[165] * P[166]);

	/* JointSpaceController\PD_Joint2\factor = 1 / (sampletime + JointSpaceController\PD_Joint2\tauD * JointSpaceController\PD_Joint2\beta); */
	V[1389] = 1.0 / (step_size + P[168] * P[169]);

	/* JointSpaceController\PD_Joint3\factor = 1 / (sampletime + JointSpaceController\PD_Joint3\tauD * JointSpaceController\PD_Joint3\beta); */
	V[1390] = 1.0 / (step_size + P[171] * P[172]);

	/* JointSpaceController\PD_Joint4\factor = 1 / (sampletime + JointSpaceController\PD_Joint4\tauD * JointSpaceController\PD_Joint4\beta); */
	V[1391] = 1.0 / (step_size + P[174] * P[175]);

	/* JointSpaceController\PD_Joint5\factor = 1 / (sampletime + JointSpaceController\PD_Joint5\tauD * JointSpaceController\PD_Joint5\beta); */
	V[1392] = 1.0 / (step_size + P[177] * P[178]);

	/* PlusMinus3\plus2 = joints_torque; */
	XXMatrixMov (&M[181], &M[184]);

	/* JointSpaceController\angles_setpoint = angles_setpoint; */
	XXMatrixMov (&M[176], &M[185]);

	/* JointSpaceController\active_joint = active_joint; */
	XXMatrixMov (&M[177], &M[186]);

	/* JointInitialStateOffset\input = joints_angle; */
	XXMatrixMov (&M[163], &M[187]);

	/* JointInitialStateOffset\output = JointInitialStateOffset\joints_initial_states + JointInitialStateOffset\input; */
	XXMatrixAdd (&M[164], &M[165], &M[163]);

		/* GravityCompensationModel\Base\AdHi0\onlyRotH = GravityCompensationModel\Hfloor0\output; */
		XXMatrixMov (&M[2], &M[19]);

		/* GravityCompensationModel\Base\AdHi0\onlyRotH[1,4] = 0; */
		M[2].mat[3] = 0.0;

		/* GravityCompensationModel\Base\AdHi0\onlyRotH[2,4] = 0; */
		M[2].mat[7] = 0.0;

		/* GravityCompensationModel\Base\AdHi0\onlyRotH[3,4] = 0; */
		M[2].mat[11] = 0.0;

		/* GravityCompensationModel\Base\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Base\AdHi0\onlyRotH)) * GravityCompensationModel\Base\Gravity\effort; */
		XXMatrixAdjoint (&M[199], &M[2]);
		XXMatrixTranspose (&M[198], &M[199]);
		XXMatrixMul (&M[1], &M[198], &M[12]);

		/* GravityCompensationModel\Base\AdHi0\p1.f = Adjoint (GravityCompensationModel\Base\AdHi0\onlyRotH) * GravityCompensationModel\Base\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[200], &M[2]);
		XXMatrixMul (&M[0], &M[200], &M[6]);

	/* GravityCompensationModel\Submodel13\port1 = JointInitialStateOffset\output[1]; */
	V[1331] = M[164].mat[0];

	/* GravityCompensationModel\Submodel13\port2 = JointInitialStateOffset\output[2]; */
	V[1332] = M[164].mat[1];

	/* GravityCompensationModel\Submodel13\port3 = JointInitialStateOffset\output[3]; */
	V[1333] = M[164].mat[2];

	/* GravityCompensationModel\Submodel13\port4 = JointInitialStateOffset\output[4]; */
	V[1334] = M[164].mat[3];

	/* GravityCompensationModel\Submodel13\port5 = JointInitialStateOffset\output[5]; */
	V[1335] = M[164].mat[4];

		/* JointSoftLimits\angle_limits_low = JointSoftLimits\working_range * JointSoftLimits\limits_low; */
		XXScalarMatrixMul (&M[171], P[163], &M[168]);

		/* JointSoftLimits\angle_limits_high = JointSoftLimits\working_range * JointSoftLimits\limits_high; */
		XXScalarMatrixMul (&M[172], P[163], &M[169]);

		/* JointSoftLimits\substate[1] = (if JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_high[1] < 0 then 0 else if JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_high[1] > 10 then 10 else JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_high[1] end end) + (if JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_low[1] < -10 then -10 else if JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_low[1] > 0 then 0 else JointInitialStateOffset\output[1] - JointSoftLimits\angle_limits_low[1] end end); */
		M[170].mat[0] = ((M[164].mat[0] - M[172].mat[0] < 0.0) ? 0.0 : ((M[164].mat[0] - M[172].mat[0] > 10.0) ? 10.0 : (M[164].mat[0] - M[172].mat[0]))) + ((M[164].mat[0] - M[171].mat[0] < -10.0) ? -10.0 : ((M[164].mat[0] - M[171].mat[0] > 0.0) ? 0.0 : (M[164].mat[0] - M[171].mat[0])));

		/* JointSoftLimits\substate[2] = (if JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_high[2] < 0 then 0 else if JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_high[2] > 10 then 10 else JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_high[2] end end) + (if JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_low[2] < -10 then -10 else if JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_low[2] > 0 then 0 else JointInitialStateOffset\output[2] - JointSoftLimits\angle_limits_low[2] end end); */
		M[170].mat[1] = ((M[164].mat[1] - M[172].mat[1] < 0.0) ? 0.0 : ((M[164].mat[1] - M[172].mat[1] > 10.0) ? 10.0 : (M[164].mat[1] - M[172].mat[1]))) + ((M[164].mat[1] - M[171].mat[1] < -10.0) ? -10.0 : ((M[164].mat[1] - M[171].mat[1] > 0.0) ? 0.0 : (M[164].mat[1] - M[171].mat[1])));

		/* JointSoftLimits\substate[3] = (if JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_high[3] < 0 then 0 else if JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_high[3] > 10 then 10 else JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_high[3] end end) + (if JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_low[3] < -10 then -10 else if JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_low[3] > 0 then 0 else JointInitialStateOffset\output[3] - JointSoftLimits\angle_limits_low[3] end end); */
		M[170].mat[2] = ((M[164].mat[2] - M[172].mat[2] < 0.0) ? 0.0 : ((M[164].mat[2] - M[172].mat[2] > 10.0) ? 10.0 : (M[164].mat[2] - M[172].mat[2]))) + ((M[164].mat[2] - M[171].mat[2] < -10.0) ? -10.0 : ((M[164].mat[2] - M[171].mat[2] > 0.0) ? 0.0 : (M[164].mat[2] - M[171].mat[2])));

		/* JointSoftLimits\substate[4] = (if JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_high[4] < 0 then 0 else if JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_high[4] > 10 then 10 else JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_high[4] end end) + (if JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_low[4] < -10 then -10 else if JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_low[4] > 0 then 0 else JointInitialStateOffset\output[4] - JointSoftLimits\angle_limits_low[4] end end); */
		M[170].mat[3] = ((M[164].mat[3] - M[172].mat[3] < 0.0) ? 0.0 : ((M[164].mat[3] - M[172].mat[3] > 10.0) ? 10.0 : (M[164].mat[3] - M[172].mat[3]))) + ((M[164].mat[3] - M[171].mat[3] < -10.0) ? -10.0 : ((M[164].mat[3] - M[171].mat[3] > 0.0) ? 0.0 : (M[164].mat[3] - M[171].mat[3])));

		/* JointSoftLimits\substate[5] = (if JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_high[5] < 0 then 0 else if JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_high[5] > 10 then 10 else JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_high[5] end end) + (if JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_low[5] < -10 then -10 else if JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_low[5] > 0 then 0 else JointInitialStateOffset\output[5] - JointSoftLimits\angle_limits_low[5] end end); */
		M[170].mat[4] = ((M[164].mat[4] - M[172].mat[4] < 0.0) ? 0.0 : ((M[164].mat[4] - M[172].mat[4] > 10.0) ? 10.0 : (M[164].mat[4] - M[172].mat[4]))) + ((M[164].mat[4] - M[171].mat[4] < -10.0) ? -10.0 : ((M[164].mat[4] - M[171].mat[4] > 0.0) ? 0.0 : (M[164].mat[4] - M[171].mat[4])));

		/* JointSoftLimits\output = -diag (JointSoftLimits\c) * (exp (JointSoftLimits\substate) - 1); */
		XXMatrixDiag (&M[202], &M[167]);
		XXMatrixInv (&M[201], &M[202]);
		M[204].mat[0] = exp (M[170].mat[0]);
		M[204].mat[1] = exp (M[170].mat[1]);
		M[204].mat[2] = exp (M[170].mat[2]);
		M[204].mat[3] = exp (M[170].mat[3]);
		M[204].mat[4] = exp (M[170].mat[4]);
		XXMatrixScalarSub (&M[203], &M[204], 1.0);
		XXMatrixMul (&M[166], &M[201], &M[203]);

	/* joints_angle_output = JointInitialStateOffset\output; */
	XXMatrixMov (&M[182], &M[164]);

	/* GravityCompensationModel\Joint12\Integrate\R = [cos (GravityCompensationModel\Submodel13\port2), 0, sin (GravityCompensationModel\Submodel13\port2); 0, 1, 0; -sin (GravityCompensationModel\Submodel13\port2), 0, cos (GravityCompensationModel\Submodel13\port2)]; */
	M[23].mat[0] = cos (V[1332]);
	M[23].mat[1] = 0.0;
	M[23].mat[2] = sin (V[1332]);
	M[23].mat[3] = 0.0;
	M[23].mat[4] = 1.0;
	M[23].mat[5] = 0.0;
	M[23].mat[6] = -(sin (V[1332]));
	M[23].mat[7] = 0.0;
	M[23].mat[8] = cos (V[1332]);

	/* GravityCompensationModel\Joint12\Integrate\output = homogeneous (GravityCompensationModel\Joint12\Integrate\R, GravityCompensationModel\Joint12\Integrate\p); */
	XXMatrixHomogeneous (&M[22], &M[23], &M[24]);

	/* GravityCompensationModel\Joint23\Integrate\R = [cos (GravityCompensationModel\Submodel13\port3), 0, sin (GravityCompensationModel\Submodel13\port3); 0, 1, 0; -sin (GravityCompensationModel\Submodel13\port3), 0, cos (GravityCompensationModel\Submodel13\port3)]; */
	M[31].mat[0] = cos (V[1333]);
	M[31].mat[1] = 0.0;
	M[31].mat[2] = sin (V[1333]);
	M[31].mat[3] = 0.0;
	M[31].mat[4] = 1.0;
	M[31].mat[5] = 0.0;
	M[31].mat[6] = -(sin (V[1333]));
	M[31].mat[7] = 0.0;
	M[31].mat[8] = cos (V[1333]);

	/* GravityCompensationModel\Joint23\Integrate\output = homogeneous (GravityCompensationModel\Joint23\Integrate\R, GravityCompensationModel\Joint23\Integrate\p); */
	XXMatrixHomogeneous (&M[30], &M[31], &M[32]);

	/* GravityCompensationModel\Joint34\Integrate\R = [cos (GravityCompensationModel\Submodel13\port4), 0, sin (GravityCompensationModel\Submodel13\port4); 0, 1, 0; -sin (GravityCompensationModel\Submodel13\port4), 0, cos (GravityCompensationModel\Submodel13\port4)]; */
	M[39].mat[0] = cos (V[1334]);
	M[39].mat[1] = 0.0;
	M[39].mat[2] = sin (V[1334]);
	M[39].mat[3] = 0.0;
	M[39].mat[4] = 1.0;
	M[39].mat[5] = 0.0;
	M[39].mat[6] = -(sin (V[1334]));
	M[39].mat[7] = 0.0;
	M[39].mat[8] = cos (V[1334]);

	/* GravityCompensationModel\Joint34\Integrate\output = homogeneous (GravityCompensationModel\Joint34\Integrate\R, GravityCompensationModel\Joint34\Integrate\p); */
	XXMatrixHomogeneous (&M[38], &M[39], &M[40]);

	/* GravityCompensationModel\Joint45\Integrate\R = [cos (-GravityCompensationModel\Submodel13\port5), -sin (-GravityCompensationModel\Submodel13\port5), 0; sin (-GravityCompensationModel\Submodel13\port5), cos (-GravityCompensationModel\Submodel13\port5), 0; 0, 0, 1]; */
	M[47].mat[0] = cos (-V[1335]);
	M[47].mat[1] = -(sin (-V[1335]));
	M[47].mat[2] = 0.0;
	M[47].mat[3] = sin (-V[1335]);
	M[47].mat[4] = cos (-V[1335]);
	M[47].mat[5] = 0.0;
	M[47].mat[6] = 0.0;
	M[47].mat[7] = 0.0;
	M[47].mat[8] = 1.0;

	/* GravityCompensationModel\Joint45\Integrate\output = homogeneous (GravityCompensationModel\Joint45\Integrate\R, GravityCompensationModel\Joint45\Integrate\p); */
	XXMatrixHomogeneous (&M[46], &M[47], &M[48]);

	/* GravityCompensationModel\JointBase1\Integrate\R = [cos (-GravityCompensationModel\Submodel13\port1), -sin (-GravityCompensationModel\Submodel13\port1), 0; sin (-GravityCompensationModel\Submodel13\port1), cos (-GravityCompensationModel\Submodel13\port1), 0; 0, 0, 1]; */
	M[55].mat[0] = cos (-V[1331]);
	M[55].mat[1] = -(sin (-V[1331]));
	M[55].mat[2] = 0.0;
	M[55].mat[3] = sin (-V[1331]);
	M[55].mat[4] = cos (-V[1331]);
	M[55].mat[5] = 0.0;
	M[55].mat[6] = 0.0;
	M[55].mat[7] = 0.0;
	M[55].mat[8] = 1.0;

	/* GravityCompensationModel\JointBase1\Integrate\output = homogeneous (GravityCompensationModel\JointBase1\Integrate\R, GravityCompensationModel\JointBase1\Integrate\p); */
	XXMatrixHomogeneous (&M[54], &M[55], &M[56]);

	/* JointSpaceController\PlusMinus1\output = JointSpaceController\angles_setpoint - JointInitialStateOffset\output; */
	XXMatrixSub (&M[174], &M[176], &M[164]);

	/* JointSpaceController\PD_Joint1\error = JointSpaceController\PlusMinus1\output[1]; */
	R[1] = M[174].mat[0];

	/* JointSpaceController\PD_Joint2\error = JointSpaceController\PlusMinus1\output[2]; */
	R[3] = M[174].mat[1];

	/* JointSpaceController\PD_Joint3\error = JointSpaceController\PlusMinus1\output[3]; */
	R[5] = M[174].mat[2];

	/* JointSpaceController\PD_Joint4\error = JointSpaceController\PlusMinus1\output[4]; */
	R[7] = M[174].mat[3];

	/* JointSpaceController\PD_Joint5\error = JointSpaceController\PlusMinus1\output[5]; */
	R[9] = M[174].mat[4];

	/* GravityCompensationModel\JointBase1\MatrixMul\output = GravityCompensationModel\Base\Hij\output * GravityCompensationModel\JointBase1\Integrate\output; */
	XXMatrixMul (&M[57], &M[13], &M[54]);

	/* JointSpaceController\PD_Joint1\uD = JointSpaceController\PD_Joint1\factor * (((JointSpaceController\PD_Joint1\tauD * JointSpaceController\PD_Joint1\uD_previous) * JointSpaceController\PD_Joint1\beta + (JointSpaceController\PD_Joint1\tauD * JointSpaceController\PD_Joint1\kp) * (JointSpaceController\PD_Joint1\error - JointSpaceController\PD_Joint1\error_previous)) + (sampletime * JointSpaceController\PD_Joint1\kp) * JointSpaceController\PD_Joint1\error); */
	R[0] = V[1388] * (((P[165] * s[0]) * P[166] + (P[165] * P[164]) * (R[1] - s[1])) + (step_size * P[164]) * R[1]);

	/* JointSpaceController\PD_Joint2\uD = JointSpaceController\PD_Joint2\factor * (((JointSpaceController\PD_Joint2\tauD * JointSpaceController\PD_Joint2\uD_previous) * JointSpaceController\PD_Joint2\beta + (JointSpaceController\PD_Joint2\tauD * JointSpaceController\PD_Joint2\kp) * (JointSpaceController\PD_Joint2\error - JointSpaceController\PD_Joint2\error_previous)) + (sampletime * JointSpaceController\PD_Joint2\kp) * JointSpaceController\PD_Joint2\error); */
	R[2] = V[1389] * (((P[168] * s[2]) * P[169] + (P[168] * P[167]) * (R[3] - s[3])) + (step_size * P[167]) * R[3]);

	/* JointSpaceController\PD_Joint3\uD = JointSpaceController\PD_Joint3\factor * (((JointSpaceController\PD_Joint3\tauD * JointSpaceController\PD_Joint3\uD_previous) * JointSpaceController\PD_Joint3\beta + (JointSpaceController\PD_Joint3\tauD * JointSpaceController\PD_Joint3\kp) * (JointSpaceController\PD_Joint3\error - JointSpaceController\PD_Joint3\error_previous)) + (sampletime * JointSpaceController\PD_Joint3\kp) * JointSpaceController\PD_Joint3\error); */
	R[4] = V[1390] * (((P[171] * s[4]) * P[172] + (P[171] * P[170]) * (R[5] - s[5])) + (step_size * P[170]) * R[5]);

	/* JointSpaceController\PD_Joint4\uD = JointSpaceController\PD_Joint4\factor * (((JointSpaceController\PD_Joint4\tauD * JointSpaceController\PD_Joint4\uD_previous) * JointSpaceController\PD_Joint4\beta + (JointSpaceController\PD_Joint4\tauD * JointSpaceController\PD_Joint4\kp) * (JointSpaceController\PD_Joint4\error - JointSpaceController\PD_Joint4\error_previous)) + (sampletime * JointSpaceController\PD_Joint4\kp) * JointSpaceController\PD_Joint4\error); */
	R[6] = V[1391] * (((P[174] * s[6]) * P[175] + (P[174] * P[173]) * (R[7] - s[7])) + (step_size * P[173]) * R[7]);

	/* JointSpaceController\PD_Joint5\uD = JointSpaceController\PD_Joint5\factor * (((JointSpaceController\PD_Joint5\tauD * JointSpaceController\PD_Joint5\uD_previous) * JointSpaceController\PD_Joint5\beta + (JointSpaceController\PD_Joint5\tauD * JointSpaceController\PD_Joint5\kp) * (JointSpaceController\PD_Joint5\error - JointSpaceController\PD_Joint5\error_previous)) + (sampletime * JointSpaceController\PD_Joint5\kp) * JointSpaceController\PD_Joint5\error); */
	R[8] = V[1392] * (((P[177] * s[8]) * P[178] + (P[177] * P[176]) * (R[9] - s[9])) + (step_size * P[176]) * R[9]);

	/* JointSpaceController\Demux1\output[1] = JointSpaceController\PD_Joint1\uD; */
	M[173].mat[0] = R[0];

	/* JointSpaceController\Demux1\output[2] = JointSpaceController\PD_Joint2\uD; */
	M[173].mat[1] = R[2];

	/* JointSpaceController\Demux1\output[3] = JointSpaceController\PD_Joint3\uD; */
	M[173].mat[2] = R[4];

	/* JointSpaceController\Demux1\output[4] = JointSpaceController\PD_Joint4\uD; */
	M[173].mat[3] = R[6];

	/* JointSpaceController\Demux1\output[5] = JointSpaceController\PD_Joint5\uD; */
	M[173].mat[4] = R[8];

	/* JointSpaceController\Submodel3\cmd = diag (abs (sign (JointSpaceController\active_joint))) * JointSpaceController\Demux1\output; */
	M[207].mat[0] = XXSign (M[177].mat[0]);
	M[207].mat[1] = XXSign (M[177].mat[1]);
	M[207].mat[2] = XXSign (M[177].mat[2]);
	M[207].mat[3] = XXSign (M[177].mat[3]);
	M[207].mat[4] = XXSign (M[177].mat[4]);
	M[206].mat[0] = XXAbsolute (M[207].mat[0]);
	M[206].mat[1] = XXAbsolute (M[207].mat[1]);
	M[206].mat[2] = XXAbsolute (M[207].mat[2]);
	M[206].mat[3] = XXAbsolute (M[207].mat[3]);
	M[206].mat[4] = XXAbsolute (M[207].mat[4]);
	XXMatrixDiag (&M[205], &M[206]);
	XXMatrixMul (&M[175], &M[205], &M[173]);

	/* GravityCompensationModel\Link1\Hij\output = GravityCompensationModel\JointBase1\MatrixMul\output * GravityCompensationModel\Link1\Hij\Hab; */
	XXMatrixMul (&M[73], &M[57], &M[74]);

	/* PlusMinus3\output = JointSpaceController\Submodel3\cmd + PlusMinus3\plus2; */
	XXMatrixAdd (&M[180], &M[175], &M[181]);

		/* GravityCompensationModel\Link1\AdHi0\onlyRotH = GravityCompensationModel\JointBase1\MatrixMul\output; */
		XXMatrixMov (&M[62], &M[57]);

		/* GravityCompensationModel\Link1\AdHi0\onlyRotH[1,4] = 0; */
		M[62].mat[3] = 0.0;

		/* GravityCompensationModel\Link1\AdHi0\onlyRotH[2,4] = 0; */
		M[62].mat[7] = 0.0;

		/* GravityCompensationModel\Link1\AdHi0\onlyRotH[3,4] = 0; */
		M[62].mat[11] = 0.0;

		/* GravityCompensationModel\Link1\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Link1\AdHi0\onlyRotH)) * GravityCompensationModel\Link1\Gravity\effort; */
		XXMatrixAdjoint (&M[209], &M[62]);
		XXMatrixTranspose (&M[208], &M[209]);
		XXMatrixMul (&M[61], &M[208], &M[72]);

		/* GravityCompensationModel\Link1\AdHi0\p1.f = Adjoint (GravityCompensationModel\Link1\AdHi0\onlyRotH) * GravityCompensationModel\Link1\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[210], &M[62]);
		XXMatrixMul (&M[60], &M[210], &M[66]);

	/* PlusMinus2\output = JointSoftLimits\output + PlusMinus3\output; */
	XXMatrixAdd (&M[179], &M[166], &M[180]);

	/* GravityCompensationModel\Joint12\MatrixMul\output = GravityCompensationModel\Link1\Hij\output * GravityCompensationModel\Joint12\Integrate\output; */
	XXMatrixMul (&M[25], &M[73], &M[22]);

	/* GravityCompensationModel\Link1\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Link1\AdHik1\AdH)) * GravityCompensationModel\Link1\AdHi0\p2.e; */
	XXMatrixTranspose (&M[212], &M[71]);
	XXScalarMatrixDiv (&M[211], 1.0, &M[212], workarray);
	XXMatrixMul (&M[65], &M[211], &M[61]);

	/* GravityCompensationModel\Link2\Hij\output = GravityCompensationModel\Joint12\MatrixMul\output * GravityCompensationModel\Link2\Hij\Hab; */
	XXMatrixMul (&M[92], &M[25], &M[93]);

	/* GravityCompensationModel\Joint23\MatrixMul\output = GravityCompensationModel\Link2\Hij\output * GravityCompensationModel\Joint23\Integrate\output; */
	XXMatrixMul (&M[33], &M[92], &M[30]);

		/* GravityCompensationModel\Link2\AdHi0\onlyRotH = GravityCompensationModel\Joint12\MatrixMul\output; */
		XXMatrixMov (&M[81], &M[25]);

		/* GravityCompensationModel\Link2\AdHi0\onlyRotH[1,4] = 0; */
		M[81].mat[3] = 0.0;

		/* GravityCompensationModel\Link2\AdHi0\onlyRotH[2,4] = 0; */
		M[81].mat[7] = 0.0;

		/* GravityCompensationModel\Link2\AdHi0\onlyRotH[3,4] = 0; */
		M[81].mat[11] = 0.0;

		/* GravityCompensationModel\Link2\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Link2\AdHi0\onlyRotH)) * GravityCompensationModel\Link2\Gravity\effort; */
		XXMatrixAdjoint (&M[214], &M[81]);
		XXMatrixTranspose (&M[213], &M[214]);
		XXMatrixMul (&M[80], &M[213], &M[91]);

		/* GravityCompensationModel\Link2\AdHi0\p1.f = Adjoint (GravityCompensationModel\Link2\AdHi0\onlyRotH) * GravityCompensationModel\Link2\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[215], &M[81]);
		XXMatrixMul (&M[79], &M[215], &M[85]);

	/* GravityCompensationModel\Link2\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Link2\AdHik1\AdH)) * GravityCompensationModel\Link2\AdHi0\p2.e; */
	XXMatrixTranspose (&M[217], &M[90]);
	XXScalarMatrixDiv (&M[216], 1.0, &M[217], workarray);
	XXMatrixMul (&M[84], &M[216], &M[80]);

	/* GravityCompensationModel\Link3\Hij\output = GravityCompensationModel\Joint23\MatrixMul\output * GravityCompensationModel\Link3\Hij\Hab; */
	XXMatrixMul (&M[111], &M[33], &M[112]);

	/* GravityCompensationModel\Joint34\MatrixMul\output = GravityCompensationModel\Link3\Hij\output * GravityCompensationModel\Joint34\Integrate\output; */
	XXMatrixMul (&M[41], &M[111], &M[38]);

		/* GravityCompensationModel\Link3\AdHi0\onlyRotH = GravityCompensationModel\Joint23\MatrixMul\output; */
		XXMatrixMov (&M[100], &M[33]);

		/* GravityCompensationModel\Link3\AdHi0\onlyRotH[1,4] = 0; */
		M[100].mat[3] = 0.0;

		/* GravityCompensationModel\Link3\AdHi0\onlyRotH[2,4] = 0; */
		M[100].mat[7] = 0.0;

		/* GravityCompensationModel\Link3\AdHi0\onlyRotH[3,4] = 0; */
		M[100].mat[11] = 0.0;

		/* GravityCompensationModel\Link3\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Link3\AdHi0\onlyRotH)) * GravityCompensationModel\Link3\Gravity\effort; */
		XXMatrixAdjoint (&M[219], &M[100]);
		XXMatrixTranspose (&M[218], &M[219]);
		XXMatrixMul (&M[99], &M[218], &M[110]);

		/* GravityCompensationModel\Link3\AdHi0\p1.f = Adjoint (GravityCompensationModel\Link3\AdHi0\onlyRotH) * GravityCompensationModel\Link3\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[220], &M[100]);
		XXMatrixMul (&M[98], &M[220], &M[104]);

	/* GravityCompensationModel\Link3\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Link3\AdHik1\AdH)) * GravityCompensationModel\Link3\AdHi0\p2.e; */
	XXMatrixTranspose (&M[222], &M[109]);
	XXScalarMatrixDiv (&M[221], 1.0, &M[222], workarray);
	XXMatrixMul (&M[103], &M[221], &M[99]);

	/* GravityCompensationModel\Link4\Hij\output = GravityCompensationModel\Joint34\MatrixMul\output * GravityCompensationModel\Link4\Hij\Hab; */
	XXMatrixMul (&M[130], &M[41], &M[131]);

	/* GravityCompensationModel\Joint45\MatrixMul\output = GravityCompensationModel\Link4\Hij\output * GravityCompensationModel\Joint45\Integrate\output; */
	XXMatrixMul (&M[49], &M[130], &M[46]);

		/* GravityCompensationModel\Link4\AdHi0\onlyRotH = GravityCompensationModel\Joint34\MatrixMul\output; */
		XXMatrixMov (&M[119], &M[41]);

		/* GravityCompensationModel\Link4\AdHi0\onlyRotH[1,4] = 0; */
		M[119].mat[3] = 0.0;

		/* GravityCompensationModel\Link4\AdHi0\onlyRotH[2,4] = 0; */
		M[119].mat[7] = 0.0;

		/* GravityCompensationModel\Link4\AdHi0\onlyRotH[3,4] = 0; */
		M[119].mat[11] = 0.0;

		/* GravityCompensationModel\Link4\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Link4\AdHi0\onlyRotH)) * GravityCompensationModel\Link4\Gravity\effort; */
		XXMatrixAdjoint (&M[224], &M[119]);
		XXMatrixTranspose (&M[223], &M[224]);
		XXMatrixMul (&M[118], &M[223], &M[129]);

		/* GravityCompensationModel\Link4\AdHi0\p1.f = Adjoint (GravityCompensationModel\Link4\AdHi0\onlyRotH) * GravityCompensationModel\Link4\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[225], &M[119]);
		XXMatrixMul (&M[117], &M[225], &M[123]);

	/* GravityCompensationModel\Link4\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Link4\AdHik1\AdH)) * GravityCompensationModel\Link4\AdHi0\p2.e; */
	XXMatrixTranspose (&M[227], &M[128]);
	XXScalarMatrixDiv (&M[226], 1.0, &M[227], workarray);
	XXMatrixMul (&M[122], &M[226], &M[118]);

		/* GravityCompensationModel\Link5\AdHi0\onlyRotH = GravityCompensationModel\Joint45\MatrixMul\output; */
		XXMatrixMov (&M[138], &M[49]);

		/* GravityCompensationModel\Link5\AdHi0\onlyRotH[1,4] = 0; */
		M[138].mat[3] = 0.0;

		/* GravityCompensationModel\Link5\AdHi0\onlyRotH[2,4] = 0; */
		M[138].mat[7] = 0.0;

		/* GravityCompensationModel\Link5\AdHi0\onlyRotH[3,4] = 0; */
		M[138].mat[11] = 0.0;

		/* GravityCompensationModel\Link5\AdHi0\p2.e = transpose (Adjoint (GravityCompensationModel\Link5\AdHi0\onlyRotH)) * GravityCompensationModel\Link5\Gravity\effort; */
		XXMatrixAdjoint (&M[229], &M[138]);
		XXMatrixTranspose (&M[228], &M[229]);
		XXMatrixMul (&M[137], &M[228], &M[148]);

		/* GravityCompensationModel\Link5\AdHi0\p1.f = Adjoint (GravityCompensationModel\Link5\AdHi0\onlyRotH) * GravityCompensationModel\Link5\AdHik1\p2.f; */
		XXMatrixAdjoint (&M[230], &M[138]);
		XXMatrixMul (&M[136], &M[230], &M[142]);

	/* GravityCompensationModel\Link5\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Link5\AdHik1\AdH)) * GravityCompensationModel\Link5\AdHi0\p2.e; */
	XXMatrixTranspose (&M[232], &M[147]);
	XXScalarMatrixDiv (&M[231], 1.0, &M[232], workarray);
	XXMatrixMul (&M[141], &M[231], &M[137]);

	/* GravityCompensationModel\Link5\Ta0i\p2.e = GravityCompensationModel\Link5\AdHik1\p1.e + GravityCompensationModel\Link5\AdHij\p1.e; */
	XXMatrixAdd (&M[152], &M[141], &M[139]);

	/* GravityCompensationModel\Joint45\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensationModel\Joint45\Integrate\output))) * GravityCompensationModel\Link5\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[235], &M[46]);
	XXMatrixTranspose (&M[234], &M[235]);
	XXScalarMatrixDiv (&M[233], 1.0, &M[234], workarray);
	XXMatrixMul (&M[44], &M[233], &M[152]);

	/* GravityCompensationModel\Joint45\uTbai\p1.e = GravityCompensationModel\Joint45\AdHji\p1.e[3]; */
	V[439] = M[44].mat[2];

	/* GravityCompensationModel\Link4\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Link4\Hij\Hab)) * GravityCompensationModel\Joint45\AdHji\p1.e; */
	XXMatrixAdjoint (&M[237], &M[131]);
	XXMatrixTranspose (&M[236], &M[237]);
	XXMatrixMul (&M[120], &M[236], &M[44]);

	/* GravityCompensationModel\Link4\Ta0i\p2.e = GravityCompensationModel\Link4\AdHik1\p1.e + GravityCompensationModel\Link4\AdHij\p1.e; */
	XXMatrixAdd (&M[133], &M[122], &M[120]);

	/* GravityCompensationModel\Mux\port.e[5] = GravityCompensationModel\Joint45\uTbai\p1.e * GravityCompensationModel\Mux\calibartion; */
	M[155].mat[4] = V[439] * P[94];

	/* GravityCompensationModel\Joint34\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensationModel\Joint34\Integrate\output))) * GravityCompensationModel\Link4\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[240], &M[38]);
	XXMatrixTranspose (&M[239], &M[240]);
	XXScalarMatrixDiv (&M[238], 1.0, &M[239], workarray);
	XXMatrixMul (&M[36], &M[238], &M[133]);

	/* GravityCompensationModel\Joint34\uTbai\p1.e = GravityCompensationModel\Joint34\AdHji\p1.e[2]; */
	V[370] = M[36].mat[1];

	/* GravityCompensationModel\Link3\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Link3\Hij\Hab)) * GravityCompensationModel\Joint34\AdHji\p1.e; */
	XXMatrixAdjoint (&M[242], &M[112]);
	XXMatrixTranspose (&M[241], &M[242]);
	XXMatrixMul (&M[101], &M[241], &M[36]);

	/* GravityCompensationModel\Link3\Ta0i\p2.e = GravityCompensationModel\Link3\AdHik1\p1.e + GravityCompensationModel\Link3\AdHij\p1.e; */
	XXMatrixAdd (&M[114], &M[103], &M[101]);

	/* GravityCompensationModel\Mux\port.e[4] = GravityCompensationModel\Joint34\uTbai\p1.e * GravityCompensationModel\Mux\calibartion; */
	M[155].mat[3] = V[370] * P[94];

	/* GravityCompensationModel\Joint23\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensationModel\Joint23\Integrate\output))) * GravityCompensationModel\Link3\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[245], &M[30]);
	XXMatrixTranspose (&M[244], &M[245]);
	XXScalarMatrixDiv (&M[243], 1.0, &M[244], workarray);
	XXMatrixMul (&M[28], &M[243], &M[114]);

	/* GravityCompensationModel\Joint23\uTbai\p1.e = GravityCompensationModel\Joint23\AdHji\p1.e[2]; */
	V[301] = M[28].mat[1];

	/* GravityCompensationModel\Link2\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Link2\Hij\Hab)) * GravityCompensationModel\Joint23\AdHji\p1.e; */
	XXMatrixAdjoint (&M[247], &M[93]);
	XXMatrixTranspose (&M[246], &M[247]);
	XXMatrixMul (&M[82], &M[246], &M[28]);

	/* GravityCompensationModel\Link2\Ta0i\p2.e = GravityCompensationModel\Link2\AdHik1\p1.e + GravityCompensationModel\Link2\AdHij\p1.e; */
	XXMatrixAdd (&M[95], &M[84], &M[82]);

	/* GravityCompensationModel\Mux\port.e[3] = GravityCompensationModel\Joint23\uTbai\p1.e * GravityCompensationModel\Mux\calibartion; */
	M[155].mat[2] = V[301] * P[94];

	/* GravityCompensationModel\Joint12\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensationModel\Joint12\Integrate\output))) * GravityCompensationModel\Link2\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[250], &M[22]);
	XXMatrixTranspose (&M[249], &M[250]);
	XXScalarMatrixDiv (&M[248], 1.0, &M[249], workarray);
	XXMatrixMul (&M[20], &M[248], &M[95]);

	/* GravityCompensationModel\Joint12\uTbai\p1.e = GravityCompensationModel\Joint12\AdHji\p1.e[2]; */
	V[232] = M[20].mat[1];

	/* GravityCompensationModel\Link1\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Link1\Hij\Hab)) * GravityCompensationModel\Joint12\AdHji\p1.e; */
	XXMatrixAdjoint (&M[252], &M[74]);
	XXMatrixTranspose (&M[251], &M[252]);
	XXMatrixMul (&M[63], &M[251], &M[20]);

	/* GravityCompensationModel\Link1\Ta0i\p2.e = GravityCompensationModel\Link1\AdHik1\p1.e + GravityCompensationModel\Link1\AdHij\p1.e; */
	XXMatrixAdd (&M[76], &M[65], &M[63]);

	/* GravityCompensationModel\Mux\port.e[2] = GravityCompensationModel\Joint12\uTbai\p1.e * GravityCompensationModel\Mux\calibartion; */
	M[155].mat[1] = V[232] * P[94];

	/* GravityCompensationModel\JointBase1\AdHji\p1.e = (1.0 / transpose (Adjoint (GravityCompensationModel\JointBase1\Integrate\output))) * GravityCompensationModel\Link1\Ta0i\p2.e; */
	XXMatrixAdjoint (&M[255], &M[54]);
	XXMatrixTranspose (&M[254], &M[255]);
	XXScalarMatrixDiv (&M[253], 1.0, &M[254], workarray);
	XXMatrixMul (&M[52], &M[253], &M[76]);

	/* GravityCompensationModel\JointBase1\uTbai\p1.e = GravityCompensationModel\JointBase1\AdHji\p1.e[3]; */
	V[508] = M[52].mat[2];

	/* GravityCompensationModel\Mux\port.e[1] = GravityCompensationModel\JointBase1\uTbai\p1.e * GravityCompensationModel\Mux\calibartion; */
	M[155].mat[0] = V[508] * P[94];

	/* PlusMinus1\output = PlusMinus2\output + GravityCompensationModel\Mux\port.e; */
	XXMatrixAdd (&M[178], &M[179], &M[155]);

	/* Arm_torque = PlusMinus1\output; */
	XXMatrixMov (&M[183], &M[178]);

	}

	/* This function calculates the output equations of the model.
	 * These equations are not needed for calculation of the rates
	 * and are kept separate to make the dynamic set of equations smaller.
	 * These dynamic equations are called often more than one time for each
	 * integration step that is taken. This makes model computation much faster.
	 */
	inline void ArmPoseControllerModel::CalculateOutput (void)
	{
			/* GravityCompensationModel\Mux\port5.f = GravityCompensationModel\ZeroJunction1\p1.f[1]; */
	V[1326] = M[158].mat[0];

	/* GravityCompensationModel\Mux\port6.f = GravityCompensationModel\ZeroJunction1\p1.f[2]; */
	V[1327] = M[158].mat[1];

	/* GravityCompensationModel\Mux\port7.f = GravityCompensationModel\ZeroJunction1\p1.f[3]; */
	V[1328] = M[158].mat[2];

	/* GravityCompensationModel\Mux\port8.f = GravityCompensationModel\ZeroJunction1\p1.f[4]; */
	V[1329] = M[158].mat[3];

	/* GravityCompensationModel\Mux\port9.f = GravityCompensationModel\ZeroJunction1\p1.f[5]; */
	V[1330] = M[158].mat[4];

	/* GravityCompensationModel\Base\AdHik1\p1.e = (1.0 / transpose (GravityCompensationModel\Base\AdHik1\AdH)) * GravityCompensationModel\Base\AdHi0\p2.e; */
	XXMatrixTranspose (&M[257], &M[11]);
	XXScalarMatrixDiv (&M[256], 1.0, &M[257], workarray);
	XXMatrixMul (&M[5], &M[256], &M[1]);

	/* GravityCompensationModel\Joint12\uTbai\p2.f = [0; GravityCompensationModel\Mux\port6.f; 0; 0; 0; 0]; */
	M[26].mat[0] = 0.0;
	M[26].mat[1] = V[1327];
	M[26].mat[2] = 0.0;
	M[26].mat[3] = 0.0;
	M[26].mat[4] = 0.0;
	M[26].mat[5] = 0.0;

	/* GravityCompensationModel\Joint23\uTbai\p2.f = [0; GravityCompensationModel\Mux\port7.f; 0; 0; 0; 0]; */
	M[34].mat[0] = 0.0;
	M[34].mat[1] = V[1328];
	M[34].mat[2] = 0.0;
	M[34].mat[3] = 0.0;
	M[34].mat[4] = 0.0;
	M[34].mat[5] = 0.0;

	/* GravityCompensationModel\Joint34\uTbai\p2.f = [0; GravityCompensationModel\Mux\port8.f; 0; 0; 0; 0]; */
	M[42].mat[0] = 0.0;
	M[42].mat[1] = V[1329];
	M[42].mat[2] = 0.0;
	M[42].mat[3] = 0.0;
	M[42].mat[4] = 0.0;
	M[42].mat[5] = 0.0;

	/* GravityCompensationModel\Joint45\uTbai\p2.f = [0; 0; GravityCompensationModel\Mux\port9.f; 0; 0; 0]; */
	M[50].mat[0] = 0.0;
	M[50].mat[1] = 0.0;
	M[50].mat[2] = V[1330];
	M[50].mat[3] = 0.0;
	M[50].mat[4] = 0.0;
	M[50].mat[5] = 0.0;

	/* GravityCompensationModel\JointBase1\uTbai\p2.f = [0; 0; GravityCompensationModel\Mux\port5.f; 0; 0; 0]; */
	M[58].mat[0] = 0.0;
	M[58].mat[1] = 0.0;
	M[58].mat[2] = V[1326];
	M[58].mat[3] = 0.0;
	M[58].mat[4] = 0.0;
	M[58].mat[5] = 0.0;

	/* GravityCompensationModel\JointBase1\Wbai\p1.f = GravityCompensationModel\Base\AdHij\p2.f - GravityCompensationModel\JointBase1\uTbai\p2.f; */
	XXMatrixSub (&M[59], &M[4], &M[58]);

	/* GravityCompensationModel\JointBase1\AdHji\p2.f = (1.0 / Adjoint (GravityCompensationModel\JointBase1\Integrate\output)) * GravityCompensationModel\JointBase1\Wbai\p1.f; */
	XXMatrixAdjoint (&M[259], &M[54]);
	XXScalarMatrixDiv (&M[258], 1.0, &M[259], workarray);
	XXMatrixMul (&M[53], &M[258], &M[59]);

	/* GravityCompensationModel\Link1\AdHij\p2.f = Adjoint (GravityCompensationModel\Link1\Hij\Hab) * GravityCompensationModel\JointBase1\AdHji\p2.f; */
	XXMatrixAdjoint (&M[260], &M[74]);
	XXMatrixMul (&M[64], &M[260], &M[53]);

	/* GravityCompensationModel\Link1\AdHik1\p2.f = (1.0 / GravityCompensationModel\Link1\AdHik1\AdH) * GravityCompensationModel\JointBase1\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[261], 1.0, &M[71], workarray);
	XXMatrixMul (&M[66], &M[261], &M[53]);

	/* GravityCompensationModel\Joint12\Wbai\p3.f = GravityCompensationModel\Link1\AdHij\p2.f - GravityCompensationModel\Joint12\uTbai\p2.f; */
	XXMatrixSub (&M[27], &M[64], &M[26]);

	/* GravityCompensationModel\Joint12\AdHji\p2.f = (1.0 / Adjoint (GravityCompensationModel\Joint12\Integrate\output)) * GravityCompensationModel\Joint12\Wbai\p3.f; */
	XXMatrixAdjoint (&M[263], &M[22]);
	XXScalarMatrixDiv (&M[262], 1.0, &M[263], workarray);
	XXMatrixMul (&M[21], &M[262], &M[27]);

	/* GravityCompensationModel\Link2\AdHij\p2.f = Adjoint (GravityCompensationModel\Link2\Hij\Hab) * GravityCompensationModel\Joint12\AdHji\p2.f; */
	XXMatrixAdjoint (&M[264], &M[93]);
	XXMatrixMul (&M[83], &M[264], &M[21]);

	/* GravityCompensationModel\Link2\AdHik1\p2.f = (1.0 / GravityCompensationModel\Link2\AdHik1\AdH) * GravityCompensationModel\Joint12\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[265], 1.0, &M[90], workarray);
	XXMatrixMul (&M[85], &M[265], &M[21]);

	/* GravityCompensationModel\Joint23\Wbai\p3.f = GravityCompensationModel\Link2\AdHij\p2.f - GravityCompensationModel\Joint23\uTbai\p2.f; */
	XXMatrixSub (&M[35], &M[83], &M[34]);

	/* GravityCompensationModel\Joint23\AdHji\p2.f = (1.0 / Adjoint (GravityCompensationModel\Joint23\Integrate\output)) * GravityCompensationModel\Joint23\Wbai\p3.f; */
	XXMatrixAdjoint (&M[267], &M[30]);
	XXScalarMatrixDiv (&M[266], 1.0, &M[267], workarray);
	XXMatrixMul (&M[29], &M[266], &M[35]);

	/* GravityCompensationModel\Link3\AdHij\p2.f = Adjoint (GravityCompensationModel\Link3\Hij\Hab) * GravityCompensationModel\Joint23\AdHji\p2.f; */
	XXMatrixAdjoint (&M[268], &M[112]);
	XXMatrixMul (&M[102], &M[268], &M[29]);

	/* GravityCompensationModel\Link3\AdHik1\p2.f = (1.0 / GravityCompensationModel\Link3\AdHik1\AdH) * GravityCompensationModel\Joint23\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[269], 1.0, &M[109], workarray);
	XXMatrixMul (&M[104], &M[269], &M[29]);

	/* GravityCompensationModel\Joint34\Wbai\p3.f = GravityCompensationModel\Link3\AdHij\p2.f - GravityCompensationModel\Joint34\uTbai\p2.f; */
	XXMatrixSub (&M[43], &M[102], &M[42]);

	/* GravityCompensationModel\Joint34\AdHji\p2.f = (1.0 / Adjoint (GravityCompensationModel\Joint34\Integrate\output)) * GravityCompensationModel\Joint34\Wbai\p3.f; */
	XXMatrixAdjoint (&M[271], &M[38]);
	XXScalarMatrixDiv (&M[270], 1.0, &M[271], workarray);
	XXMatrixMul (&M[37], &M[270], &M[43]);

	/* GravityCompensationModel\Link4\AdHij\p2.f = Adjoint (GravityCompensationModel\Link4\Hij\Hab) * GravityCompensationModel\Joint34\AdHji\p2.f; */
	XXMatrixAdjoint (&M[272], &M[131]);
	XXMatrixMul (&M[121], &M[272], &M[37]);

	/* GravityCompensationModel\Link4\AdHik1\p2.f = (1.0 / GravityCompensationModel\Link4\AdHik1\AdH) * GravityCompensationModel\Joint34\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[273], 1.0, &M[128], workarray);
	XXMatrixMul (&M[123], &M[273], &M[37]);

	/* GravityCompensationModel\Joint45\Wbai\p1.f = GravityCompensationModel\Link4\AdHij\p2.f - GravityCompensationModel\Joint45\uTbai\p2.f; */
	XXMatrixSub (&M[51], &M[121], &M[50]);

	/* GravityCompensationModel\Link5\Hij\output = GravityCompensationModel\Joint45\MatrixMul\output * GravityCompensationModel\Link5\Hij\Hab; */
	XXMatrixMul (&M[149], &M[49], &M[150]);

	/* GravityCompensationModel\Joint45\AdHji\p2.f = (1.0 / Adjoint (GravityCompensationModel\Joint45\Integrate\output)) * GravityCompensationModel\Joint45\Wbai\p1.f; */
	XXMatrixAdjoint (&M[275], &M[46]);
	XXScalarMatrixDiv (&M[274], 1.0, &M[275], workarray);
	XXMatrixMul (&M[45], &M[274], &M[51]);

	/* GravityCompensationModel\Link5\AdHij\p2.f = Adjoint (GravityCompensationModel\Link5\Hij\Hab) * GravityCompensationModel\Joint45\AdHji\p2.f; */
	XXMatrixAdjoint (&M[276], &M[150]);
	XXMatrixMul (&M[140], &M[276], &M[45]);

	/* GravityCompensationModel\Link5\AdHik1\p2.f = (1.0 / GravityCompensationModel\Link5\AdHik1\AdH) * GravityCompensationModel\Joint45\AdHji\p2.f; */
	XXScalarMatrixDiv (&M[277], 1.0, &M[147], workarray);
	XXMatrixMul (&M[142], &M[277], &M[45]);

	/* GravityCompensationModel\Base\AdHij\p1.e = transpose (Adjoint (GravityCompensationModel\Base\Hij\Hab)) * GravityCompensationModel\JointBase1\AdHji\p1.e; */
	XXMatrixAdjoint (&M[279], &M[14]);
	XXMatrixTranspose (&M[278], &M[279]);
	XXMatrixMul (&M[3], &M[278], &M[52]);

	/* GravityCompensationModel\Base\Ta0i\p2.e = GravityCompensationModel\Base\AdHik1\p1.e + GravityCompensationModel\Base\AdHij\p1.e; */
	XXMatrixAdd (&M[16], &M[5], &M[3]);

			}

	/* This function calculates the final equations of the model.
	 * These equations are calculated after all the calculations
	 * are performed
	 */
	inline void ArmPoseControllerModel::CalculateFinal (void)
	{
		
	}

	bool ArmPoseControllerModel::setPeriod(double seconds)
	{
			step_size = seconds;
			return true;
	}

	double ArmPoseControllerModel::getPeriod()
  {
      return step_size;
  }

}

