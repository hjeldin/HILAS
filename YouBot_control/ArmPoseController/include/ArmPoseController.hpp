#pragma once

/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  include\ArmPoseController.hpp
 *  subm:  ArmPoseController
 *  model: motion_stack
 *  expmt: motion_stack
 *  date:  October 15, 2012
 *  time:  11:24:17 am
 *  user:  Campuslicentie
 *  from:  Universiteit Twente
 *  build: 4.1.4.1
 *
 **********************************************************/

/* This file describes the model functions
 that are supplied for computation.

 The model itself is the ArmPoseControllerModel.cpp file
 */

#include "ArmPoseControllerModel.hpp"

/* OROCOS include files */
#include <rtt/TaskContext.hpp>
#include <rtt/Logger.hpp>
#include <rtt/Port.hpp>
#include <rtt/Activity.hpp>
#include <rtt/RTT.hpp>
#include <rtt/Property.hpp>
#include <rtt/PropertyBag.hpp>
#include <rtt/Time.hpp>
#include <rtt/types/CArrayTypeInfo.hpp>

#include "Adapter20Sim.h"

#define COMPUTATION_TIME_MEASUREMENT 1

#ifdef COMPUTATION_TIME_MEASUREMENT
#include <rtt/os/TimeService.hpp>
#include <rtt/Time.hpp>
#endif

namespace motion_stack
{
	using namespace common20sim;

	class ArmPoseController: public ArmPoseControllerModel , public RTT::TaskContext
	{
	public:
		//enum stateflags_ArmPoseController {initialrun, mainrun, finished};

		/**
		 * ArmPoseController constructor
		 */
		ArmPoseController(std::string name = "ArmPoseController");

		/**
		 * ArmPoseController destructor
		 */
		virtual ~ArmPoseController(void);

		/**
		 * ArmPoseController configuration code and returns false if startup fails
		 */
		bool configureHook ();

		/**
		 * ArmPoseController startUp code and returns false if startup fails
		 */
		bool startHook ();

		/**
		 * ArmPoseController Calculation executed in this Hook.
		 */
		void updateHook ();

		/**
		 * ArmPoseController Terminate
		 */
		void stopHook ();

		double getTime(void);

		virtual bool setPeriod(RTT::Seconds s);

	protected:
    virtual void CopyInputsToVariables();

    virtual void CopyVariablesToOutputs();

    void setupComponentInterface();

		/**
		 * OROCOS Ports for input and ouput
		 */
		std::vector< Adapter20Sim<RTT::InputPort<flat_matrix_t > > > inputPorts;
		std::vector< Adapter20Sim<RTT::OutputPort<flat_matrix_t > > > outputPorts;
		std::vector< Adapter20Sim<RTT::Property<RTT::types::carray<double> > > > propertyPorts;

	private:
		RTT::PropertyBag* createPropertyBags(std::string name, RTT::PropertyBag* head);
		void cleanupPropertyBags(RTT::PropertyBag* p);

		std::string m_config_file;

#ifdef COMPUTATION_TIME_MEASUREMENT
	  RTT::Seconds m_cum_avg;
	  unsigned int m_cum_avg_counter;
#endif

	};

}

