/**********************************************************************
 *
 * Copyright (c) 2010-2013
 * All rights reserved.
 *
 * Robotics and Mechatronics (RaM) group
 * Faculty of Electrical Engineering, Mathematics and Computer Science
 * University of Twente
 *
 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *
 * Author(s):
 * Yury Brodskiy, Robert Wilterdink
 *
 * Supervised by: 
 * Jan F. Broenink
 * 
 * The research leading to these results has received funding from the 
 * European Community's Seventh Framework Programme (FP7/2007-2013) 
 * under grant agreement no. FP7-ICT-231940-BRICS (Best Practice in 
 * Robotics).
 * 
 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *
 * This software is published under a dual-license: GNU Lesser General 
 * Public License LGPL 2.1 and BSD license. The dual-license implies 
 * that users of this code may choose which terms they prefer.
 *
 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions 
 * are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above 
 *       copyright notice, this list of conditions and the following 
 *       disclaimer in the documentation and/or other materials 
 *       provided with the distribution.
 *     * Neither the name of the University of Twente nor the names of 
 *       its contributors may be used to endorse or promote products 
 *       derived from this software without specific prior written 
 *       permission.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License LGPL as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version or the BSD license.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License LGPL and the BSD license for more 
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License LGPL and BSD license along with this program.
 *
 **********************************************************************/

#pragma once

/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  include\BasePoseControllerModel.hpp
 *  subm:  BasePoseControllerModel
 *  model: motion_stack
 *  expmt: motion_stack
 *  date:  November 2, 2012
 *  time:  9:44:01 am
 *  user:  Campuslicentie
 *  from:  Universiteit Twente
 *  build: 4.1.4.1
 *
 **********************************************************/

/* This file describes the model functions
 that are supplied for computation.

 The model itself is the BasePoseControllerModel.cpp file
 */

/* 20-sim include files */
#include "xxfuncs.h"
#include "xxmatrix.h"
#include "xxmodel.h"
#include "xxinteg.h"

#include <string>
#include <vector>

#include "configuration/XXModelConfiguration.hpp"

namespace motion_stack
{
	using namespace common20sim;

	class BasePoseControllerModel: virtual Submodel20sim
	{
	public:

		/**
		 * BasePoseControllerModel constructor
		 */
		BasePoseControllerModel();

		/**
		 * BasePoseControllerModel destructor
		 */
		virtual ~BasePoseControllerModel(void);

		/**
		 * @brief Period of one computation step.
		 */
		virtual bool setPeriod(double seconds);

    /**
     * @brief Period of one computation step.
     */
    virtual double getPeriod();

		/**
		 * @brief Current time, according to the computation.
		 */
    virtual XXDouble getTime(void);

    /**
     * @brief Loads the model settings from the xml file.
     * @param uri The location of the settings file.
     */
    virtual bool loadModelConfiguration(std::string uri);

    XXModelConfiguration& getModelConfiguration();

    /**
     * @brief Configures the model.
     * @note Call after the model settings have been retrieved (with loadModelSettings).
     */
    virtual bool configure();

    /**
     * @brief Calculates the first computation step.
     * CopyInputsToVariables -> start -> CopyVariablesToOutputs -> start
     */
    virtual void start();

    /**
     * @brief Performs one calculation step.
     * CopyInputsToVariables -> step -> CopyVariablesToOutputs -> repeat
     */
    virtual void step();

    /**
     * @brief Calculates the final computation step.
     * CopyInputsToVariables -> stop -> CopyVariablesToOutputs -> nothing
     */
    virtual void stop();

    /**
     * CopyInputsToVariables
     * This private function copies the input variables from the input vector
     * @param u This is the array with all input signals for this submodel
     */
    virtual void CopyInputsToVariables () = 0;

    /**
     * CopyVariablesToOutputs
     * This private function copies the output variables to the output vector
     * @param y This is the array with all output signals from this submodel
     */
    virtual void CopyVariablesToOutputs () = 0;

	protected:
		/**
		 * CalculateDynamic()
		 * This function calculates the dynamic equations of the model.
		 * These equations are called from the integration method
		 * to calculate the new model rates (that are then integrated).
		 */
		inline void CalculateDynamic (void);

	private:
		/* internal submodel computation methods */

		/**
		 * CalculateInitial()
		 * This function calculates the initial equations of the model.
		 * These equations are calculated before anything else
		 */
		inline void CalculateInitial (void);

		/**
		 * CalculateStatic()
		 * This function calculates the static equations of the model.
		 * These equations are only dependent from parameters and constants
		 */
		inline void CalculateStatic (void);

		/**
		 * CalculateInput()
		 * This function calculates the input equations of the model.
		 * These equations are dynamic equations that must not change
		 * in calls from the integration method (like random and delay).
		 */
		inline void CalculateInput (void);

		/**
		 * CalculateOutput()
		 * This function calculates the output equations of the model.
		 * These equations are not needed for calculation of the rates
		 * and are kept separate to make the dynamic set of equations smaller.
		 * These dynamic equations are called often more than one time for each
		 * integration step that is taken. This makes model computation much faster.
		 */
		inline void CalculateOutput (void);

		/**
		 * CalculateFinal()
		 * This function calculates the final equations of the model.
		 * These equations are calculated after all the calculations
		 * are performed
		 */
		inline void CalculateFinal (void);

		Discrete myintegmethod; ///< pointer to the integration method for this submodel

		XXModelConfiguration m_model_config;

	private:
		void setupComputation();

	};

}

