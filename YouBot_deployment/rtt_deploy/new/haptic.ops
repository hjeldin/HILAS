import("hap_to_xyzypr");
import("tsim_to_hap");

displayComponentTypes;

#
# Load components
#
loadComponent("hap_to_xyzypr","Hap_to_xyzypr");
loadComponent("tsim_to_hap","Tsim_to_hap");

#
# Connection Policies
#
var ConnPolicy cp_rt;
cp_rt.type = DATA;
cp_rt.lock_policy = LOCK_FREE;

#
# Activities / threads
# 
setActivity("hap_to_xyzypr",0.01,HighestPriority-2,ORO_SCHED_RT);
setMasterSlaveActivity("hap_to_xyzypr", "tsim_to_hap");

#
# Connect ports
#
connect("hap_to_xyzypr.cart_pos_out", "youbot_control.xyz_quat", cp_rt);
connect("hap_to_xyzypr.cart_stiff_out", "youbot_control.cart_stiffness", cp_rt);
connect("hap_to_xyzypr.gripper_pos_out", "youbot.Gripper1.gripper_cmd_position", cp_rt);
//connect("hap_to_xyzypr.joint_stiff_out", "youbot_control.", cp_rt);
connect("hap_to_xyzypr.force_feedback_flag", "tsim_to_hap.force_feedback_flag", cp_rt);
connect("hap_to_xyzypr.joint_pos_out", "youbot.Arm1.joint_cmd_angles", cp_rt);
connect("youbot.Arm1.joint_states", "hap_to_xyzypr.yb_in", cp_rt);
connect("youbot_control.force_feedback", "tsim_to_hap.youbot_force", cp_rt);
connect("tsim_to_hap.rise_stiff", "hap_to_xyzypr.rise_stiff", cp_rt);

#
# ROS
#
connectPeers("hap_to_xyzypr","youbot");

stream("hap_to_xyzypr.hap_in", ros.topic("/teleop/haptic_state"));
stream("tsim_to_hap.hap_in", ros.topic("/teleop/haptic_state"));
stream("tsim_to_hap.outPort", ros.topic("/teleop/force_feedback"));

#
# Start
#

tsim_to_hap.configure
hap_to_xyzypr.configure

tsim_to_hap.start
hap_to_xyzypr.start
