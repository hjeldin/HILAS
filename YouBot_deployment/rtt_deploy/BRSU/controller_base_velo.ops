import("CartesianController");
import("YouBotKinematics");
import("ArmPoseController");
import("BaseVelocityController");
import("Odometry");

import("YouBot_adapters");
import("TSimAdapters");

displayComponentTypes;

#
# Load components
#
loadComponent("control_to_base", "YouBot::TSim_to_YouBot");
loadComponent("control_to_arm", "YouBot::TSim_to_YouBot");

loadComponent("base_state_to_control", "sensor_JointState_to_TSim");
loadComponent("arm_state_to_control", "sensor_JointState_to_TSim");

loadComponent("CartesianController","motion_stack::CartesianController");
loadComponent("YouBotKinematics","motion_stack::YouBotKinematics");
loadComponent("ArmPoseController","motion_stack::ArmPoseController");
loadComponent("BaseController","motion_stack_vel::BaseVelocityController");
loadComponent("Odometry", "motion_stack::Odometry");

#
# Activities / threads
# 
setMasterSlaveActivity("controlloop_scheduler", "base_state_to_control");
setMasterSlaveActivity("controlloop_scheduler", "arm_state_to_control");

setMasterSlaveActivity("controlloop_scheduler", "CartesianController");
setMasterSlaveActivity("controlloop_scheduler", "YouBotKinematics");
setMasterSlaveActivity("controlloop_scheduler", "ArmPoseController");
setMasterSlaveActivity("controlloop_scheduler", "Odometry");
setMasterSlaveActivity("controlloop_scheduler", "BaseController");

setMasterSlaveActivity("controlloop_scheduler", "control_to_base");
setMasterSlaveActivity("controlloop_scheduler", "control_to_arm");

controlloop_scheduler.configure;
controlloop_scheduler.start;

#
# Connection Policies
#
# NOTE: Internal fbsched communication
var ConnPolicy cp_rt;
cp_rt.type = DATA;
cp_rt.lock_policy = UNSYNC;

#
# Configure adapters
#

# Arm
var std.vector<ctrl_modes>  arm_ctrl_modes=std.vector<ctrl_modes>(5,TORQUE);
driver.Arm1.setControlModes(arm_ctrl_modes);
control_to_arm.initialize(TORQUE,5);
arm_state_to_control.initialize(5);

# Base
var std.vector<ctrl_modes>  base_ctrl_modes=std.vector<ctrl_modes>(4,TORQUE);
driver.Base.setControlModes(base_ctrl_modes);
control_to_base.initialize(TORQUE,4);
base_state_to_control.initialize(4);

#
# Connect ports
#
# CartesianController <-> YouBotKinematics
connect("CartesianController.W_tooltip_00", "YouBotKinematics.W_tooltip_00", cp_rt);
connect("YouBotKinematics.T_tooltip_00", "CartesianController.T_tooltip_00", cp_rt);
connect("YouBotKinematics.H_tooltip_0", "CartesianController.Htip0", cp_rt);
# YouBotKinematics <-> ArmPoseController
connect("YouBotKinematics.torques_cmd", "ArmPoseController.joints_torque", cp_rt);
connect("ArmPoseController.joints_angle_output", "YouBotKinematics.angles_measured", cp_rt);
# PL connecitions
connect("YouBotKinematics.output_energy_arm","ArmPoseController.input_energy",cp_rt);
connect("ArmPoseController.output_energy","YouBotKinematics.input_energy_arm",cp_rt);

# YouBotKinematics <-> BaseController
connect("YouBotKinematics.W_base_00", "BaseController.W_base_00", cp_rt);
connect("BaseController.H_base_0_output", "YouBotKinematics.H_base_0", cp_rt);
# PL connections
connect("YouBotKinematics.output_energy_base","BaseController.input_energy",cp_rt);
connect("BaseController.output_energy","YouBotKinematics.input_energy_base",cp_rt);

# BaseController <-> Odometry
connect("BaseController.T_base_00", "Odometry.T_base_00", cp_rt);
connect("Odometry.H_base_map", "BaseController.H_base_0", cp_rt);

# ArmPoseController <-> OODL
connect("ArmPoseController.Arm_torque","control_to_arm.input_cmd_signal",cp_rt);
connect("control_to_arm.output_cmd_torques","driver.Arm1.joint_effort_command",cp_rt);
connect("driver.Arm1.joint_state","arm_state_to_control.input_states",cp_rt);
connect("arm_state_to_control.output_positions","ArmPoseController.joints_angle",cp_rt);
#connect("arm_state_to_control.output_velocities","controller.Arm1_joint_velocites",cp_rt); 

# BaseController <-> OODL
connect("BaseController.Base_torque","control_to_base.input_cmd_signal",cp_rt);
connect("control_to_base.output_cmd_torques","driver.Base.joint_effort_command",cp_rt);

connect("driver.Base.joint_state","base_state_to_control.input_states",cp_rt);
connect("base_state_to_control.output_positions","BaseController.Base_wheels_angle",cp_rt);
#connect("base_state_to_control.output_velocities","controller.Base_joint_velocities",cp_rt);

print.ln("Start")

#
# Start
#
base_state_to_control.start
arm_state_to_control.start

control_to_base.start
control_to_arm.start

CartesianController.configure
CartesianController.start
YouBotKinematics.configure
YouBotKinematics.start
ArmPoseController.configure
ArmPoseController.start
Odometry.configure
Odometry.start
BaseController.configure
BaseController.start


#
# Configuration
#

