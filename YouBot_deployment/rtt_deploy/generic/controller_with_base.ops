import("YouBot_control_with_base");
import("YouBot_adapters");

displayComponentTypes;

#
# Load components
#
loadComponent("control_to_base", "YouBot::TSimToYouBotMsg");
loadComponent("control_to_arm", "YouBot::TSimToYouBotMsg");

loadComponent("base_state_to_control", "YouBot::YouBotMsgToTSim");
loadComponent("arm_state_to_control", "YouBot::YouBotMsgToTSim");

loadComponent("controller","youbot_control_with_base_v1::YouBot_control_with_base");

#
# Connection Policies
#
var ConnPolicy cp_rt;
cp_rt.type = DATA;
cp_rt.lock_policy = LOCK_FREE;

#
# Configure adapters
#
# Arm
var std.vector<ctrl_modes>  arm_ctrl_modes=std.vector<ctrl_modes>(5,TORQUE);
//driver.Arm1.clearControllerTimeouts();
driver.Arm1.setControlModes(arm_ctrl_modes);
control_to_arm.initialize(TORQUE,5);
arm_state_to_control.initialize(5);

# Base
var std.vector<ctrl_modes>  base_ctrl_modes=std.vector<ctrl_modes>(4,TORQUE);
//driver.Base.clearControllerTimeouts();
driver.Base.setControlModes(base_ctrl_modes);
control_to_base.initialize(TORQUE,4);
base_state_to_control.initialize(4);

#
# Activities / threads
# 
setActivity("controller",0.001,HighestPriority,ORO_SCHED_RT);
// The rest are event-based (for now).

#
# Connect ports
#
# Arm
connect("controller.Arm1_joint_cmd","control_to_arm.input_cmd_signal",cp_rt);
connect("control_to_arm.output_cmd_torques","driver.Arm1.joint_cmd_torques",cp_rt);

connect("driver.Arm1.joint_states","arm_state_to_control.input_states",cp_rt);
connect("arm_state_to_control.output_positions","controller.Arm1_joint_states",cp_rt);
connect("arm_state_to_control.output_velocities","controller.Arm1_joint_velocites",cp_rt); 

# Base
connect("controller.Base_torque_cmd","control_to_base.input_cmd_signal",cp_rt);
connect("control_to_base.output_cmd_torques","driver.Base.joint_cmd_torques",cp_rt);

connect("driver.Base.joint_states","base_state_to_control.input_states",cp_rt);
connect("base_state_to_control.output_positions","controller.Base_joint_states",cp_rt);
connect("base_state_to_control.output_velocities","controller.Base_joint_velocities",cp_rt);

#
# Start
#
base_state_to_control.start
arm_state_to_control.start

control_to_base.start
control_to_arm.start

controller.configure
controller.start

#
# Configuration
#
controller.JointSpaceDamping.r[3] = 1;
controller.JointSpaceDamping.r[4] = 1;
controller.JointSpaceDamping.r[5] = 1;
controller.JointSpaceDamping.r[6] = 1;
controller.JointSpaceDamping.r[7] = 1;




