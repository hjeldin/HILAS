import("YouBot_OODL")
import("rtt_ros_integration_sensor_msgs");
import("rtt_ros_integration_std_msgs");
import("rtt_ros_integration_geometry_msgs");
import("rtt_ros_integration_nav_msgs")
import("rtt_motion_control_msgs");

displayComponentTypes;

loadComponent("OODL","YouBot::YouBotOODL");
loadComponent("EventLogger", "YouBot::EventLogger");

setActivity("OODL", 0.001, HighestPriority, ORO_SCHED_RT);
OODL.configure;

var ConnPolicy cp_rt;
cp_rt.type = DATA;  // Use ''BUFFER'' or ''DATA''
cp_rt.lock_policy = LOCK_FREE; // Use  ''LOCKED'', ''LOCK_FREE'' or ''UNSYNC''

var ConnPolicy cp_events;
cp_events.type = BUFFER;
cp_events.lock_policy = LOCK_FREE;
cp_events.size = 20;

connectPeers("OODL", "EventLogger");
connect("OODL.Arm1.events", "EventLogger.events", cp_events);
connect("OODL.Base.events", "EventLogger.events", cp_events);

#
# ROS output
#

var ConnPolicy cp_ros;
cp_ros.transport = 3;
cp_ros.name_id = "/debug/joint_states";
stream("OODL.Arm1.joint_states", cp_ros);

cp_ros.name_id = "/debug/motor_statuses";
stream("OODL.Arm1.motor_statuses", cp_ros);

# 
# Start running
# 

EventLogger.configure;
EventLogger.start;
OODL.start;

OODL.Arm1.clearControllerTimeouts;
OODL.Base.clearControllerTimeouts;

