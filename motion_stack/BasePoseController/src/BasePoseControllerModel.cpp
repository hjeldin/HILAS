/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  src\BasePoseControllerModel.cpp
 *  subm:  BasePoseControllerModel
 *  model: motion_stack
 *  expmt: motion_stack
 *  date:  November 2, 2012
 *  time:  9:44:01 am
 *  user:  Campuslicentie
 *  from:  Universiteit Twente
 *  build: 4.1.4.1
 **********************************************************/

/* Standard include files */
#include <stdio.h>
#include <math.h>
#include <stdexcept>

/* 20-sim include files */
#include "BasePoseControllerModel.hpp"

/* Orocos include */
#include <boost/algorithm/string.hpp>

using namespace std;

namespace motion_stack
{

	BasePoseControllerModel::BasePoseControllerModel(): m_model_config(this)
	{
		using namespace boost;

		setupComputation();
	}

	BasePoseControllerModel::~BasePoseControllerModel(void)
	{
		/* free memory */
		delete[] C;
		delete[] P;
		delete[] I;
		delete[] V;
		delete[] s;
		delete[] R;
		delete[] M;
		delete[] U;
		delete[] workarray;
	}

  void BasePoseControllerModel::setupComputation()
  {
    start_time = 0.0;
    finish_time = 0;
    step_size = 0.001;
    time = 0;
    major = true;

    number_constants = 0;
    number_parameters = 60;
    number_initialvalues = 23;
    number_variables = 449;
    number_states = 23;
    number_rates = 23;
    number_matrices = 251;
    number_unnamed = 1063;

    /* the variable arrays */
    C = new XXDouble[0 + 1]; /* constants */
    P = new XXDouble[60 + 1]; /* parameters, currently only one type of parameter exists: double */
    I = new XXDouble[23 + 1]; /* initial values */
    V = new XXDouble[449 + 1]; /* variables */

    s = new XXDouble[23 + 1]; /* states */
    R = new XXDouble[23 + 1]; /* rates (or new states) */
    M = new XXMatrix[251 + 1]; /* matrices */
    U = new XXDouble[1063 + 1]; /* unnamed */
    workarray = new XXDouble[72 + 1];
  }

	bool BasePoseControllerModel::loadModelConfiguration(std::string uri)
	{
	  m_model_config.load(uri);
	  return true;
	}

	XXModelConfiguration& BasePoseControllerModel::getModelConfiguration()
	{
	  return m_model_config;
	}

  bool BasePoseControllerModel::configure()
  {
    myintegmethod.Initialize(this);

    /* initialization phase (allocating memory) */
    initialize = true;
    //CONSTANTS
    

    //PARAMETERS
    	P[0] = 100.0;		/* BasePositionController\PD_BaseAngle\kp {} */
	P[1] = 1.0;		/* BasePositionController\PD_BaseAngle\tauD {s} */
	P[2] = 0.1;		/* BasePositionController\PD_BaseAngle\beta {} */
	P[3] = 300.0;		/* BasePositionController\PD_BaseX\kp {} */
	P[4] = 1.0;		/* BasePositionController\PD_BaseX\tauD {s} */
	P[5] = 0.1;		/* BasePositionController\PD_BaseX\beta {} */
	P[6] = 300.0;		/* BasePositionController\PD_BaseY\kp {} */
	P[7] = 1.0;		/* BasePositionController\PD_BaseY\tauD {s} */
	P[8] = 0.1;		/* BasePositionController\PD_BaseY\beta {} */
	P[9] = 0.0475;		/* BaseTF\r */
	P[10] = 0.235;		/* BaseTF\x */
	P[11] = 0.15;		/* BaseTF\y */
	P[12] = 0.0;		/* DiscreteDifferential\initial */
	P[13] = 1000.0;		/* EnergyEncoding\roundUp */
	P[14] = 100.0;		/* EnergyEncoding\MaxCounter */
	P[15] = 0.0675;		/* FilterBaseJointVelocities1\FilterGain */
	P[16] = 0.1349;		
	P[17] = 0.0675;		
	P[18] = 1.143;		
	P[19] = -0.4128;		
	P[20] = 0.0;		
	P[21] = 4.0;		/* FilterBaseJointVelocities1\num */
	P[22] = 10.0;		/* PassivityLayer\EnergyTankBlock\InitialEnergyState {J} */
	P[23] = 4.0;		/* PassivityLayer\EnergyTankControl\n */
	P[24] = 5.0;		/* PassivityLayer\EnergyTankControl\DumpingInjectionTreshold {J} */
	P[25] = 10.0;		/* PassivityLayer\EnergyTankControl\RecoveryMultiplier */
	P[26] = 10.0;		
	P[27] = 10.0;		
	P[28] = 10.0;		
	P[29] = 0.01;		/* PassivityLayer\EnergyTankControl\MaxmimDampingConstant */
	P[30] = 0.01;		
	P[31] = 0.01;		
	P[32] = 0.01;		
	P[33] = 0.0;		/* PassivityLayer\EnergyTankControl\TCLactive */
	P[34] = 4.0;		/* PassivityLayer\PassiveSampling\n */
	P[35] = 4.0;		/* PassivityLayer\PassiveZOH\n */
	P[36] = 1.0;		/* PassivityLayer\PassiveZOH\SpringConstant */
	P[37] = 1.0;		
	P[38] = 1.0;		
	P[39] = 1.0;		
	P[40] = 10.0;		/* PassivityLayer\PassiveZOH\MaximumActuatorForce {N} */
	P[41] = 10.0;		
	P[42] = 10.0;		
	P[43] = 10.0;		
	P[44] = 1.0;		/* PassivityLayer\PassiveZOH\PassivityLayerActive */
	P[45] = 1.0;		/* PassivityLayer\PassiveZOH\MassConstant */
	P[46] = 1.0;		
	P[47] = 1.0;		
	P[48] = 1.0;		
	P[49] = 1.0e-4;		/* PassivityLayer\PassiveZOH\eps */
	P[50] = 0.5;		/* PassivityLayer\PassiveZOH\betaLine */
	P[51] = 1.5;		/* PassivityLayer\PassiveZOH\betaBarrier1 */
	P[52] = 5.0;		/* PassivityLayer\PassiveZOH\betaBarrier2 */
	P[53] = 1000.0;		/* PassivityLayer\PassiveZOH\maxNumIter */
	P[54] = 1.0;		/* PassivityLayer\PassiveZOH\Channelweights */
	P[55] = 1.0;		
	P[56] = 1.0;		
	P[57] = 1.0;		
	P[58] = 10.0;		/* PassivityLayer\SETP\CommunicationTreshold {J} */
	P[59] = 0.01;		/* PassivityLayer\SETP\SendoutPercent */


    //INITIAL VALUES
    	I[0] = 0.0;		/* BasePositionController\PD_BaseAngle\uD_previous_initial */
	I[1] = 0.0;		/* BasePositionController\PD_BaseAngle\error_previous_initial */
	I[2] = 0.0;		/* BasePositionController\PD_BaseX\uD_previous_initial */
	I[3] = 0.0;		/* BasePositionController\PD_BaseX\error_previous_initial */
	I[4] = 0.0;		/* BasePositionController\PD_BaseY\uD_previous_initial */
	I[5] = 0.0;		/* BasePositionController\PD_BaseY\error_previous_initial */
	I[6] = 0.0;		/* DiscreteDifferential\input_previous_initial */
	I[7] = 0.0;		
	I[8] = 0.0;		
	I[9] = 0.0;		
	I[10] = 0.0;		/* EnergyEncoding\outputCount_previous_initial */
	I[11] = 0.0;		/* PassivityLayer\EnergyTankControl\sensorValue_previous_initial */
	I[12] = 0.0;		
	I[13] = 0.0;		
	I[14] = 0.0;		
	I[15] = 0.0;		/* PassivityLayer\PassiveSampling\sensorValue_previous_initial */
	I[16] = 0.0;		
	I[17] = 0.0;		
	I[18] = 0.0;		
	I[19] = 0.0;		/* PassivityLayer\PassiveZOH\sensorValue_previous_initial */
	I[20] = 0.0;		
	I[21] = 0.0;		
	I[22] = 0.0;		


    //MATRICES
    	M[0].mat = &V[0];		/* BasePositionController\dHToErrors\H_vp_base */
	M[0].rows = 4;
	M[0].columns = 4;
	M[1].mat = &V[18];		/* BasePositionController\dHToErrors\norm_omega */
	M[1].rows = 3;
	M[1].columns = 1;
	M[2].mat = &V[21];		/* BasePositionController\dHToErrors\omega */
	M[2].rows = 3;
	M[2].columns = 1;
	M[3].mat = &V[24];		/* BasePositionController\ErrorsToW\W_base_base0 */
	M[3].rows = 6;
	M[3].columns = 1;
	M[4].mat = &V[33];		/* BasePositionController\Submodel3\cmd */
	M[4].rows = 6;
	M[4].columns = 1;
	M[5].mat = &V[39];		/* BasePositionController\Submodel3\aldo */
	M[5].rows = 6;
	M[5].columns = 1;
	M[6].mat = &V[45];		/* BasePositionController\H_vp_0 */
	M[6].rows = 4;
	M[6].columns = 4;
	M[7].mat = &V[61];		/* BasePositionController\active_joint */
	M[7].rows = 3;
	M[7].columns = 1;
	M[8].mat = &V[64];		/* BaseTF\Twist */
	M[8].rows = 6;
	M[8].columns = 1;
	M[9].mat = &V[70];		/* BaseTF\Virtual_joint_states */
	M[9].rows = 3;
	M[9].columns = 1;
	M[10].mat = &V[73];		/* BaseTF\Base_torque */
	M[10].rows = 4;
	M[10].columns = 1;
	M[11].mat = &V[77];		/* BaseTF\A */
	M[11].rows = 3;
	M[11].columns = 4;
	M[12].mat = &V[89];		/* BaseTF\PseudoInverseA */
	M[12].rows = 4;
	M[12].columns = 3;
	M[13].mat = &V[101];		/* BaseTF\virtual_velocities */
	M[13].rows = 3;
	M[13].columns = 1;
	M[14].mat = &V[104];		/* DiscreteDifferential\output */
	M[14].rows = 4;
	M[14].columns = 1;
	M[15].mat = &V[108];		/* DiscreteDifferential\initial_input */
	M[15].rows = 4;
	M[15].columns = 1;
	M[16].mat = &V[113];		/* EnergyEncoding\inputMessage */
	M[16].rows = 2;
	M[16].columns = 1;
	M[17].mat = &V[116];		/* EnergyEncoding\outputMessage */
	M[17].rows = 2;
	M[17].columns = 1;
	M[18].mat = &P[15];		/* FilterBaseJointVelocities1\FilterGain */
	M[18].rows = 2;
	M[18].columns = 3;
	M[19].mat = &V[121];		/* FilterBaseJointVelocities1\InputMemory */
	M[19].rows = 3;
	M[19].columns = 4;
	M[20].mat = &V[133];		/* FilterBaseJointVelocities1\InputUpdate */
	M[20].rows = 3;
	M[20].columns = 3;
	M[21].mat = &V[142];		/* FilterBaseJointVelocities1\State */
	M[21].rows = 3;
	M[21].columns = 4;
	M[22].mat = &V[154];		/* FilterBaseJointVelocities1\A */
	M[22].rows = 3;
	M[22].columns = 3;
	M[23].mat = &V[163];		/* FilterBaseJointVelocities1\B */
	M[23].rows = 3;
	M[23].columns = 3;
	M[24].mat = &V[174];		/* PassivityLayer\EnergyTankControl\adjustedForce */
	M[24].rows = 4;
	M[24].columns = 1;
	M[25].mat = &P[25];		/* PassivityLayer\EnergyTankControl\RecoveryMultiplier */
	M[25].rows = 4;
	M[25].columns = 1;
	M[26].mat = &P[29];		/* PassivityLayer\EnergyTankControl\MaxmimDampingConstant */
	M[26].rows = 4;
	M[26].columns = 1;
	M[27].mat = &V[178];		/* PassivityLayer\EnergyTankControl\DumpingInjectionForce */
	M[27].rows = 4;
	M[27].columns = 1;
	M[28].mat = &V[182];		/* PassivityLayer\EnergyTankControl\dSensorValue */
	M[28].rows = 4;
	M[28].columns = 1;
	M[29].mat = &V[186];		/* PassivityLayer\EnergyTankControl\SensorSpeed */
	M[29].rows = 4;
	M[29].columns = 1;
	M[30].mat = &V[190];		/* PassivityLayer\EnergyTankControl\MaxmimDumping */
	M[30].rows = 4;
	M[30].columns = 1;
	M[31].mat = &V[197];		/* PassivityLayer\PassiveSampling\dSensorValue */
	M[31].rows = 4;
	M[31].columns = 1;
	M[32].mat = &V[201];		/* PassivityLayer\PassiveZOH\adjustedForce */
	M[32].rows = 4;
	M[32].columns = 1;
	M[33].mat = &P[36];		/* PassivityLayer\PassiveZOH\SpringConstant */
	M[33].rows = 4;
	M[33].columns = 1;
	M[34].mat = &P[40];		/* PassivityLayer\PassiveZOH\MaximumActuatorForce */
	M[34].rows = 4;
	M[34].columns = 1;
	M[35].mat = &P[45];		/* PassivityLayer\PassiveZOH\MassConstant */
	M[35].rows = 4;
	M[35].columns = 1;
	M[36].mat = &P[54];		/* PassivityLayer\PassiveZOH\Channelweights */
	M[36].rows = 4;
	M[36].columns = 1;
	M[37].mat = &V[205];		/* PassivityLayer\PassiveZOH\dSensorValue */
	M[37].rows = 4;
	M[37].columns = 1;
	M[38].mat = &V[209];		/* PassivityLayer\PassiveZOH\SensorSpeed */
	M[38].rows = 4;
	M[38].columns = 1;
	M[39].mat = &V[213];		/* PassivityLayer\PassiveZOH\ForceSaturationArray */
	M[39].rows = 4;
	M[39].columns = 3;
	M[40].mat = &V[225];		/* PassivityLayer\PassiveZOH\SaturatedForce */
	M[40].rows = 4;
	M[40].columns = 1;
	M[41].mat = &V[231];		/* PassivityLayer\PassiveZOH\xd */
	M[41].rows = 4;
	M[41].columns = 1;
	M[42].mat = &V[235];		/* PassivityLayer\PassiveZOH\A */
	M[42].rows = 4;
	M[42].columns = 4;
	M[43].mat = &V[251];		/* PassivityLayer\PassiveZOH\B1 */
	M[43].rows = 4;
	M[43].columns = 4;
	M[44].mat = &V[267];		/* PassivityLayer\PassiveZOH\B2 */
	M[44].rows = 4;
	M[44].columns = 4;
	M[45].mat = &V[283];		/* PassivityLayer\PassiveZOH\B3 */
	M[45].rows = 4;
	M[45].columns = 4;
	M[46].mat = &V[299];		/* PassivityLayer\PassiveZOH\a */
	M[46].rows = 4;
	M[46].columns = 1;
	M[47].mat = &V[304];		/* PassivityLayer\PassiveZOH\xcl */
	M[47].rows = 4;
	M[47].columns = 1;
	M[48].mat = &V[308];		/* PassivityLayer\PassiveZOH\dx */
	M[48].rows = 4;
	M[48].columns = 1;
	M[49].mat = &V[312];		/* PassivityLayer\PassiveZOH\dObjective */
	M[49].rows = 4;
	M[49].columns = 1;
	M[50].mat = &V[316];		/* PassivityLayer\PassiveZOH\HObjective */
	M[50].rows = 4;
	M[50].columns = 4;
	M[51].mat = &V[337];		/* PassivityLayer\PassiveZOH\xAldo */
	M[51].rows = 4;
	M[51].columns = 1;
	M[52].mat = &V[345];		/* PlusMinus4\output */
	M[52].rows = 6;
	M[52].columns = 1;
	M[53].mat = &V[351];		/* PlusMinus4\plus2 */
	M[53].rows = 6;
	M[53].columns = 1;
	M[54].mat = &V[357];		/* Splitter5\input */
	M[54].rows = 4;
	M[54].columns = 4;
	M[55].mat = &V[373];		/* input_energy */
	M[55].rows = 2;
	M[55].columns = 1;
	M[56].mat = &V[375];		/* output_energy */
	M[56].rows = 2;
	M[56].columns = 1;
	M[57].mat = &V[377];		/* T_base_00 */
	M[57].rows = 6;
	M[57].columns = 1;
	M[58].mat = &V[383];		/* active_joint */
	M[58].rows = 3;
	M[58].columns = 1;
	M[59].mat = &V[386];		/* Base_wheels_angle */
	M[59].rows = 4;
	M[59].columns = 1;
	M[60].mat = &V[391];		/* H_vp_0 */
	M[60].rows = 4;
	M[60].columns = 4;
	M[61].mat = &V[407];		/* H_base_0_output */
	M[61].rows = 4;
	M[61].columns = 4;
	M[62].mat = &V[423];		/* W_base_00 */
	M[62].rows = 6;
	M[62].columns = 1;
	M[63].mat = &V[429];		/* H_base_0 */
	M[63].rows = 4;
	M[63].columns = 4;
	M[64].mat = &V[445];		/* Base_torque */
	M[64].rows = 4;
	M[64].columns = 1;
	M[65].mat = &R[6];		/* DiscreteDifferential\input */
	M[65].rows = 4;
	M[65].columns = 1;
	M[66].mat = &s[6];		/* DiscreteDifferential\input_previous */
	M[66].rows = 4;
	M[66].columns = 1;
	M[67].mat = &I[6];		/* DiscreteDifferential\input_previous_initial */
	M[67].rows = 4;
	M[67].columns = 1;
	M[68].mat = &R[11];		/* PassivityLayer\EnergyTankControl\sensorValue */
	M[68].rows = 4;
	M[68].columns = 1;
	M[69].mat = &s[11];		/* PassivityLayer\EnergyTankControl\sensorValue_previous */
	M[69].rows = 4;
	M[69].columns = 1;
	M[70].mat = &I[11];		/* PassivityLayer\EnergyTankControl\sensorValue_previous_initial */
	M[70].rows = 4;
	M[70].columns = 1;
	M[71].mat = &R[15];		/* PassivityLayer\PassiveSampling\sensorValue */
	M[71].rows = 4;
	M[71].columns = 1;
	M[72].mat = &s[15];		/* PassivityLayer\PassiveSampling\sensorValue_previous */
	M[72].rows = 4;
	M[72].columns = 1;
	M[73].mat = &I[15];		/* PassivityLayer\PassiveSampling\sensorValue_previous_initial */
	M[73].rows = 4;
	M[73].columns = 1;
	M[74].mat = &R[19];		/* PassivityLayer\PassiveZOH\sensorValue */
	M[74].rows = 4;
	M[74].columns = 1;
	M[75].mat = &s[19];		/* PassivityLayer\PassiveZOH\sensorValue_previous */
	M[75].rows = 4;
	M[75].columns = 1;
	M[76].mat = &I[19];		/* PassivityLayer\PassiveZOH\sensorValue_previous_initial */
	M[76].rows = 4;
	M[76].columns = 1;
	M[77].mat = &U[0];		/* U1 */
	M[77].rows = 1;
	M[77].columns = 3;
	M[78].mat = &U[3];		/* U2 */
	M[78].rows = 2;
	M[78].columns = 3;
	M[79].mat = &U[9];		/* U3 */
	M[79].rows = 1;
	M[79].columns = 3;
	M[80].mat = &U[12];		/* U4 */
	M[80].rows = 4;
	M[80].columns = 4;
	M[81].mat = &U[28];		/* U5 */
	M[81].rows = 4;
	M[81].columns = 4;
	M[82].mat = &U[44];		/* U6 */
	M[82].rows = 4;
	M[82].columns = 4;
	M[83].mat = &U[60];		/* U7 */
	M[83].rows = 4;
	M[83].columns = 4;
	M[84].mat = &U[76];		/* U8 */
	M[84].rows = 4;
	M[84].columns = 4;
	M[85].mat = &U[92];		/* U9 */
	M[85].rows = 4;
	M[85].columns = 4;
	M[86].mat = &U[108];		/* U10 */
	M[86].rows = 3;
	M[86].columns = 4;
	M[87].mat = &U[120];		/* U11 */
	M[87].rows = 3;
	M[87].columns = 4;
	M[88].mat = &U[132];		/* U12 */
	M[88].rows = 3;
	M[88].columns = 1;
	M[89].mat = &U[135];		/* U13 */
	M[89].rows = 1;
	M[89].columns = 4;
	M[90].mat = &U[139];		/* U14 */
	M[90].rows = 3;
	M[90].columns = 4;
	M[91].mat = &U[151];		/* U15 */
	M[91].rows = 3;
	M[91].columns = 4;
	M[92].mat = &U[163];		/* U16 */
	M[92].rows = 1;
	M[92].columns = 4;
	M[93].mat = &U[167];		/* U17 */
	M[93].rows = 1;
	M[93].columns = 3;
	M[94].mat = &U[170];		/* U18 */
	M[94].rows = 1;
	M[94].columns = 1;
	M[95].mat = &U[171];		/* U19 */
	M[95].rows = 4;
	M[95].columns = 1;
	M[96].mat = &U[175];		/* U20 */
	M[96].rows = 1;
	M[96].columns = 1;
	M[97].mat = &U[176];		/* U21 */
	M[97].rows = 4;
	M[97].columns = 4;
	M[98].mat = &U[192];		/* U22 */
	M[98].rows = 1;
	M[98].columns = 1;
	M[99].mat = &U[193];		/* U23 */
	M[99].rows = 3;
	M[99].columns = 3;
	M[100].mat = &U[202];		/* U24 */
	M[100].rows = 1;
	M[100].columns = 1;
	M[101].mat = &U[203];		/* U25 */
	M[101].rows = 1;
	M[101].columns = 1;
	M[102].mat = &U[204];		/* U26 */
	M[102].rows = 3;
	M[102].columns = 1;
	M[103].mat = &U[207];		/* U27 */
	M[103].rows = 1;
	M[103].columns = 4;
	M[104].mat = &U[211];		/* U28 */
	M[104].rows = 1;
	M[104].columns = 4;
	M[105].mat = &U[215];		/* U29 */
	M[105].rows = 3;
	M[105].columns = 4;
	M[106].mat = &U[227];		/* U30 */
	M[106].rows = 4;
	M[106].columns = 3;
	M[107].mat = &U[239];		/* U31 */
	M[107].rows = 3;
	M[107].columns = 3;
	M[108].mat = &U[248];		/* U32 */
	M[108].rows = 3;
	M[108].columns = 3;
	M[109].mat = &U[257];		/* U33 */
	M[109].rows = 4;
	M[109].columns = 3;
	M[110].mat = &U[269];		/* U34 */
	M[110].rows = 3;
	M[110].columns = 1;
	M[111].mat = &U[272];		/* U35 */
	M[111].rows = 3;
	M[111].columns = 4;
	M[112].mat = &U[284];		/* U36 */
	M[112].rows = 1;
	M[112].columns = 1;
	M[113].mat = &U[285];		/* U37 */
	M[113].rows = 1;
	M[113].columns = 1;
	M[114].mat = &U[286];		/* U38 */
	M[114].rows = 4;
	M[114].columns = 4;
	M[115].mat = &U[302];		/* U39 */
	M[115].rows = 4;
	M[115].columns = 4;
	M[116].mat = &U[318];		/* U40 */
	M[116].rows = 4;
	M[116].columns = 4;
	M[117].mat = &U[334];		/* U41 */
	M[117].rows = 1;
	M[117].columns = 1;
	M[118].mat = &U[335];		/* U42 */
	M[118].rows = 1;
	M[118].columns = 1;
	M[119].mat = &U[336];		/* U43 */
	M[119].rows = 1;
	M[119].columns = 1;
	M[120].mat = &U[337];		/* U44 */
	M[120].rows = 1;
	M[120].columns = 4;
	M[121].mat = &U[341];		/* U45 */
	M[121].rows = 1;
	M[121].columns = 4;
	M[122].mat = &U[345];		/* U46 */
	M[122].rows = 1;
	M[122].columns = 1;
	M[123].mat = &U[346];		/* U47 */
	M[123].rows = 1;
	M[123].columns = 1;
	M[124].mat = &U[347];		/* U48 */
	M[124].rows = 1;
	M[124].columns = 4;
	M[125].mat = &U[351];		/* U49 */
	M[125].rows = 1;
	M[125].columns = 4;
	M[126].mat = &U[355];		/* U50 */
	M[126].rows = 1;
	M[126].columns = 1;
	M[127].mat = &U[356];		/* U51 */
	M[127].rows = 1;
	M[127].columns = 4;
	M[128].mat = &U[360];		/* U52 */
	M[128].rows = 1;
	M[128].columns = 4;
	M[129].mat = &U[364];		/* U53 */
	M[129].rows = 1;
	M[129].columns = 1;
	M[130].mat = &U[365];		/* U54 */
	M[130].rows = 1;
	M[130].columns = 4;
	M[131].mat = &U[369];		/* U55 */
	M[131].rows = 1;
	M[131].columns = 4;
	M[132].mat = &U[373];		/* U56 */
	M[132].rows = 1;
	M[132].columns = 1;
	M[133].mat = &U[374];		/* U57 */
	M[133].rows = 4;
	M[133].columns = 1;
	M[134].mat = &U[378];		/* U58 */
	M[134].rows = 4;
	M[134].columns = 4;
	M[135].mat = &U[394];		/* U59 */
	M[135].rows = 4;
	M[135].columns = 4;
	M[136].mat = &U[410];		/* U60 */
	M[136].rows = 4;
	M[136].columns = 4;
	M[137].mat = &U[426];		/* U61 */
	M[137].rows = 4;
	M[137].columns = 1;
	M[138].mat = &U[430];		/* U62 */
	M[138].rows = 4;
	M[138].columns = 1;
	M[139].mat = &U[434];		/* U63 */
	M[139].rows = 1;
	M[139].columns = 1;
	M[140].mat = &U[435];		/* U64 */
	M[140].rows = 1;
	M[140].columns = 4;
	M[141].mat = &U[439];		/* U65 */
	M[141].rows = 1;
	M[141].columns = 4;
	M[142].mat = &U[443];		/* U66 */
	M[142].rows = 1;
	M[142].columns = 1;
	M[143].mat = &U[444];		/* U67 */
	M[143].rows = 1;
	M[143].columns = 4;
	M[144].mat = &U[448];		/* U68 */
	M[144].rows = 1;
	M[144].columns = 4;
	M[145].mat = &U[452];		/* U69 */
	M[145].rows = 1;
	M[145].columns = 1;
	M[146].mat = &U[453];		/* U70 */
	M[146].rows = 1;
	M[146].columns = 4;
	M[147].mat = &U[457];		/* U71 */
	M[147].rows = 1;
	M[147].columns = 4;
	M[148].mat = &U[461];		/* U72 */
	M[148].rows = 4;
	M[148].columns = 1;
	M[149].mat = &U[465];		/* U73 */
	M[149].rows = 4;
	M[149].columns = 1;
	M[150].mat = &U[469];		/* U74 */
	M[150].rows = 4;
	M[150].columns = 4;
	M[151].mat = &U[485];		/* U75 */
	M[151].rows = 4;
	M[151].columns = 4;
	M[152].mat = &U[501];		/* U76 */
	M[152].rows = 4;
	M[152].columns = 4;
	M[153].mat = &U[517];		/* U77 */
	M[153].rows = 4;
	M[153].columns = 1;
	M[154].mat = &U[521];		/* U78 */
	M[154].rows = 4;
	M[154].columns = 4;
	M[155].mat = &U[537];		/* U79 */
	M[155].rows = 4;
	M[155].columns = 4;
	M[156].mat = &U[553];		/* U80 */
	M[156].rows = 4;
	M[156].columns = 4;
	M[157].mat = &U[569];		/* U81 */
	M[157].rows = 4;
	M[157].columns = 4;
	M[158].mat = &U[585];		/* U82 */
	M[158].rows = 4;
	M[158].columns = 4;
	M[159].mat = &U[601];		/* U83 */
	M[159].rows = 4;
	M[159].columns = 1;
	M[160].mat = &U[605];		/* U84 */
	M[160].rows = 1;
	M[160].columns = 1;
	M[161].mat = &U[606];		/* U85 */
	M[161].rows = 1;
	M[161].columns = 4;
	M[162].mat = &U[610];		/* U86 */
	M[162].rows = 1;
	M[162].columns = 4;
	M[163].mat = &U[614];		/* U87 */
	M[163].rows = 1;
	M[163].columns = 1;
	M[164].mat = &U[615];		/* U88 */
	M[164].rows = 1;
	M[164].columns = 4;
	M[165].mat = &U[619];		/* U89 */
	M[165].rows = 1;
	M[165].columns = 4;
	M[166].mat = &U[623];		/* U90 */
	M[166].rows = 1;
	M[166].columns = 1;
	M[167].mat = &U[624];		/* U91 */
	M[167].rows = 1;
	M[167].columns = 4;
	M[168].mat = &U[628];		/* U92 */
	M[168].rows = 1;
	M[168].columns = 4;
	M[169].mat = &U[632];		/* U93 */
	M[169].rows = 4;
	M[169].columns = 1;
	M[170].mat = &U[636];		/* U94 */
	M[170].rows = 4;
	M[170].columns = 1;
	M[171].mat = &U[640];		/* U95 */
	M[171].rows = 4;
	M[171].columns = 4;
	M[172].mat = &U[656];		/* U96 */
	M[172].rows = 4;
	M[172].columns = 4;
	M[173].mat = &U[672];		/* U97 */
	M[173].rows = 4;
	M[173].columns = 4;
	M[174].mat = &U[688];		/* U98 */
	M[174].rows = 4;
	M[174].columns = 1;
	M[175].mat = &U[692];		/* U99 */
	M[175].rows = 1;
	M[175].columns = 4;
	M[176].mat = &U[696];		/* U100 */
	M[176].rows = 4;
	M[176].columns = 1;
	M[177].mat = &U[700];		/* U101 */
	M[177].rows = 4;
	M[177].columns = 1;
	M[178].mat = &U[704];		/* U102 */
	M[178].rows = 4;
	M[178].columns = 4;
	M[179].mat = &U[720];		/* U103 */
	M[179].rows = 4;
	M[179].columns = 4;
	M[180].mat = &U[736];		/* U104 */
	M[180].rows = 4;
	M[180].columns = 4;
	M[181].mat = &U[752];		/* U105 */
	M[181].rows = 4;
	M[181].columns = 1;
	M[182].mat = &U[756];		/* U106 */
	M[182].rows = 4;
	M[182].columns = 4;
	M[183].mat = &U[772];		/* U107 */
	M[183].rows = 1;
	M[183].columns = 1;
	M[184].mat = &U[773];		/* U108 */
	M[184].rows = 1;
	M[184].columns = 4;
	M[185].mat = &U[777];		/* U109 */
	M[185].rows = 1;
	M[185].columns = 4;
	M[186].mat = &U[781];		/* U110 */
	M[186].rows = 1;
	M[186].columns = 1;
	M[187].mat = &U[782];		/* U111 */
	M[187].rows = 1;
	M[187].columns = 4;
	M[188].mat = &U[786];		/* U112 */
	M[188].rows = 1;
	M[188].columns = 4;
	M[189].mat = &U[790];		/* U113 */
	M[189].rows = 1;
	M[189].columns = 1;
	M[190].mat = &U[791];		/* U114 */
	M[190].rows = 1;
	M[190].columns = 4;
	M[191].mat = &U[795];		/* U115 */
	M[191].rows = 1;
	M[191].columns = 4;
	M[192].mat = &U[799];		/* U116 */
	M[192].rows = 4;
	M[192].columns = 4;
	M[193].mat = &U[815];		/* U117 */
	M[193].rows = 4;
	M[193].columns = 4;
	M[194].mat = &U[831];		/* U118 */
	M[194].rows = 4;
	M[194].columns = 4;
	M[195].mat = &U[847];		/* U119 */
	M[195].rows = 4;
	M[195].columns = 4;
	M[196].mat = &U[863];		/* U120 */
	M[196].rows = 1;
	M[196].columns = 1;
	M[197].mat = &U[864];		/* U121 */
	M[197].rows = 1;
	M[197].columns = 4;
	M[198].mat = &U[868];		/* U122 */
	M[198].rows = 1;
	M[198].columns = 1;
	M[199].mat = &U[869];		/* U123 */
	M[199].rows = 1;
	M[199].columns = 4;
	M[200].mat = &U[873];		/* U124 */
	M[200].rows = 1;
	M[200].columns = 4;
	M[201].mat = &U[877];		/* U125 */
	M[201].rows = 1;
	M[201].columns = 4;
	M[202].mat = &U[881];		/* U126 */
	M[202].rows = 4;
	M[202].columns = 1;
	M[203].mat = &U[885];		/* U127 */
	M[203].rows = 4;
	M[203].columns = 1;
	M[204].mat = &U[889];		/* U128 */
	M[204].rows = 1;
	M[204].columns = 1;
	M[205].mat = &U[890];		/* U129 */
	M[205].rows = 1;
	M[205].columns = 4;
	M[206].mat = &U[894];		/* U130 */
	M[206].rows = 1;
	M[206].columns = 4;
	M[207].mat = &U[898];		/* U131 */
	M[207].rows = 1;
	M[207].columns = 1;
	M[208].mat = &U[899];		/* U132 */
	M[208].rows = 1;
	M[208].columns = 4;
	M[209].mat = &U[903];		/* U133 */
	M[209].rows = 1;
	M[209].columns = 4;
	M[210].mat = &U[907];		/* U134 */
	M[210].rows = 1;
	M[210].columns = 1;
	M[211].mat = &U[908];		/* U135 */
	M[211].rows = 1;
	M[211].columns = 4;
	M[212].mat = &U[912];		/* U136 */
	M[212].rows = 1;
	M[212].columns = 4;
	M[213].mat = &U[916];		/* U137 */
	M[213].rows = 4;
	M[213].columns = 1;
	M[214].mat = &U[920];		/* U138 */
	M[214].rows = 1;
	M[214].columns = 1;
	M[215].mat = &U[921];		/* U139 */
	M[215].rows = 1;
	M[215].columns = 4;
	M[216].mat = &U[925];		/* U140 */
	M[216].rows = 1;
	M[216].columns = 4;
	M[217].mat = &U[929];		/* U141 */
	M[217].rows = 1;
	M[217].columns = 1;
	M[218].mat = &U[930];		/* U142 */
	M[218].rows = 1;
	M[218].columns = 4;
	M[219].mat = &U[934];		/* U143 */
	M[219].rows = 1;
	M[219].columns = 4;
	M[220].mat = &U[938];		/* U144 */
	M[220].rows = 1;
	M[220].columns = 1;
	M[221].mat = &U[939];		/* U145 */
	M[221].rows = 1;
	M[221].columns = 4;
	M[222].mat = &U[943];		/* U146 */
	M[222].rows = 1;
	M[222].columns = 4;
	M[223].mat = &U[947];		/* U147 */
	M[223].rows = 1;
	M[223].columns = 1;
	M[224].mat = &U[948];		/* U148 */
	M[224].rows = 1;
	M[224].columns = 4;
	M[225].mat = &U[952];		/* U149 */
	M[225].rows = 1;
	M[225].columns = 4;
	M[226].mat = &U[956];		/* U150 */
	M[226].rows = 1;
	M[226].columns = 4;
	M[227].mat = &U[960];		/* U151 */
	M[227].rows = 4;
	M[227].columns = 1;
	M[228].mat = &U[964];		/* U152 */
	M[228].rows = 4;
	M[228].columns = 1;
	M[229].mat = &U[968];		/* U153 */
	M[229].rows = 1;
	M[229].columns = 1;
	M[230].mat = &U[969];		/* U154 */
	M[230].rows = 1;
	M[230].columns = 4;
	M[231].mat = &U[973];		/* U155 */
	M[231].rows = 1;
	M[231].columns = 4;
	M[232].mat = &U[977];		/* U156 */
	M[232].rows = 1;
	M[232].columns = 1;
	M[233].mat = &U[978];		/* U157 */
	M[233].rows = 1;
	M[233].columns = 4;
	M[234].mat = &U[982];		/* U158 */
	M[234].rows = 1;
	M[234].columns = 4;
	M[235].mat = &U[986];		/* U159 */
	M[235].rows = 1;
	M[235].columns = 1;
	M[236].mat = &U[987];		/* U160 */
	M[236].rows = 1;
	M[236].columns = 4;
	M[237].mat = &U[991];		/* U161 */
	M[237].rows = 1;
	M[237].columns = 4;
	M[238].mat = &U[995];		/* U162 */
	M[238].rows = 1;
	M[238].columns = 1;
	M[239].mat = &U[996];		/* U163 */
	M[239].rows = 1;
	M[239].columns = 1;
	M[240].mat = &U[997];		/* U164 */
	M[240].rows = 1;
	M[240].columns = 1;
	M[241].mat = &U[998];		/* U165 */
	M[241].rows = 1;
	M[241].columns = 1;
	M[242].mat = &U[999];		/* U166 */
	M[242].rows = 1;
	M[242].columns = 3;
	M[243].mat = &U[1002];		/* U167 */
	M[243].rows = 1;
	M[243].columns = 3;
	M[244].mat = &U[1005];		/* U168 */
	M[244].rows = 1;
	M[244].columns = 1;
	M[245].mat = &U[1006];		/* U169 */
	M[245].rows = 1;
	M[245].columns = 1;
	M[246].mat = &U[1007];		/* U170 */
	M[246].rows = 4;
	M[246].columns = 1;
	M[247].mat = &U[1011];		/* U171 */
	M[247].rows = 4;
	M[247].columns = 1;
	M[248].mat = &U[1015];		/* U172 */
	M[248].rows = 6;
	M[248].columns = 6;
	M[249].mat = &U[1051];		/* U173 */
	M[249].rows = 6;
	M[249].columns = 1;
	M[250].mat = &U[1057];		/* U174 */
	M[250].rows = 6;
	M[250].columns = 1;


    //INITIALIZE_DEPSTATES
    //INITIALIZE_ALGLOOPS
    //INITIALIZE_CONSTRAINTS%

    //INPUTS
    //INITIALIZE_INPUTS% -> not the actual inputs

    //OUTPUTS
    //INITIALIZE_OUTPUTS% -> not the actual outputs

    //INITIALIZE_FAVORITE_PARS
    //INITIALIZE_FAVORITE_VARS

    //INITIALIZE_CONSTANTS%
    /* set the states */
    //INITIALIZE_STATES%

    /* set the matrices */
    //INITIALIZE_MATRICES%

    // overload INITIALIZE_* with values from xml
    std::vector<XVMatrix>& pps = m_model_config.getConfiguration();

    for(unsigned int i = 0; i < pps.size(); ++i)
    {
      if( static_cast<unsigned int>(pps[i].storage.rows * pps[i].storage.columns) != pps[i].values.size())
        throw std::out_of_range("" + pps[i].name);

      // Copy to XXData -> double*
      memcpy(pps[i].storage.mat, pps[i].values.data(), pps[i].values.size()*sizeof(double));
    }

    //STATES - do NOT move this line up!
    	s[0] = I[0];		/* BasePositionController\PD_BaseAngle\uD_previous */
	s[1] = I[1];		/* BasePositionController\PD_BaseAngle\error_previous */
	s[2] = I[2];		/* BasePositionController\PD_BaseX\uD_previous */
	s[3] = I[3];		/* BasePositionController\PD_BaseX\error_previous */
	s[4] = I[4];		/* BasePositionController\PD_BaseY\uD_previous */
	s[5] = I[5];		/* BasePositionController\PD_BaseY\error_previous */
	s[6] = I[6];		/* DiscreteDifferential\input_previous */
	s[7] = I[7];
	s[8] = I[8];
	s[9] = I[9];
	s[10] = I[10];		/* EnergyEncoding\outputCount_previous */
	s[11] = I[11];		/* PassivityLayer\EnergyTankControl\sensorValue_previous */
	s[12] = I[12];
	s[13] = I[13];
	s[14] = I[14];
	s[15] = I[15];		/* PassivityLayer\PassiveSampling\sensorValue_previous */
	s[16] = I[16];
	s[17] = I[17];
	s[18] = I[18];
	s[19] = I[19];		/* PassivityLayer\PassiveZOH\sensorValue_previous */
	s[20] = I[20];
	s[21] = I[21];
	s[22] = I[22];


    /* end of initialization phase */
    initialize = false;
    return initialize;
  }

  void BasePoseControllerModel::start()
  {
    /* calculate initial and static equations */
    CalculateInitial ();
    CalculateStatic ();
    CopyInputsToVariables ();
    CalculateInput ();
    CalculateDynamic();
    CalculateOutput ();
    CopyVariablesToOutputs ();
  }

  void BasePoseControllerModel::step()
  {
    /* another precessor submodel could determine the parameters of this submodel
         and therefore the static parameter calculations need to be performed. */
    CalculateStatic ();

    /* main calculation of the model */
    CopyInputsToVariables (); //get input from port
    CalculateInput ();
    myintegmethod.Step();
    CalculateOutput ();
    CopyVariablesToOutputs (); //send output to port
  }

  void BasePoseControllerModel::stop()
  {
    CopyInputsToVariables();
    /* calculate the final model equations */
    CalculateFinal ();
    CopyVariablesToOutputs();
  }

  XXDouble BasePoseControllerModel::getTime(void)
  {
    return time;
  }

	/* This function calculates the initial equations of the model.
	 * These equations are calculated before anything else
	 */
	inline void BasePoseControllerModel::CalculateInitial (void)
	{
				/* BaseTF\Twist = 0; */
		XXMatrixScalarMov (&M[8], 0.0);

		/* BaseTF\Virtual_joint_states = 0; */
		XXMatrixScalarMov (&M[9], 0.0);

		/* BaseTF\Base_torque = 0; */
		XXMatrixScalarMov (&M[10], 0.0);

		/* DiscreteDifferential\initialized = 0.0; */
		V[112] = XXFALSE;

		/* EnergyEncoding\inputSum = 0; */
		V[118] = 0.0;

		/* EnergyEncoding\outputSum = 0; */
		V[120] = 0.0;

		/* FilterBaseJointVelocities1\InputUpdate = [0, 0, 0; 1, 0, 0; 0, 1, 0]; */
		M[20].mat[0] = 0.0;
		M[20].mat[1] = 0.0;
		M[20].mat[2] = 0.0;
		M[20].mat[3] = 1.0;
		M[20].mat[4] = 0.0;
		M[20].mat[5] = 0.0;
		M[20].mat[6] = 0.0;
		M[20].mat[7] = 1.0;
		M[20].mat[8] = 0.0;

		/* FilterBaseJointVelocities1\InputMemory = 0; */
		XXMatrixScalarMov (&M[19], 0.0);

		/* FilterBaseJointVelocities1\State = 0; */
		XXMatrixScalarMov (&M[21], 0.0);

		/* FilterBaseJointVelocities1\A[1,:] = FilterBaseJointVelocities1\FilterGain[2,:]; */
		M[77].mat[0] = M[18].mat[3];
		M[77].mat[1] = M[18].mat[4];
		M[77].mat[2] = M[18].mat[5];
		M[22].mat[0] = M[77].mat[0];
		M[22].mat[1] = M[77].mat[1];
		M[22].mat[2] = M[77].mat[2];

		/* FilterBaseJointVelocities1\A[2:3,:] = [1, 0, 0; 0, 1, 0]; */
		M[78].mat[0] = 1.0;
		M[78].mat[1] = 0.0;
		M[78].mat[2] = 0.0;
		M[78].mat[3] = 0.0;
		M[78].mat[4] = 1.0;
		M[78].mat[5] = 0.0;
		M[22].mat[3] = M[78].mat[0];
		M[22].mat[4] = M[78].mat[1];
		M[22].mat[5] = M[78].mat[2];
		M[22].mat[6] = M[78].mat[3];
		M[22].mat[7] = M[78].mat[4];
		M[22].mat[8] = M[78].mat[5];

		/* FilterBaseJointVelocities1\B[1,:] = FilterBaseJointVelocities1\FilterGain[1,:]; */
		M[79].mat[0] = M[18].mat[0];
		M[79].mat[1] = M[18].mat[1];
		M[79].mat[2] = M[18].mat[2];
		M[23].mat[0] = M[79].mat[0];
		M[23].mat[1] = M[79].mat[1];
		M[23].mat[2] = M[79].mat[2];

		/* FilterBaseJointVelocities1\B[2:3,:] = 0; */
		M[23].mat[3] = 0.0;
		M[23].mat[4] = 0.0;
		M[23].mat[5] = 0.0;
		M[23].mat[6] = 0.0;
		M[23].mat[7] = 0.0;
		M[23].mat[8] = 0.0;

		/* PassivityLayer\EnergyTankBlock\EnergyState = PassivityLayer\EnergyTankBlock\InitialEnergyState; */
		V[173] = P[22];

		/* PassivityLayer\EnergyTankControl\adjustedForce = 0; */
		XXMatrixScalarMov (&M[24], 0.0);

		/* PassivityLayer\PassiveZOH\adjustedForce = 0; */
		XXMatrixScalarMov (&M[32], 0.0);

		/* PassivityLayer\PassiveZOH\A = diag (PassivityLayer\PassiveZOH\Channelweights); */
		XXMatrixDiag (&M[42], &M[36]);

		/* PassivityLayer\PassiveZOH\B1 = sampletime ^ 2 * inverse (diag (PassivityLayer\PassiveZOH\MassConstant)) + inverse (diag (PassivityLayer\PassiveZOH\SpringConstant)); */
		XXMatrixDiag (&M[82], &M[35]);
		XXMatrixInverse (&M[81], &M[82], workarray);
		XXScalarMatrixMul (&M[80], (step_size * step_size), &M[81]);
		XXMatrixDiag (&M[84], &M[33]);
		XXMatrixInverse (&M[83], &M[84], workarray);
		XXMatrixAdd (&M[43], &M[80], &M[83]);

		/* PassivityLayer\PassiveZOH\B2 = (2 * sampletime) * eye (PassivityLayer\PassiveZOH\n); */
		XXMatrixEye (&M[85]);
		XXScalarMatrixMul (&M[44], 2.0 * step_size, &M[85]);

		/* PassivityLayer\PassiveZOH\B3 = diag (PassivityLayer\PassiveZOH\MassConstant); */
		XXMatrixDiag (&M[45], &M[35]);

		/* PassivityLayer\PassiveZOH\numIter = 0; */
		V[334] = 0.0;

		/* PassivityLayer\PassiveZOH\aldo = 0; */
		V[230] = 0.0;

		/* PassivityLayer\SETP\outputPackage = 0; */
		V[344] = 0.0;

		/* PassivityLayer\SETP\energyQuanta = 0; */
		V[343] = 0.0;

	}

	/* This function calculates the static equations of the model.
	 * These equations are only dependent from parameters and constants
	 */
	inline void BasePoseControllerModel::CalculateStatic (void)
	{
		
	}

	/* This function calculates the input equations of the model.
	 * These equations are dynamic equations that must not change
	 * in calls from the integration method (like random and delay).
	 */
	inline void BasePoseControllerModel::CalculateInput (void)
	{
		
	}

	/* This function calculates the dynamic equations of the model.
	 * These equations are called from the integration method
	 * to calculate the new model rates (that are then integrated).
	 */
	inline void BasePoseControllerModel::CalculateDynamic (void)
	{
			/* BasePositionController\PD_BaseAngle\factor = 1 / (sampletime + BasePositionController\PD_BaseAngle\tauD * BasePositionController\PD_BaseAngle\beta); */
	V[30] = 1.0 / (step_size + P[1] * P[2]);

	/* BasePositionController\PD_BaseX\factor = 1 / (sampletime + BasePositionController\PD_BaseX\tauD * BasePositionController\PD_BaseX\beta); */
	V[31] = 1.0 / (step_size + P[4] * P[5]);

	/* BasePositionController\PD_BaseY\factor = 1 / (sampletime + BasePositionController\PD_BaseY\tauD * BasePositionController\PD_BaseY\beta); */
	V[32] = 1.0 / (step_size + P[7] * P[8]);

	/* EnergyEncoding\inputMessage = input_energy; */
	XXMatrixMov (&M[16], &M[55]);

	/* T_base_00 = BaseTF\Twist; */
	XXMatrixMov (&M[57], &M[8]);

	/* PassivityLayer\PassiveSampling\sensorValue = Base_wheels_angle; */
	XXMatrixMov (&M[71], &M[59]);

	/* Splitter5\input = H_base_0; */
	XXMatrixMov (&M[54], &M[63]);

		/* if (EnergyEncoding\inputMessage[1] + 0.1 * EnergyEncoding\roundUp) < EnergyEncoding\inputSum */
		if ((M[16].mat[0] + 0.1 * P[13]) < V[118])
		{
			/* EnergyEncoding\inputDiff = (EnergyEncoding\roundUp + EnergyEncoding\inputMessage[1]) - EnergyEncoding\inputSum; */
			V[119] = (P[13] + M[16].mat[0]) - V[118];
		}
		else
		{
			/* EnergyEncoding\inputDiff = EnergyEncoding\inputMessage[1] - EnergyEncoding\inputSum; */
			V[119] = M[16].mat[0] - V[118];
		}

		/* EnergyEncoding\inputSum = (EnergyEncoding\inputSum + EnergyEncoding\inputDiff) mod EnergyEncoding\roundUp; */
		V[118] = XXIntegerModulo ((V[118] + V[119]), P[13]);

		/* EnergyEncoding\inputEnergy = EnergyEncoding\inputDiff; */
		V[115] = V[119];

		/* EnergyEncoding\outputCount = (EnergyEncoding\outputCount_previous + 1) mod EnergyEncoding\MaxCounter; */
		R[10] = XXIntegerModulo ((s[10] + 1.0), P[14]);

		/* EnergyEncoding\outputSum = (EnergyEncoding\outputSum + PassivityLayer\SETP\outputPackage) mod EnergyEncoding\roundUp; */
		V[120] = XXIntegerModulo ((V[120] + V[344]), P[13]);

		/* EnergyEncoding\outputMessage[1] = EnergyEncoding\outputSum; */
		M[17].mat[0] = V[120];

		/* EnergyEncoding\outputMessage[2] = EnergyEncoding\outputCount; */
		M[17].mat[1] = R[10];

	/* output_energy = EnergyEncoding\outputMessage; */
	XXMatrixMov (&M[56], &M[17]);

	/* Base_torque = PassivityLayer\EnergyTankControl\adjustedForce; */
	XXMatrixMov (&M[64], &M[24]);

		/* FilterBaseJointVelocities1\InputMemory = FilterBaseJointVelocities1\InputUpdate * FilterBaseJointVelocities1\InputMemory + [1; 0; 0] * transpose (PassivityLayer\PassiveSampling\sensorValue); */
		XXMatrixMul (&M[86], &M[20], &M[19]);
		M[88].mat[0] = 1.0;
		M[88].mat[1] = 0.0;
		M[88].mat[2] = 0.0;
		XXMatrixTranspose (&M[89], &M[71]);
		XXMatrixMul (&M[87], &M[88], &M[89]);
		XXMatrixAdd (&M[19], &M[86], &M[87]);

		/* FilterBaseJointVelocities1\State = FilterBaseJointVelocities1\A * FilterBaseJointVelocities1\State + FilterBaseJointVelocities1\B * FilterBaseJointVelocities1\InputMemory; */
		XXMatrixMul (&M[90], &M[22], &M[21]);
		XXMatrixMul (&M[91], &M[23], &M[19]);
		XXMatrixAdd (&M[21], &M[90], &M[91]);

		/* DiscreteDifferential\input = transpose ([1, 0, 0] * FilterBaseJointVelocities1\State); */
		M[93].mat[0] = 1.0;
		M[93].mat[1] = 0.0;
		M[93].mat[2] = 0.0;
		XXMatrixMul (&M[92], &M[93], &M[21]);
		XXMatrixTranspose (&M[65], &M[92]);

	/* H_base_0_output = Splitter5\input; */
	XXMatrixMov (&M[61], &M[54]);

	/* if notDiscreteDifferential\initialized */
	if (!V[112])
	{
		/* DiscreteDifferential\initial_input = DiscreteDifferential\initial - DiscreteDifferential\input / sampletime; */
		XXMatrixScalarDiv (&M[95], &M[65], step_size);
		XXScalarMatrixSub (&M[15], P[12], &M[95]);

		/* DiscreteDifferential\initialized = 1.0; */
		V[112] = XXTRUE;
	}
	else
	{
		/* DiscreteDifferential\initial_input = 0; */
		XXMatrixScalarMov (&M[15], 0.0);
	}

		/* BasePositionController\dHToErrors\H_vp_base = inverseH (BasePositionController\H_vp_0) * Splitter5\input; */
		XXMatrixInverseH (&M[97], &M[6]);
		XXMatrixMul (&M[0], &M[97], &M[54]);

		/* BasePositionController\dHToErrors\aldo = (trace (BasePositionController\dHToErrors\H_vp_base[1:3,1:3]) - 1) / 2; */
		M[99].mat[0] = M[0].mat[0];
		M[99].mat[1] = M[0].mat[1];
		M[99].mat[2] = M[0].mat[2];
		M[99].mat[3] = M[0].mat[4];
		M[99].mat[4] = M[0].mat[5];
		M[99].mat[5] = M[0].mat[6];
		M[99].mat[6] = M[0].mat[8];
		M[99].mat[7] = M[0].mat[9];
		M[99].mat[8] = M[0].mat[10];
		M[98].mat[0] = XXMatrixTrace (&M[99]);
		V[16] = (XXMatrixTrace (&M[99]) - 1.0) / 2.0;

		/* if (BasePositionController\dHToErrors\aldo < -1) */
		if (V[16] < -1.0)
		{
			/* BasePositionController\dHToErrors\aldo = -1; */
			V[16] = -1.0;
		}

		/* if (BasePositionController\dHToErrors\aldo > 1) */
		if (V[16] > 1.0)
		{
			/* BasePositionController\dHToErrors\aldo = 1; */
			V[16] = 1.0;
		}

		/* BasePositionController\dHToErrors\theta = arccos (BasePositionController\dHToErrors\aldo); */
		V[17] = acos (V[16]);

		/* if (BasePositionController\dHToErrors\theta == 0) */
		if (V[17] == 0.0)
		{
			/* BasePositionController\dHToErrors\norm_omega = 0; */
			XXMatrixScalarMov (&M[1], 0.0);
		}
		else
		{
			/* BasePositionController\dHToErrors\norm_omega = (1 / (2 * sin (BasePositionController\dHToErrors\theta))) * [BasePositionController\dHToErrors\H_vp_base[3,2] - BasePositionController\dHToErrors\H_vp_base[2,3]; BasePositionController\dHToErrors\H_vp_base[1,3] - BasePositionController\dHToErrors\H_vp_base[3,1]; BasePositionController\dHToErrors\H_vp_base[2,1] - BasePositionController\dHToErrors\H_vp_base[1,2]]; */
			M[102].mat[0] = M[0].mat[9] - M[0].mat[6];
			M[102].mat[1] = M[0].mat[2] - M[0].mat[8];
			M[102].mat[2] = M[0].mat[4] - M[0].mat[1];
			XXScalarMatrixMul (&M[1], (1.0 / (2.0 * sin (V[17]))), &M[102]);
		}

		/* BasePositionController\dHToErrors\omega = BasePositionController\dHToErrors\theta * BasePositionController\dHToErrors\norm_omega; */
		XXScalarMatrixMul (&M[2], V[17], &M[1]);

		/* BasePositionController\PD_BaseX\error = -BasePositionController\dHToErrors\H_vp_base[1,4]; */
		R[3] = -M[0].mat[3];

		/* BasePositionController\PD_BaseY\error = -BasePositionController\dHToErrors\H_vp_base[2,4]; */
		R[5] = -M[0].mat[7];

		/* BasePositionController\PD_BaseAngle\error = -BasePositionController\dHToErrors\omega[3]; */
		R[1] = -M[2].mat[2];

		/* PassivityLayer\PassiveSampling\dSensorValue = PassivityLayer\PassiveSampling\sensorValue - PassivityLayer\PassiveSampling\sensorValue_previous; */
		XXMatrixSub (&M[31], &M[71], &M[72]);

		/* PassivityLayer\PassiveSampling\energyQuanta = -transpose (PassivityLayer\EnergyTankControl\adjustedForce) * PassivityLayer\PassiveSampling\dSensorValue; */
		XXMatrixTranspose (&M[104], &M[24]);
		XXMatrixInv (&M[103], &M[104]);
		XXScalarMatrixMatrixMul (&V[196], &M[103], &M[31]);

	/* PassivityLayer\EnergyTankControl\sensorValue = PassivityLayer\PassiveSampling\sensorValue; */
	XXMatrixMov (&M[68], &M[71]);

	/* PassivityLayer\PassiveZOH\sensorValue = PassivityLayer\PassiveSampling\sensorValue; */
	XXMatrixMov (&M[74], &M[71]);

	/* BasePositionController\PD_BaseAngle\uD = BasePositionController\PD_BaseAngle\factor * (((BasePositionController\PD_BaseAngle\tauD * BasePositionController\PD_BaseAngle\uD_previous) * BasePositionController\PD_BaseAngle\beta + (BasePositionController\PD_BaseAngle\tauD * BasePositionController\PD_BaseAngle\kp) * (BasePositionController\PD_BaseAngle\error - BasePositionController\PD_BaseAngle\error_previous)) + (sampletime * BasePositionController\PD_BaseAngle\kp) * BasePositionController\PD_BaseAngle\error); */
	R[0] = V[30] * (((P[1] * s[0]) * P[2] + (P[1] * P[0]) * (R[1] - s[1])) + (step_size * P[0]) * R[1]);

	/* BasePositionController\PD_BaseX\uD = BasePositionController\PD_BaseX\factor * (((BasePositionController\PD_BaseX\tauD * BasePositionController\PD_BaseX\uD_previous) * BasePositionController\PD_BaseX\beta + (BasePositionController\PD_BaseX\tauD * BasePositionController\PD_BaseX\kp) * (BasePositionController\PD_BaseX\error - BasePositionController\PD_BaseX\error_previous)) + (sampletime * BasePositionController\PD_BaseX\kp) * BasePositionController\PD_BaseX\error); */
	R[2] = V[31] * (((P[4] * s[2]) * P[5] + (P[4] * P[3]) * (R[3] - s[3])) + (step_size * P[3]) * R[3]);

	/* BasePositionController\PD_BaseY\uD = BasePositionController\PD_BaseY\factor * (((BasePositionController\PD_BaseY\tauD * BasePositionController\PD_BaseY\uD_previous) * BasePositionController\PD_BaseY\beta + (BasePositionController\PD_BaseY\tauD * BasePositionController\PD_BaseY\kp) * (BasePositionController\PD_BaseY\error - BasePositionController\PD_BaseY\error_previous)) + (sampletime * BasePositionController\PD_BaseY\kp) * BasePositionController\PD_BaseY\error); */
	R[4] = V[32] * (((P[7] * s[4]) * P[8] + (P[7] * P[6]) * (R[5] - s[5])) + (step_size * P[6]) * R[5]);

		/* PassivityLayer\EnergyTankBlock\EnergyState = PassivityLayer\EnergyTankBlock\EnergyState + PassivityLayer\PlusMinus1\output; */
		V[173] = V[173] + V[342];

		/* PassivityLayer\EnergyTankBlock\energyState = PassivityLayer\EnergyTankBlock\EnergyState; */
		V[172] = V[173];

	/* EnergyTank = PassivityLayer\EnergyTankBlock\energyState; */
	V[390] = V[172];

		/* if PassivityLayer\SETP\CommunicationTreshold > PassivityLayer\EnergyTankBlock\energyState */
		if (P[58] > V[172])
		{
			/* PassivityLayer\SETP\outputPackage = 0; */
			V[344] = 0.0;

			/* PassivityLayer\SETP\energyQuanta = EnergyEncoding\inputEnergy; */
			V[343] = V[115];
		}
		else
		{
			/* PassivityLayer\SETP\outputPackage = -(PassivityLayer\SETP\CommunicationTreshold - PassivityLayer\EnergyTankBlock\energyState) * PassivityLayer\SETP\SendoutPercent; */
			V[344] = -(P[58] - V[172]) * P[59];

			/* PassivityLayer\SETP\energyQuanta = EnergyEncoding\inputEnergy - PassivityLayer\SETP\outputPackage; */
			V[343] = V[115] - V[344];
		}

		/* BaseTF\A = (1 / (BaseTF\r)) * [BaseTF\x + BaseTF\y, BaseTF\x + BaseTF\y, BaseTF\x + BaseTF\y, BaseTF\x + BaseTF\y; -1, 1, -1, 1; 1, 1, -1, -1]; */
		M[105].mat[0] = P[10] + P[11];
		M[105].mat[1] = P[10] + P[11];
		M[105].mat[2] = P[10] + P[11];
		M[105].mat[3] = P[10] + P[11];
		M[105].mat[4] = -1.0;
		M[105].mat[5] = 1.0;
		M[105].mat[6] = -1.0;
		M[105].mat[7] = 1.0;
		M[105].mat[8] = 1.0;
		M[105].mat[9] = 1.0;
		M[105].mat[10] = -1.0;
		M[105].mat[11] = -1.0;
		XXScalarMatrixMul (&M[11], (1.0 / (P[9])), &M[105]);

		/* BaseTF\PseudoInverseA = transpose (BaseTF\A) * inverse (BaseTF\A * transpose (BaseTF\A)); */
		XXMatrixTranspose (&M[106], &M[11]);
		XXMatrixTranspose (&M[109], &M[11]);
		XXMatrixMul (&M[108], &M[11], &M[109]);
		XXMatrixInverse (&M[107], &M[108], workarray);
		XXMatrixMul (&M[12], &M[106], &M[107]);

		/* BaseTF\Base_torque = BaseTF\PseudoInverseA * PlusMinus4\output[3:5]; */
		M[110].mat[0] = M[52].mat[2];
		M[110].mat[1] = M[52].mat[3];
		M[110].mat[2] = M[52].mat[4];
		XXMatrixMul (&M[10], &M[12], &M[110]);

		/* BaseTF\virtual_velocities = transpose (BaseTF\PseudoInverseA) * DiscreteDifferential\output; */
		XXMatrixTranspose (&M[111], &M[12]);
		XXMatrixMul (&M[13], &M[111], &M[14]);

		/* BaseTF\Twist = [0; 0; BaseTF\virtual_velocities[1]; BaseTF\virtual_velocities[2]; BaseTF\virtual_velocities[3]; 0]; */
		M[8].mat[0] = 0.0;
		M[8].mat[1] = 0.0;
		M[8].mat[2] = M[13].mat[0];
		M[8].mat[3] = M[13].mat[1];
		M[8].mat[4] = M[13].mat[2];
		M[8].mat[5] = 0.0;

		/* BaseTF\Virtual_joint_states[1] = atan2 (Splitter5\input[2,1], Splitter5\input[1,1]); */
		M[9].mat[0] = atan2 (M[54].mat[4], M[54].mat[0]);

		/* BaseTF\Virtual_joint_states[2] = Splitter5\input[1,4]; */
		M[9].mat[1] = M[54].mat[3];

		/* BaseTF\Virtual_joint_states[3] = Splitter5\input[2,4]; */
		M[9].mat[2] = M[54].mat[7];

		/* PassivityLayer\EnergyTankControl\dSensorValue = PassivityLayer\EnergyTankControl\sensorValue - PassivityLayer\EnergyTankControl\sensorValue_previous; */
		XXMatrixSub (&M[28], &M[68], &M[69]);

		/* PassivityLayer\EnergyTankControl\SensorSpeed = PassivityLayer\EnergyTankControl\dSensorValue / sampletime; */
		XXMatrixScalarDiv (&M[29], &M[28], step_size);

		/* PassivityLayer\EnergyTankControl\MaxmimDumping = PassivityLayer\EnergyTankControl\MaxmimDampingConstant / (sampletime); */
		XXMatrixScalarDiv (&M[30], &M[26], (step_size));

		/* PassivityLayer\EnergyTankControl\energyStateError = PassivityLayer\EnergyTankControl\DumpingInjectionTreshold - PassivityLayer\EnergyTankBlock\energyState; */
		V[194] = P[24] - V[172];

		/* if PassivityLayer\EnergyTankControl\energyStateError <= 0 */
		if (V[194] <= 0.0)
		{
			/* PassivityLayer\EnergyTankControl\DumpingInjectionForce = 0; */
			XXMatrixScalarMov (&M[27], 0.0);
		}
		else
		{
			/* PassivityLayer\EnergyTankControl\DumpingInjectionForce = (-diag (PassivityLayer\EnergyTankControl\RecoveryMultiplier) * PassivityLayer\EnergyTankControl\energyStateError) * PassivityLayer\EnergyTankControl\SensorSpeed; */
			XXMatrixDiag (&M[116], &M[25]);
			XXMatrixInv (&M[115], &M[116]);
			XXMatrixScalarMul (&M[114], &M[115], V[194]);
			XXMatrixMul (&M[27], &M[114], &M[29]);
		}

		/* for PassivityLayer\EnergyTankControl\i = 1 to PassivityLayer\EnergyTankControl\n */
		for (V[195] = 1.0; V[195] <= P[23]; V[195]++)
		{
			/* PassivityLayer\EnergyTankControl\DumpingInjectionForce[PassivityLayer\EnergyTankControl\i] = if PassivityLayer\EnergyTankControl\DumpingInjectionForce[PassivityLayer\EnergyTankControl\i] < -PassivityLayer\EnergyTankControl\MaxmimDumping[PassivityLayer\EnergyTankControl\i] then -PassivityLayer\EnergyTankControl\MaxmimDumping[PassivityLayer\EnergyTankControl\i] else if PassivityLayer\EnergyTankControl\DumpingInjectionForce[PassivityLayer\EnergyTankControl\i] > PassivityLayer\EnergyTankControl\MaxmimDumping[PassivityLayer\EnergyTankControl\i] then PassivityLayer\EnergyTankControl\MaxmimDumping[PassivityLayer\EnergyTankControl\i] else PassivityLayer\EnergyTankControl\DumpingInjectionForce[PassivityLayer\EnergyTankControl\i] end end; */
			M[27].mat[(XXInteger) (V[195]) - 1] = ((M[27].mat[(XXInteger) (V[195]) - 1] < -(M[30].mat[(XXInteger) (V[195]) - 1])) ? (-(M[30].mat[(XXInteger) (V[195]) - 1])) : (((M[27].mat[(XXInteger) (V[195]) - 1] > M[30].mat[(XXInteger) (V[195]) - 1]) ? (M[30].mat[(XXInteger) (V[195]) - 1]) : (M[27].mat[(XXInteger) (V[195]) - 1]))));
		}

		/* if PassivityLayer\EnergyTankControl\TCLactive */
		if (P[33])
		{
			/* PassivityLayer\EnergyTankControl\adjustedForce = PassivityLayer\PassiveZOH\adjustedForce + PassivityLayer\EnergyTankControl\DumpingInjectionForce; */
			XXMatrixAdd (&M[24], &M[32], &M[27]);
		}
		else
		{
			/* PassivityLayer\EnergyTankControl\adjustedForce = PassivityLayer\PassiveZOH\adjustedForce; */
			XXMatrixMov (&M[24], &M[32]);
		}

		/* PassivityLayer\PassiveZOH\ForceSaturationArray[:,1] = PassivityLayer\PassiveZOH\MaximumActuatorForce; */
		M[39].mat[0] = M[34].mat[0];
		M[39].mat[3] = M[34].mat[1];
		M[39].mat[6] = M[34].mat[2];
		M[39].mat[9] = M[34].mat[3];

		/* PassivityLayer\PassiveZOH\dSensorValue = PassivityLayer\PassiveZOH\sensorValue - PassivityLayer\PassiveZOH\sensorValue_previous; */
		XXMatrixSub (&M[37], &M[74], &M[75]);

		/* PassivityLayer\PassiveZOH\SensorSpeed = PassivityLayer\PassiveZOH\dSensorValue / sampletime; */
		XXMatrixScalarDiv (&M[38], &M[37], step_size);

		/* PassivityLayer\PassiveZOH\b = 2 * PassivityLayer\EnergyTankBlock\energyState; */
		V[303] = 2.0 * V[172];

		/* PassivityLayer\PassiveZOH\a = PassivityLayer\PassiveZOH\SensorSpeed; */
		XXMatrixMov (&M[46], &M[38]);

		/* PassivityLayer\PassiveZOH\xd = BaseTF\Base_torque; */
		XXMatrixMov (&M[41], &M[10]);

		/* PassivityLayer\PassiveZOH\numIter = 0; */
		V[334] = 0.0;

		/* if PassivityLayer\PassiveZOH\b > 0 and PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a > 0 */
		XXMatrixTranspose (&M[121], &M[46]);
		XXMatrixMul (&M[120], &M[121], &M[45]);
		XXScalarMatrixMatrixMul (M[119].mat, &M[120], &M[46]);
		if (V[303] > 0.0 && V[303] - M[119].mat[0] > 0.0)
		{
			/* PassivityLayer\PassiveZOH\xcl = BaseTF\Base_torque; */
			XXMatrixMov (&M[47], &M[10]);

			/* PassivityLayer\PassiveZOH\numIter = 0; */
			V[334] = 0.0;

			/* if (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xcl) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a < 0) */
			XXMatrixTranspose (&M[125], &M[47]);
			XXMatrixMul (&M[124], &M[125], &M[43]);
			XXScalarMatrixMatrixMul (M[123].mat, &M[124], &M[47]);
			XXMatrixTranspose (&M[128], &M[46]);
			XXMatrixMul (&M[127], &M[128], &M[44]);
			XXScalarMatrixMatrixMul (M[126].mat, &M[127], &M[47]);
			XXMatrixTranspose (&M[131], &M[46]);
			XXMatrixMul (&M[130], &M[131], &M[45]);
			XXScalarMatrixMatrixMul (M[129].mat, &M[130], &M[46]);
			if (((V[303] - M[123].mat[0]) - M[126].mat[0]) - M[129].mat[0] < 0.0)
			{
				/* warning */
				XXWarning ( XXDouble2String (XXString2Double (" there is enough energy to do control3")), 0);


				/* PassivityLayer\PassiveZOH\xcl = 0; */
				XXMatrixScalarMov (&M[47], 0.0);

				/* PassivityLayer\PassiveZOH\lamda2 = 1; */
				V[332] = 1.0;

				/* PassivityLayer\PassiveZOH\numIter = 0; */
				V[334] = 0.0;

				/* PassivityLayer\PassiveZOH\lamda2 = 1; */
				V[332] = 1.0;

				/* PassivityLayer\PassiveZOH\t = 1; */
				V[333] = 1.0;

				/* while (sqrt (PassivityLayer\PassiveZOH\lamda2) / PassivityLayer\PassiveZOH\t > PassivityLayer\PassiveZOH\eps and PassivityLayer\PassiveZOH\numIter < PassivityLayer\PassiveZOH\maxNumIter) */
				while (sqrt (V[332]) / V[333] > P[49] && V[334] < P[53])
				{
					/* PassivityLayer\PassiveZOH\numIter = PassivityLayer\PassiveZOH\numIter + 1; */
					V[334] = V[334] + 1.0;

					/* PassivityLayer\PassiveZOH\t = PassivityLayer\PassiveZOH\t * PassivityLayer\PassiveZOH\betaBarrier1; */
					V[333] = V[333] * P[51];

					/* PassivityLayer\PassiveZOH\dObjective = (PassivityLayer\PassiveZOH\t * (PassivityLayer\PassiveZOH\A + transpose (PassivityLayer\PassiveZOH\A))) * (PassivityLayer\PassiveZOH\xd - PassivityLayer\PassiveZOH\xcl) - (1 / (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xcl) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a)) * (-(PassivityLayer\PassiveZOH\B1 + transpose (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl - PassivityLayer\PassiveZOH\B2 * PassivityLayer\PassiveZOH\a); */
					XXMatrixTranspose (&M[136], &M[42]);
					XXMatrixAdd (&M[135], &M[42], &M[136]);
					XXScalarMatrixMul (&M[134], V[333], &M[135]);
					XXMatrixSub (&M[137], &M[41], &M[47]);
					XXMatrixMul (&M[133], &M[134], &M[137]);
					XXMatrixTranspose (&M[141], &M[47]);
					XXMatrixMul (&M[140], &M[141], &M[43]);
					XXScalarMatrixMatrixMul (M[139].mat, &M[140], &M[47]);
					XXMatrixTranspose (&M[144], &M[46]);
					XXMatrixMul (&M[143], &M[144], &M[44]);
					XXScalarMatrixMatrixMul (M[142].mat, &M[143], &M[47]);
					XXMatrixTranspose (&M[147], &M[46]);
					XXMatrixMul (&M[146], &M[147], &M[45]);
					XXScalarMatrixMatrixMul (M[145].mat, &M[146], &M[46]);
					XXMatrixTranspose (&M[152], &M[43]);
					XXMatrixAdd (&M[151], &M[43], &M[152]);
					XXMatrixInv (&M[150], &M[151]);
					XXMatrixMul (&M[149], &M[150], &M[47]);
					XXMatrixMul (&M[153], &M[44], &M[46]);
					XXMatrixSub (&M[148], &M[149], &M[153]);
					XXScalarMatrixMul (&M[138], 1.0 / (((V[303] - M[139].mat[0]) - M[142].mat[0]) - M[145].mat[0]), &M[148]);
					XXMatrixSub (&M[49], &M[133], &M[138]);

					/* PassivityLayer\PassiveZOH\HObjective = (-PassivityLayer\PassiveZOH\t * (PassivityLayer\PassiveZOH\A + transpose (PassivityLayer\PassiveZOH\A)) - ((1 / (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xcl) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a) ^ 2) * (-(PassivityLayer\PassiveZOH\B1 + transpose (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl - PassivityLayer\PassiveZOH\B2 * PassivityLayer\PassiveZOH\a)) * transpose (-(PassivityLayer\PassiveZOH\B1 + transpose (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl - PassivityLayer\PassiveZOH\B2 * PassivityLayer\PassiveZOH\a)) - (1 / (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xcl) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a)) * (PassivityLayer\PassiveZOH\B1 + transpose (PassivityLayer\PassiveZOH\B1)); */
					XXMatrixTranspose (&M[157], &M[42]);
					XXMatrixAdd (&M[156], &M[42], &M[157]);
					XXScalarMatrixMul (&M[155], -V[333], &M[156]);
					XXMatrixTranspose (&M[162], &M[47]);
					XXMatrixMul (&M[161], &M[162], &M[43]);
					XXScalarMatrixMatrixMul (M[160].mat, &M[161], &M[47]);
					XXMatrixTranspose (&M[165], &M[46]);
					XXMatrixMul (&M[164], &M[165], &M[44]);
					XXScalarMatrixMatrixMul (M[163].mat, &M[164], &M[47]);
					XXMatrixTranspose (&M[168], &M[46]);
					XXMatrixMul (&M[167], &M[168], &M[45]);
					XXScalarMatrixMatrixMul (M[166].mat, &M[167], &M[46]);
					XXMatrixTranspose (&M[173], &M[43]);
					XXMatrixAdd (&M[172], &M[43], &M[173]);
					XXMatrixInv (&M[171], &M[172]);
					XXMatrixMul (&M[170], &M[171], &M[47]);
					XXMatrixMul (&M[174], &M[44], &M[46]);
					XXMatrixSub (&M[169], &M[170], &M[174]);
					XXScalarMatrixMul (&M[159], 1.0 / ((((V[303] - M[160].mat[0]) - M[163].mat[0]) - M[166].mat[0]) * (((V[303] - M[160].mat[0]) - M[163].mat[0]) - M[166].mat[0])), &M[169]);
					XXMatrixTranspose (&M[180], &M[43]);
					XXMatrixAdd (&M[179], &M[43], &M[180]);
					XXMatrixInv (&M[178], &M[179]);
					XXMatrixMul (&M[177], &M[178], &M[47]);
					XXMatrixMul (&M[181], &M[44], &M[46]);
					XXMatrixSub (&M[176], &M[177], &M[181]);
					XXMatrixTranspose (&M[175], &M[176]);
					XXMatrixMul (&M[158], &M[159], &M[175]);
					XXMatrixSub (&M[154], &M[155], &M[158]);
					XXMatrixTranspose (&M[185], &M[47]);
					XXMatrixMul (&M[184], &M[185], &M[43]);
					XXScalarMatrixMatrixMul (M[183].mat, &M[184], &M[47]);
					XXMatrixTranspose (&M[188], &M[46]);
					XXMatrixMul (&M[187], &M[188], &M[44]);
					XXScalarMatrixMatrixMul (M[186].mat, &M[187], &M[47]);
					XXMatrixTranspose (&M[191], &M[46]);
					XXMatrixMul (&M[190], &M[191], &M[45]);
					XXScalarMatrixMatrixMul (M[189].mat, &M[190], &M[46]);
					XXMatrixTranspose (&M[193], &M[43]);
					XXMatrixAdd (&M[192], &M[43], &M[193]);
					XXScalarMatrixMul (&M[182], 1.0 / (((V[303] - M[183].mat[0]) - M[186].mat[0]) - M[189].mat[0]), &M[192]);
					XXMatrixSub (&M[50], &M[154], &M[182]);

					/* PassivityLayer\PassiveZOH\dx = -inverse (PassivityLayer\PassiveZOH\HObjective) * PassivityLayer\PassiveZOH\dObjective; */
					XXMatrixInverse (&M[195], &M[50], workarray);
					XXMatrixInv (&M[194], &M[195]);
					XXMatrixMul (&M[48], &M[194], &M[49]);

					/* PassivityLayer\PassiveZOH\lamda2 = abs (transpose (PassivityLayer\PassiveZOH\dObjective) * PassivityLayer\PassiveZOH\dx); */
					XXMatrixTranspose (&M[197], &M[49]);
					XXScalarMatrixMatrixMul (M[196].mat, &M[197], &M[48]);
					V[332] = XXAbsolute (M[196].mat[0]);

					/* PassivityLayer\PassiveZOH\obj = ((PassivityLayer\PassiveZOH\t * transpose (PassivityLayer\PassiveZOH\xd - PassivityLayer\PassiveZOH\xcl)) * PassivityLayer\PassiveZOH\A) * (PassivityLayer\PassiveZOH\xd - PassivityLayer\PassiveZOH\xcl) - log (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xcl) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xcl) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a); */
					XXMatrixSub (&M[202], &M[41], &M[47]);
					XXMatrixTranspose (&M[201], &M[202]);
					XXScalarMatrixMul (&M[200], V[333], &M[201]);
					XXMatrixMul (&M[199], &M[200], &M[42]);
					XXMatrixSub (&M[203], &M[41], &M[47]);
					XXScalarMatrixMatrixMul (M[198].mat, &M[199], &M[203]);
					XXMatrixTranspose (&M[206], &M[47]);
					XXMatrixMul (&M[205], &M[206], &M[43]);
					XXScalarMatrixMatrixMul (M[204].mat, &M[205], &M[47]);
					XXMatrixTranspose (&M[209], &M[46]);
					XXMatrixMul (&M[208], &M[209], &M[44]);
					XXScalarMatrixMatrixMul (M[207].mat, &M[208], &M[47]);
					XXMatrixTranspose (&M[212], &M[46]);
					XXMatrixMul (&M[211], &M[212], &M[45]);
					XXScalarMatrixMatrixMul (M[210].mat, &M[211], &M[46]);
					V[335] = M[198].mat[0] - log (((V[303] - M[204].mat[0]) - M[207].mat[0]) - M[210].mat[0]);

					/* PassivityLayer\PassiveZOH\stepSize = 1; */
					V[341] = 1.0;

					/* PassivityLayer\PassiveZOH\objAldo = PassivityLayer\PassiveZOH\obj; */
					V[336] = V[335];

					/* PassivityLayer\PassiveZOH\xAldo = PassivityLayer\PassiveZOH\xcl; */
					XXMatrixMov (&M[51], &M[47]);

					/* while (PassivityLayer\PassiveZOH\obj <= PassivityLayer\PassiveZOH\objAldo and PassivityLayer\PassiveZOH\stepSize > PassivityLayer\PassiveZOH\eps ^ 3) */
					while (V[335] <= V[336] && V[341] > XXPower (P[49], 3.0))
					{
						/* PassivityLayer\PassiveZOH\stepSize = PassivityLayer\PassiveZOH\betaLine * PassivityLayer\PassiveZOH\stepSize; */
						V[341] = P[50] * V[341];

						/* PassivityLayer\PassiveZOH\xAldo = PassivityLayer\PassiveZOH\xcl + PassivityLayer\PassiveZOH\dx * PassivityLayer\PassiveZOH\stepSize; */
						XXMatrixScalarMul (&M[213], &M[48], V[341]);
						XXMatrixAdd (&M[51], &M[47], &M[213]);

						/* if (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xAldo) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xAldo) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xAldo) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a > 0) */
						XXMatrixTranspose (&M[216], &M[51]);
						XXMatrixMul (&M[215], &M[216], &M[43]);
						XXScalarMatrixMatrixMul (M[214].mat, &M[215], &M[51]);
						XXMatrixTranspose (&M[219], &M[46]);
						XXMatrixMul (&M[218], &M[219], &M[44]);
						XXScalarMatrixMatrixMul (M[217].mat, &M[218], &M[51]);
						XXMatrixTranspose (&M[222], &M[46]);
						XXMatrixMul (&M[221], &M[222], &M[45]);
						XXScalarMatrixMatrixMul (M[220].mat, &M[221], &M[46]);
						if (((V[303] - M[214].mat[0]) - M[217].mat[0]) - M[220].mat[0] > 0.0)
						{
							/* PassivityLayer\PassiveZOH\objAldo = ((PassivityLayer\PassiveZOH\t * transpose (PassivityLayer\PassiveZOH\xd - PassivityLayer\PassiveZOH\xAldo)) * PassivityLayer\PassiveZOH\A) * (PassivityLayer\PassiveZOH\xd - PassivityLayer\PassiveZOH\xAldo) - log (((PassivityLayer\PassiveZOH\b - (transpose (PassivityLayer\PassiveZOH\xAldo) * (PassivityLayer\PassiveZOH\B1)) * PassivityLayer\PassiveZOH\xAldo) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B2) * PassivityLayer\PassiveZOH\xAldo) - (transpose (PassivityLayer\PassiveZOH\a) * PassivityLayer\PassiveZOH\B3) * PassivityLayer\PassiveZOH\a); */
							XXMatrixSub (&M[227], &M[41], &M[51]);
							XXMatrixTranspose (&M[226], &M[227]);
							XXScalarMatrixMul (&M[225], V[333], &M[226]);
							XXMatrixMul (&M[224], &M[225], &M[42]);
							XXMatrixSub (&M[228], &M[41], &M[51]);
							XXScalarMatrixMatrixMul (M[223].mat, &M[224], &M[228]);
							XXMatrixTranspose (&M[231], &M[51]);
							XXMatrixMul (&M[230], &M[231], &M[43]);
							XXScalarMatrixMatrixMul (M[229].mat, &M[230], &M[51]);
							XXMatrixTranspose (&M[234], &M[46]);
							XXMatrixMul (&M[233], &M[234], &M[44]);
							XXScalarMatrixMatrixMul (M[232].mat, &M[233], &M[51]);
							XXMatrixTranspose (&M[237], &M[46]);
							XXMatrixMul (&M[236], &M[237], &M[45]);
							XXScalarMatrixMatrixMul (M[235].mat, &M[236], &M[46]);
							V[336] = M[223].mat[0] - log (((V[303] - M[229].mat[0]) - M[232].mat[0]) - M[235].mat[0]);
						}

						/* if (PassivityLayer\PassiveZOH\stepSize < PassivityLayer\PassiveZOH\eps ^ 3) */
						if (V[341] < XXPower (P[49], 3.0))
						{
							/* warning */
							XXWarning ( XXDouble2String (XXString2Double ("had to intreupt")), 1);


							/* PassivityLayer\PassiveZOH\t = PassivityLayer\PassiveZOH\t * PassivityLayer\PassiveZOH\betaBarrier2; */
							V[333] = V[333] * P[52];

							/* PassivityLayer\PassiveZOH\xAldo = PassivityLayer\PassiveZOH\xcl; */
							XXMatrixMov (&M[51], &M[47]);
						}
					}

					/* PassivityLayer\PassiveZOH\xcl = PassivityLayer\PassiveZOH\xAldo; */
					XXMatrixMov (&M[47], &M[51]);
				}
			}
			else
			{
				/* PassivityLayer\PassiveZOH\xcl = BaseTF\Base_torque; */
				XXMatrixMov (&M[47], &M[10]);
			}
		}
		else
		{
			/* PassivityLayer\PassiveZOH\xcl = 0; */
			XXMatrixScalarMov (&M[47], 0.0);
		}

		/* PassivityLayer\PassiveZOH\ForceSaturationArray[:,2] = PassivityLayer\PassiveZOH\xcl; */
		M[39].mat[1] = M[47].mat[0];
		M[39].mat[4] = M[47].mat[1];
		M[39].mat[7] = M[47].mat[2];
		M[39].mat[10] = M[47].mat[3];

		/* PassivityLayer\PassiveZOH\ForceSaturationArray[:,3] = BaseTF\Base_torque; */
		M[39].mat[2] = M[10].mat[0];
		M[39].mat[5] = M[10].mat[1];
		M[39].mat[8] = M[10].mat[2];
		M[39].mat[11] = M[10].mat[3];

		/* for PassivityLayer\PassiveZOH\i = 1 to PassivityLayer\PassiveZOH\n */
		for (V[229] = 1.0; V[229] <= P[35]; V[229]++)
		{
			/* PassivityLayer\PassiveZOH\SaturatedForce[PassivityLayer\PassiveZOH\i] = sign (BaseTF\Base_torque[PassivityLayer\PassiveZOH\i]) * min (abs (PassivityLayer\PassiveZOH\ForceSaturationArray[PassivityLayer\PassiveZOH\i,:])); */
			M[243].mat[0] = M[39].mat[(XXInteger) ((V[229] - 1) * 3 + 0)];
			M[243].mat[1] = M[39].mat[(XXInteger) ((V[229] - 1) * 3 + 1)];
			M[243].mat[2] = M[39].mat[(XXInteger) ((V[229] - 1) * 3 + 2)];
			M[242].mat[0] = XXAbsolute (M[243].mat[0]);
			M[242].mat[1] = XXAbsolute (M[243].mat[1]);
			M[242].mat[2] = XXAbsolute (M[243].mat[2]);
			XXMatrixMinimum (M[241].mat, &M[242]);
			M[40].mat[(XXInteger) (V[229]) - 1] = XXSign (M[10].mat[(XXInteger) (V[229]) - 1]) * M[241].mat[0];
		}

		/* if PassivityLayer\PassiveZOH\PassivityLayerActive */
		if (P[44])
		{
			/* PassivityLayer\PassiveZOH\adjustedForce = PassivityLayer\PassiveZOH\SaturatedForce; */
			XXMatrixMov (&M[32], &M[40]);
		}
		else
		{
			/* PassivityLayer\PassiveZOH\adjustedForce = BaseTF\Base_torque; */
			XXMatrixMov (&M[32], &M[10]);
		}

	}

	/* This function calculates the output equations of the model.
	 * These equations are not needed for calculation of the rates
	 * and are kept separate to make the dynamic set of equations smaller.
	 * These dynamic equations are called often more than one time for each
	 * integration step that is taken. This makes model computation much faster.
	 */
	inline void BasePoseControllerModel::CalculateOutput (void)
	{
			/* BasePositionController\active_joint = active_joint; */
	XXMatrixMov (&M[7], &M[58]);

	/* BasePositionController\H_vp_0 = H_vp_0; */
	XXMatrixMov (&M[6], &M[60]);

	/* PlusMinus4\plus2 = W_base_00; */
	XXMatrixMov (&M[53], &M[62]);

	/* BasePositionController\Submodel3\aldo = [1; 1; BasePositionController\active_joint[1]; BasePositionController\active_joint[2]; BasePositionController\active_joint[3]; 1]; */
	M[5].mat[0] = 1.0;
	M[5].mat[1] = 1.0;
	M[5].mat[2] = M[7].mat[0];
	M[5].mat[3] = M[7].mat[1];
	M[5].mat[4] = M[7].mat[2];
	M[5].mat[5] = 1.0;

	/* DiscreteDifferential\output = (DiscreteDifferential\input - DiscreteDifferential\input_previous) / sampletime + DiscreteDifferential\initial_input; */
	XXMatrixSub (&M[247], &M[65], &M[66]);
	XXMatrixScalarDiv (&M[246], &M[247], step_size);
	XXMatrixAdd (&M[14], &M[246], &M[15]);

	/* PassivityLayer\PlusMinus1\output = PassivityLayer\PassiveSampling\energyQuanta + PassivityLayer\SETP\energyQuanta; */
	V[342] = V[196] + V[343];

	/* BasePositionController\ErrorsToW\W_base_base0 = [0; 0; BasePositionController\PD_BaseAngle\uD; BasePositionController\PD_BaseX\uD; BasePositionController\PD_BaseY\uD; 0]; */
	M[3].mat[0] = 0.0;
	M[3].mat[1] = 0.0;
	M[3].mat[2] = R[0];
	M[3].mat[3] = R[2];
	M[3].mat[4] = R[4];
	M[3].mat[5] = 0.0;

	/* BasePositionController\Submodel3\cmd = diag (abs (sign (BasePositionController\Submodel3\aldo))) * BasePositionController\ErrorsToW\W_base_base0; */
	M[250].mat[0] = XXSign (M[5].mat[0]);
	M[250].mat[1] = XXSign (M[5].mat[1]);
	M[250].mat[2] = XXSign (M[5].mat[2]);
	M[250].mat[3] = XXSign (M[5].mat[3]);
	M[250].mat[4] = XXSign (M[5].mat[4]);
	M[250].mat[5] = XXSign (M[5].mat[5]);
	M[249].mat[0] = XXAbsolute (M[250].mat[0]);
	M[249].mat[1] = XXAbsolute (M[250].mat[1]);
	M[249].mat[2] = XXAbsolute (M[250].mat[2]);
	M[249].mat[3] = XXAbsolute (M[250].mat[3]);
	M[249].mat[4] = XXAbsolute (M[250].mat[4]);
	M[249].mat[5] = XXAbsolute (M[250].mat[5]);
	XXMatrixDiag (&M[248], &M[249]);
	XXMatrixMul (&M[4], &M[248], &M[3]);

	/* PlusMinus4\output = BasePositionController\Submodel3\cmd + PlusMinus4\plus2; */
	XXMatrixAdd (&M[52], &M[4], &M[53]);

			}

	/* This function calculates the final equations of the model.
	 * These equations are calculated after all the calculations
	 * are performed
	 */
	inline void BasePoseControllerModel::CalculateFinal (void)
	{
		
	}

	bool BasePoseControllerModel::setPeriod(double seconds)
	{
			step_size = seconds;
			return true;
	}

	double BasePoseControllerModel::getPeriod()
  {
      return step_size;
  }

}

